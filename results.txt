TAP version 13

# starting chrome@108 (windows 10)
# starting chrome@108 (windows 10)
# starting chrome@108 (windows 10)
# starting chrome@108 (windows 10)
# starting chrome@108 (windows 10)
# starting chrome@108 (windows 10)
# starting chrome@108 (windows 10)
# starting chrome@108 (windows 10)
# starting chrome@108 (windows 10)
# starting chrome@108 (windows 10)
# starting chrome@108 (windows 10)
# starting chrome@108 (windows 10)
# starting chrome@108 (windows 10)
# starting chrome@108 (windows 10)
# starting chrome@108 (windows 10)
# starting chrome@108 (windows 10)
# starting chrome@108 (windows 10)
# starting chrome@108 (windows 10)
# starting chrome@108 (windows 10)
# starting chrome@108 (windows 10)
# chrome@108 (windows 10) -> customTransactionName 1 arg
# chrome@108 (windows 10) -> customTransactionName 1 arg unload
# chrome@108 (windows 10) -> customTransactionName 2 arg
# chrome@108 (windows 10) -> noticeError takes an error object
# chrome@108 (windows 10) -> noticeError takes a string
# chrome@108 (windows 10) -> finished records a PageAction when called before RUM message
# chrome@108 (windows 10) -> release api adds releases to jserrors
# chrome@108 (windows 10) -> release api limits releases to jserrors
# chrome@108 (windows 10) -> release api limits release size to jserrors
# chrome@108 (windows 10) -> no query param when release is not set
# chrome@108 (windows 10) -> set multiple custom attributes after page load with multiple JS errors occurring after page load (full)
# chrome@108 (windows 10) -> set single custom attribute before page load with single JS error occurring before page load (full)
# chrome@108 (windows 10) -> set custom attribute before page load after loader before info (full)
# chrome@108 (windows 10) -> set custom attribute with pre-existing attributes before page load after loader before info (full)
# chrome@108 (windows 10) -> set custom attribute with pre-existing attributes before page load after loader before info precedence check (full)
# chrome@108 (windows 10) -> set multiple custom attributes before page load with multiple JS errors occurring after page load (full)
# chrome@108 (windows 10) -> noticeError accepts custom attributes in an argument (full)
# chrome@108 (windows 10) -> set multiple custom attributes after page load with multiple JS errors occurring after page load (spa)
# chrome@108 (windows 10) -> set single custom attribute before page load with single JS error occurring before page load (spa)
# chrome@108 (windows 10) -> set custom attribute before page load after loader before info (spa)
ok chrome@108 (windows 10) -> finished records a PageAction when called before RUM message -> exactly 1 PageAction was submitted
ok chrome@108 (windows 10) -> noticeError takes an error object -> The agent passes an error class instead of a string.
ok chrome@108 (windows 10) -> release api limits release size to jserrors -> twoHundredCharacterString should be 200 characters but is 200
ok chrome@108 (windows 10) -> noticeError takes a string -> The agent passes an error class instead of a string.
ok chrome@108 (windows 10) -> set single custom attribute before page load with single JS error occurring before page load (full) -> exactly one error
ok chrome@108 (windows 10) -> set custom attribute with pre-existing attributes before page load after loader before info (full) -> first error should have a custom parameter set with the expected value
ok chrome@108 (windows 10) -> noticeError accepts custom attributes in an argument (full) -> exactly one error
ok chrome@108 (windows 10) -> noticeError accepts custom attributes in an argument (full) -> should have first custom attribute
ok chrome@108 (windows 10) -> set single custom attribute before page load with single JS error occurring before page load (spa) -> exactly one error
ok chrome@108 (windows 10) -> customTransactionName 1 arg -> Custom Transaction Name (1 arg)
# chrome@108 (windows 10) -> set custom attribute with pre-existing attributes before page load after loader before info (spa)
ok chrome@108 (windows 10) -> set custom attribute with pre-existing attributes before page load after loader before info (spa) -> first error should have a custom parameter set with the expected value
ok chrome@108 (windows 10) -> finished records a PageAction when called before RUM message -> PageAction has actionName = finished
# chrome@108 (windows 10) -> set custom attribute with pre-existing attributes before page load after loader before info precedence check (spa)
ok chrome@108 (windows 10) -> set multiple custom attributes after page load with multiple JS errors occurring after page load (spa) -> exactly three errors
ok chrome@108 (windows 10) -> set multiple custom attributes after page load with multiple JS errors occurring after page load (spa) -> first error should have a custom parameter set with the expected value
ok chrome@108 (windows 10) -> set multiple custom attributes after page load with multiple JS errors occurring after page load (spa) -> second error should have a custom parameter set with the expected value
ok chrome@108 (windows 10) -> set multiple custom attributes before page load with multiple JS errors occurring after page load (full) -> exactly one error
ok chrome@108 (windows 10) -> set multiple custom attributes before page load with multiple JS errors occurring after page load (full) -> first error should have a custom parameter set with the expected value
ok chrome@108 (windows 10) -> set multiple custom attributes after page load with multiple JS errors occurring after page load (full) -> exactly three errors
ok chrome@108 (windows 10) -> set multiple custom attributes after page load with multiple JS errors occurring after page load (full) -> first error should have a custom parameter set with the expected value
ok chrome@108 (windows 10) -> set multiple custom attributes after page load with multiple JS errors occurring after page load (full) -> second error should have a custom parameter set with the expected value
ok chrome@108 (windows 10) -> noticeError takes an error object -> Params contain the right error message.
# chrome@108 (windows 10) -> noticeError accepts custom attributes in an argument (spa)
ok chrome@108 (windows 10) -> noticeError accepts custom attributes in an argument (spa) -> exactly one error
ok chrome@108 (windows 10) -> noticeError accepts custom attributes in an argument (spa) -> should have first custom attribute
ok chrome@108 (windows 10) -> release api limits releases to jserrors -> {"one":"1","two":"2","three":"3","four":"4","five":"5","six":"6","seven":"7","eight":"8","nine":"9","ten":"10"} is expected but got {"one":"1","two":"2","three":"3","four":"4","five":"5","six":"6","seven":"7","eight":"8","nine":"9","ten":"10"}
# chrome@108 (windows 10) -> initial load interaction: simple case - single error
ok chrome@108 (windows 10) -> initial load interaction: simple case - single error -> exactly one error
ok chrome@108 (windows 10) -> release api limits release size to jserrors -> {"one":"201","three":"yyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxq","yyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxq":"2"} is expected but got {"one":"201","yyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxq":"2","three":"yyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxq"}
# chrome@108 (windows 10) -> initial load interaction: muliple errors - different attribute values
ok chrome@108 (windows 10) -> initial load interaction: muliple errors - different attribute values -> exactly three errors
ok chrome@108 (windows 10) -> initial load interaction: muliple errors - different attribute values -> first error should have a custom parameter set with the expected value
ok chrome@108 (windows 10) -> initial load interaction: muliple errors - different attribute values -> second error should have a custom parameter set with the expected value
ok chrome@108 (windows 10) -> set single custom attribute before page load with single JS error occurring before page load (full) -> first error should have a custom parameter set with the expected value
# chrome@108 (windows 10) -> global and interaction attributes on same error
ok chrome@108 (windows 10) -> global and interaction attributes on same error -> exactly one error
ok chrome@108 (windows 10) -> global and interaction attributes on same error -> first error should have a custom attribute set with the expected value
ok chrome@108 (windows 10) -> noticeError accepts custom attributes in an argument (full) -> should have second custom attribute
# chrome@108 (windows 10) -> noticeError takes precedence over setAttribute
ok chrome@108 (windows 10) -> noticeError takes precedence over setAttribute -> exactly one error
ok chrome@108 (windows 10) -> set custom attribute with pre-existing attributes before page load after loader before info (full) -> first error should have a custom parameter set with the expected value
# chrome@108 (windows 10) -> setAttribute takes precedence over setCustomAttribute
ok chrome@108 (windows 10) -> setAttribute takes precedence over setCustomAttribute -> exactly one error
ok chrome@108 (windows 10) -> noticeError takes a string -> Params contain the right error message.
# chrome@108 (windows 10) -> click interaction: simple case - single error
ok chrome@108 (windows 10) -> click interaction: simple case - single error -> exactly one error
ok chrome@108 (windows 10) -> set custom attribute before page load after loader before info (full) -> first error should have a custom parameter set with the expected value
# chrome@108 (windows 10) -> click interaction: multiple errors - different attribute values
ok chrome@108 (windows 10) -> click interaction: multiple errors - different attribute values -> exactly three errors
ok chrome@108 (windows 10) -> click interaction: multiple errors - different attribute values -> first error should have a custom parameter set with the expected value
ok chrome@108 (windows 10) -> click interaction: multiple errors - different attribute values -> second error should have a custom parameter set with the expected value
ok chrome@108 (windows 10) -> release api adds releases to jserrors -> should have expected value for ri query param
# chrome@108 (windows 10) -> set multiple custom attributes before page load with multiple JS errors occurring after page load (spa)
ok chrome@108 (windows 10) -> set multiple custom attributes before page load with multiple JS errors occurring after page load (spa) -> exactly one error
ok chrome@108 (windows 10) -> set multiple custom attributes before page load with multiple JS errors occurring after page load (spa) -> first error should have a custom parameter set with the expected value
ok chrome@108 (windows 10) -> no query param when release is not set -> should not have ri query param
# chrome@108 (windows 10) -> click interaction: attributes captured in discarded interaction are still collected
ok chrome@108 (windows 10) -> click interaction: attributes captured in discarded interaction are still collected -> exactly one error
ok chrome@108 (windows 10) -> set single custom attribute before page load with single JS error occurring before page load (spa) -> first error should have a custom parameter set with the expected value
# chrome@108 (windows 10) -> noticeError takes precedence over setAttribute in discarded interactions
ok chrome@108 (windows 10) -> noticeError takes precedence over setAttribute in discarded interactions -> exactly one error
ok chrome@108 (windows 10) -> customTransactionName 1 arg unload -> Custom Transaction Name (1 arg)
ok chrome@108 (windows 10) -> customTransactionName 1 arg unload -> Finished exists XHR (1 arg)
ok chrome@108 (windows 10) -> customTransactionName 2 arg -> Custom Transaction Name (2 arg)
ok chrome@108 (windows 10) -> customTransactionName 2 arg -> Finished exists XHR (2 arg)
ok chrome@108 (windows 10) -> set multiple custom attributes after page load with multiple JS errors occurring after page load (full) -> third error should have a custom parameter set with the expected value
# chrome@108 (windows 10) -> reporting uncaught errors from external scripts
ok chrome@108 (windows 10) -> reporting uncaught errors from external scripts -> pageViewErr reported
ok chrome@108 (windows 10) -> reporting uncaught errors from external scripts -> Expected exactly one error
ok chrome@108 (windows 10) -> reporting uncaught errors from external scripts -> stack trace should not include URL query string or fragment
ok chrome@108 (windows 10) -> reporting uncaught errors from external scripts -> Expected exactly one error
ok chrome@108 (windows 10) -> set multiple custom attributes before page load with multiple JS errors occurring after page load (full) -> first error has a count of 3
# chrome@108 (windows 10) -> reporting errors from event listener callbacks
ok chrome@108 (windows 10) -> reporting errors from event listener callbacks -> pageViewErr reported
ok chrome@108 (windows 10) -> reporting errors from event listener callbacks -> Has 2 errors
ok chrome@108 (windows 10) -> reporting errors from event listener callbacks -> document addEventListener listenerexceptionClass is Error
ok chrome@108 (windows 10) -> reporting errors from event listener callbacks -> document addEventListener listenermessage is correct
ok chrome@108 (windows 10) -> reporting errors from event listener callbacks -> Stack trace has handleEvent
ok chrome@108 (windows 10) -> reporting errors from event listener callbacks -> Stack trace has eventListenerUrl
ok chrome@108 (windows 10) -> reporting errors from event listener callbacks -> global addEventListener listenerexceptionClass is Error
ok chrome@108 (windows 10) -> reporting errors from event listener callbacks -> global addEventListener listenermessage is correct
ok chrome@108 (windows 10) -> reporting errors from event listener callbacks -> Stack trace has handleEvent
ok chrome@108 (windows 10) -> set multiple custom attributes after page load with multiple JS errors occurring after page load (spa) -> third error should have a custom parameter set with the expected value
# chrome@108 (windows 10) -> encoding error where message contains a circular reference
ok chrome@108 (windows 10) -> encoding error where message contains a circular reference -> exactly one error
ok chrome@108 (windows 10) -> set custom attribute before page load after loader before info (spa) -> first error should have a custom parameter set with the expected value
# chrome@108 (windows 10) -> NR-40043: Multiple errors with noticeError and unique messages should not bucket
ok chrome@108 (windows 10) -> NR-40043: Multiple errors with noticeError and unique messages should not bucket -> pageViewErr reported
ok chrome@108 (windows 10) -> NR-40043: Multiple errors with noticeError and unique messages should not bucket -> exactly 8 errors
ok chrome@108 (windows 10) -> NR-40043: Multiple errors with noticeError and unique messages should not bucket -> found expected error
ok chrome@108 (windows 10) -> NR-40043: Multiple errors with noticeError and unique messages should not bucket -> Stack hash for error Error message 1
ok chrome@108 (windows 10) -> NR-40043: Multiple errors with noticeError and unique messages should not bucket -> has correct request_uri attribute
ok chrome@108 (windows 10) -> NR-40043: Multiple errors with noticeError and unique messages should not bucket -> found expected error
ok chrome@108 (windows 10) -> NR-40043: Multiple errors with noticeError and unique messages should not bucket -> Stack hash for error Error message 2
ok chrome@108 (windows 10) -> NR-40043: Multiple errors with noticeError and unique messages should not bucket -> has correct request_uri attribute
ok chrome@108 (windows 10) -> NR-40043: Multiple errors with noticeError and unique messages should not bucket -> found expected error
ok chrome@108 (windows 10) -> NR-40043: Multiple errors with noticeError and unique messages should not bucket -> Stack hash for error Error message 3
ok chrome@108 (windows 10) -> NR-40043: Multiple errors with noticeError and unique messages should not bucket -> has correct request_uri attribute
ok chrome@108 (windows 10) -> NR-40043: Multiple errors with noticeError and unique messages should not bucket -> found expected error
ok chrome@108 (windows 10) -> NR-40043: Multiple errors with noticeError and unique messages should not bucket -> Stack hash for error Error message 4
ok chrome@108 (windows 10) -> NR-40043: Multiple errors with noticeError and unique messages should not bucket -> has correct request_uri attribute
ok chrome@108 (windows 10) -> NR-40043: Multiple errors with noticeError and unique messages should not bucket -> found expected error
ok chrome@108 (windows 10) -> NR-40043: Multiple errors with noticeError and unique messages should not bucket -> Stack hash for error Error message 5
ok chrome@108 (windows 10) -> NR-40043: Multiple errors with noticeError and unique messages should not bucket -> has correct request_uri attribute
ok chrome@108 (windows 10) -> NR-40043: Multiple errors with noticeError and unique messages should not bucket -> found expected error
ok chrome@108 (windows 10) -> NR-40043: Multiple errors with noticeError and unique messages should not bucket -> Stack hash for error Error message 6
ok chrome@108 (windows 10) -> NR-40043: Multiple errors with noticeError and unique messages should not bucket -> has correct request_uri attribute
ok chrome@108 (windows 10) -> NR-40043: Multiple errors with noticeError and unique messages should not bucket -> found expected error
ok chrome@108 (windows 10) -> NR-40043: Multiple errors with noticeError and unique messages should not bucket -> Stack hash for error Error message 7
ok chrome@108 (windows 10) -> NR-40043: Multiple errors with noticeError and unique messages should not bucket -> has correct request_uri attribute
ok chrome@108 (windows 10) -> NR-40043: Multiple errors with noticeError and unique messages should not bucket -> found expected error
ok chrome@108 (windows 10) -> NR-40043: Multiple errors with noticeError and unique messages should not bucket -> Stack hash for error Error message 8
ok chrome@108 (windows 10) -> initial load interaction: muliple errors - different attribute values -> third error should have a custom parameter set with the expected value
# chrome@108 (windows 10) -> reporting uncaught errors from inline scripts
ok chrome@108 (windows 10) -> reporting uncaught errors from inline scripts -> pageViewErr reported
ok chrome@108 (windows 10) -> reporting uncaught errors from inline scripts -> Expected exactly one error
ok chrome@108 (windows 10) -> reporting uncaught errors from inline scripts -> stack trace should not include URL query string or fragment
ok chrome@108 (windows 10) -> reporting uncaught errors from inline scripts -> Expected exactly one error
ok chrome@108 (windows 10) -> initial load interaction: simple case - single error -> first error should have a custom parameter set with the expected value
# chrome@108 (windows 10) -> ignoring errors works
ok chrome@108 (windows 10) -> ignoring errors works -> pageViewErr reported
ok chrome@108 (windows 10) -> ignoring errors works -> exactly 1 errors
ok chrome@108 (windows 10) -> ignoring errors works -> found expected error
ok chrome@108 (windows 10) -> ignoring errors works -> Stack hash for error report
ok chrome@108 (windows 10) -> set custom attribute with pre-existing attributes before page load after loader before info (spa) -> first error should have a custom parameter set with the expected value
# chrome@108 (windows 10) -> NEWRELIC-3788: Multiple identical errors from the same line but different columns should not be bucketed
ok chrome@108 (windows 10) -> NEWRELIC-3788: Multiple identical errors from the same line but different columns should not be bucketed -> pageViewErr reported
ok chrome@108 (windows 10) -> NEWRELIC-3788: Multiple identical errors from the same line but different columns should not be bucketed -> two errors reported
ok chrome@108 (windows 10) -> NEWRELIC-3788: Multiple identical errors from the same line but different columns should not be bucketed -> first error has stack trace
ok chrome@108 (windows 10) -> noticeError takes precedence over setAttribute -> error should have value from noticeError
# chrome@108 (windows 10) -> reporting errors from setTimeout callbacks
ok chrome@108 (windows 10) -> reporting errors from setTimeout callbacks -> pageViewErr reported
ok chrome@108 (windows 10) -> reporting errors from setTimeout callbacks -> exactly 1 errors
ok chrome@108 (windows 10) -> reporting errors from setTimeout callbacks -> found expected error
ok chrome@108 (windows 10) -> reporting errors from setTimeout callbacks -> Stack hash for error timeout callback
ok chrome@108 (windows 10) -> click interaction: simple case - single error -> first error should have a custom parameter set with the expected value
# chrome@108 (windows 10) -> reporting errors from XHR callbacks
ok chrome@108 (windows 10) -> reporting errors from XHR callbacks -> pageViewErr reported
ok chrome@108 (windows 10) -> reporting errors from XHR callbacks -> exactly 1 errors
ok chrome@108 (windows 10) -> reporting errors from XHR callbacks -> found expected error
ok chrome@108 (windows 10) -> reporting errors from XHR callbacks -> Stack hash for error xhr onload
ok chrome@108 (windows 10) -> global and interaction attributes on same error -> first error should have an interaction attribute set with the expected value
# chrome@108 (windows 10) -> reporting errors from setInterval callbacks
ok chrome@108 (windows 10) -> reporting errors from setInterval callbacks -> pageViewErr reported
ok chrome@108 (windows 10) -> reporting errors from setInterval callbacks -> exactly 1 errors
ok chrome@108 (windows 10) -> reporting errors from setInterval callbacks -> found expected error
ok chrome@108 (windows 10) -> reporting errors from setInterval callbacks -> Stack hash for error interval callback
ok chrome@108 (windows 10) -> set multiple custom attributes before page load with multiple JS errors occurring after page load (spa) -> first error has a count of 3
# chrome@108 (windows 10) -> final harvest sends page action
ok chrome@108 (windows 10) -> final harvest sends page action -> no ins harvest yet
ok chrome@108 (windows 10) -> click interaction: multiple errors - different attribute values -> third error should have a custom parameter set with the expected value
# chrome@108 (windows 10) -> final harvest happens on page unload -- new unload BFC work
ok chrome@108 (windows 10) -> final harvest happens on page unload -- new unload BFC work -> no ins harvest yet
ok chrome@108 (windows 10) -> final harvest happens on page unload -- new unload BFC work -> no err harvest yet
ok chrome@108 (windows 10) -> final harvest happens on page unload -- new unload BFC work -> received one ins harvest
ok chrome@108 (windows 10) -> customTransactionName 1 arg unload -> Finished time XHR > 0 (1 arg)
# chrome@108 (windows 10) -> final harvest sends js errors
ok chrome@108 (windows 10) -> final harvest sends js errors -> no errors harvest yet
ok chrome@108 (windows 10) -> noticeError takes precedence over setAttribute in discarded interactions -> error should have value val1
# chrome@108 (windows 10) -> final harvest doesnt append pageHide if already previously recorded
ok chrome@108 (windows 10) -> final harvest doesnt append pageHide if already previously recorded -> there should be at least one timing metric
ok chrome@108 (windows 10) -> final harvest doesnt append pageHide if already previously recorded -> there should be ONLY ONE pageHide timing
ok chrome@108 (windows 10) -> final harvest doesnt append pageHide if already previously recorded -> value should be a positive number
ok chrome@108 (windows 10) -> setAttribute takes precedence over setCustomAttribute -> first error should have value from setAttribute
# chrome@108 (windows 10) -> reporting uncaught errors
ok chrome@108 (windows 10) -> reporting uncaught errors -> pageViewErr reported
ok chrome@108 (windows 10) -> reporting uncaught errors -> expected original onerror message exists
ok chrome@108 (windows 10) -> reporting uncaught errors -> stack_trace exists
ok chrome@108 (windows 10) -> reporting uncaught errors -> stackHash exists
ok chrome@108 (windows 10) -> reporting uncaught errors -> error has correct exceptionClass (Error)
ok chrome@108 (windows 10) -> reporting uncaught errors -> expected uncaught error message exists
ok chrome@108 (windows 10) -> reporting uncaught errors -> stack_trace exists
ok chrome@108 (windows 10) -> reporting uncaught errors -> stackHash exists
ok chrome@108 (windows 10) -> reporting uncaught errors -> error has correct exceptionClass (Error)
ok chrome@108 (windows 10) -> reporting uncaught errors -> expected original onerror message exists
ok chrome@108 (windows 10) -> reporting uncaught errors -> stack_trace exists
ok chrome@108 (windows 10) -> reporting uncaught errors -> stackHash exists
ok chrome@108 (windows 10) -> reporting uncaught errors -> error has correct exceptionClass (Error)
ok chrome@108 (windows 10) -> reporting uncaught errors -> expected fake message exists
ok chrome@108 (windows 10) -> reporting uncaught errors -> stack_trace exists
ok chrome@108 (windows 10) -> reporting uncaught errors -> stackHash exists
ok chrome@108 (windows 10) -> reporting uncaught errors -> fake error has correct exceptionClass (h)
ok chrome@108 (windows 10) -> reporting uncaught errors -> expected original return false message exists
ok chrome@108 (windows 10) -> reporting uncaught errors -> stack_trace exists
ok chrome@108 (windows 10) -> reporting uncaught errors -> stackHash exists
ok chrome@108 (windows 10) -> reporting uncaught errors -> error has correct exceptionClass (Error)
ok chrome@108 (windows 10) -> reporting uncaught errors from external scripts -> stack trace should not include URL query string or fragment
# chrome@108 (windows 10) -> final harvest sends timings data
ok chrome@108 (windows 10) -> final harvest sends timings data -> no events harvest yet
ok chrome@108 (windows 10) -> final harvest sends timings data -> received first events harvest
ok chrome@108 (windows 10) -> final harvest sends timings data -> there should be at least one timing metric
ok chrome@108 (windows 10) -> click interaction: attributes captured in discarded interaction are still collected -> first error should have a custom parameter set with the expected value
# chrome@108 (windows 10) -> final harvest sends pageHide if not already recorded
ok chrome@108 (windows 10) -> final harvest sends pageHide if not already recorded -> no events harvest yet
ok chrome@108 (windows 10) -> final harvest sends pageHide if not already recorded -> received first events harvest
ok chrome@108 (windows 10) -> final harvest sends pageHide if not already recorded -> there should be at least one timing metric
ok chrome@108 (windows 10) -> final harvest sends pageHide if not already recorded -> Final harvest should have a pageHide timing
ok chrome@108 (windows 10) -> final harvest sends pageHide if not already recorded -> pageHide should have a value
ok chrome@108 (windows 10) -> customTransactionName 2 arg -> Finished time XHR > 0 (2 arg)
# chrome@108 (windows 10) -> final harvest sends resources
ok chrome@108 (windows 10) -> final harvest sends resources -> resources harvest is sent on startup
ok chrome@108 (windows 10) -> reporting errors from event listener callbacks -> Stack trace has eventListenerUrl
# chrome@108 (windows 10) -> final harvest sends multiple
ok chrome@108 (windows 10) -> final harvest sends multiple -> resources harvest is sent on startup
ok chrome@108 (windows 10) -> final harvest sends multiple -> no errors harvest yet
ok chrome@108 (windows 10) -> final harvest sends multiple -> received second resources harvest
ok chrome@108 (windows 10) -> reporting errors from XHR callbacks -> has correct request_uri attribute
# chrome@108 (windows 10) -> when url is changed using pushState during load
# chrome@108 (windows 10) -> header
ok chrome@108 (windows 10) -> header -> should be truthy
# chrome@108 (windows 10) -> query param
ok chrome@108 (windows 10) -> reporting errors from setInterval callbacks -> has correct request_uri attribute
# chrome@108 (windows 10) -> when url is changed using replaceState during load
# chrome@108 (windows 10) -> header
ok chrome@108 (windows 10) -> header -> should be truthy
# chrome@108 (windows 10) -> query param
ok chrome@108 (windows 10) -> final harvest sends page action -> received one ins harvest
# chrome@108 (windows 10) -> browsers that do not decode the url when accessing window.location encode special characters in the referrer attribute
ok chrome@108 (windows 10) -> browsers that do not decode the url when accessing window.location encode special characters in the referrer attribute -> The query string should include the ref attribute.
ok chrome@108 (windows 10) -> final harvest sends js errors -> received one errors harvest
# chrome@108 (windows 10) -> cookie enabled by default: query string attributes
ok chrome@108 (windows 10) -> cookie enabled by default: query string attributes -> The cookie flag ('ck') should equal 0.
ok chrome@108 (windows 10) -> final harvest happens on page unload -- new unload BFC work -> received one err harvest
# chrome@108 (windows 10) -> cookie disabled: query string attributes
ok chrome@108 (windows 10) -> cookie disabled: query string attributes -> The cookie flag ('ck') should equal 0.
ok chrome@108 (windows 10) -> set custom attribute with pre-existing attributes before page load after loader before info precedence check (full) -> first error should have a custom parameter set with the expected value
# chrome@108 (windows 10) -> NR-40043: Multiple errors with noticeError and unique messages should not bucket when retrying due to 429
ok chrome@108 (windows 10) -> NR-40043: Multiple errors with noticeError and unique messages should not bucket when retrying due to 429 -> server responded with 429
ok chrome@108 (windows 10) -> NR-40043: Multiple errors with noticeError and unique messages should not bucket when retrying due to 429 -> server responded with 200
ok chrome@108 (windows 10) -> NR-40043: Multiple errors with noticeError and unique messages should not bucket when retrying due to 429 -> post body in retry harvest should be the same as in the first harvest
ok chrome@108 (windows 10) -> NEWRELIC-3788: Multiple identical errors from the same line but different columns should not be bucketed -> second error has stack trace
# chrome@108 (windows 10) -> referrer attribute is sent in the query string
ok chrome@108 (windows 10) -> reporting errors from setTimeout callbacks -> has correct request_uri attribute
# chrome@108 (windows 10) -> referrer sent in query does not include query parameters
ok chrome@108 (windows 10) -> set custom attribute with pre-existing attributes before page load after loader before info precedence check (spa) -> first error should have a custom parameter set with the expected value
# chrome@108 (windows 10) -> NEWRELIC-3788: Multiple identical errors from the same line but different columns should not be bucketed when retrying due to 429
ok chrome@108 (windows 10) -> NEWRELIC-3788: Multiple identical errors from the same line but different columns should not be bucketed when retrying due to 429 -> server responded with 429
ok chrome@108 (windows 10) -> NEWRELIC-3788: Multiple identical errors from the same line but different columns should not be bucketed when retrying due to 429 -> server responded with 200
ok chrome@108 (windows 10) -> NEWRELIC-3788: Multiple identical errors from the same line but different columns should not be bucketed when retrying due to 429 -> post body in retry harvest should be the same as in the first harvest
ok chrome@108 (windows 10) -> cookie enabled by default: query string attributes -> The session id ('s') should NOT be 0.
# chrome@108 (windows 10) -> rum data
ok chrome@108 (windows 10) -> rum data -> Application time
ok chrome@108 (windows 10) -> rum data -> Queue time
ok chrome@108 (windows 10) -> rum data -> Front end time
ok chrome@108 (windows 10) -> rum data -> Account name
ok chrome@108 (windows 10) -> rum data -> User name
ok chrome@108 (windows 10) -> rum data -> Product name
ok chrome@108 (windows 10) -> rum data -> TT GUID
ok chrome@108 (windows 10) -> rum data -> APP ID
ok chrome@108 (windows 10) -> rum data -> extra params
ok chrome@108 (windows 10) -> rum data -> userAttributes params
ok chrome@108 (windows 10) -> rum data -> atts params
ok chrome@108 (windows 10) -> rum data -> custom javascript attributes params
ok chrome@108 (windows 10) -> cookie disabled: query string attributes -> The session id attr 's' should be 0.
# chrome@108 (windows 10) -> rum data with multiple app IDs
ok chrome@108 (windows 10) -> final harvest sends timings data -> first node is a timing node
# chrome@108 (windows 10) -> PageAction submission on final harvest
ok chrome@108 (windows 10) -> PageAction submission on final harvest -> second PageAction POST has non-empty body
ok chrome@108 (windows 10) -> PageAction submission on final harvest -> final PageAction submission should be a POST
ok chrome@108 (windows 10) -> PageAction submission on final harvest -> query string does not include ins parameter
ok chrome@108 (windows 10) -> PageAction submission on final harvest -> POST body is not empty
ok chrome@108 (windows 10) -> PageAction submission on final harvest -> should have 1 event
ok chrome@108 (windows 10) -> PageAction submission on final harvest -> event has correct action name
ok chrome@108 (windows 10) -> PageAction submission on final harvest -> event has free tacos
ok chrome@108 (windows 10) -> PageAction submission on final harvest -> harvest time (2150) should always be bigger than event time (1533)
ok chrome@108 (windows 10) -> NR-40043: Multiple errors with noticeError and unique messages should not bucket when retrying due to 429 -> got two jserrors harvest requests
# chrome@108 (windows 10) -> rum data using loader_config data
ok chrome@108 (windows 10) -> rum data using loader_config data -> Application time
ok chrome@108 (windows 10) -> rum data using loader_config data -> Queue time
ok chrome@108 (windows 10) -> rum data using loader_config data -> Front end time
ok chrome@108 (windows 10) -> rum data using loader_config data -> Account name
ok chrome@108 (windows 10) -> rum data using loader_config data -> User name
ok chrome@108 (windows 10) -> rum data using loader_config data -> Product name
ok chrome@108 (windows 10) -> rum data using loader_config data -> TT GUID
ok chrome@108 (windows 10) -> rum data using loader_config data -> APP ID
ok chrome@108 (windows 10) -> rum data using loader_config data -> extra params
ok chrome@108 (windows 10) -> rum data using loader_config data -> userAttributes params
ok chrome@108 (windows 10) -> rum data using loader_config data -> atts params
ok chrome@108 (windows 10) -> rum data using loader_config data -> custom javascript attributes params
ok chrome@108 (windows 10) -> referrer sent in query does not include query parameters -> url in ref query param does not contain query parameters
# chrome@108 (windows 10) -> rum feature flags, full loader
ok chrome@108 (windows 10) -> referrer attribute is sent in the query string -> The query string should include the ref attribute.
# chrome@108 (windows 10) -> rum data with multiple app IDs using loader_config data
ok chrome@108 (windows 10) -> final harvest sends multiple -> received one errors harvest
# chrome@108 (windows 10) -> agent set nav cookie when page is unloading
ok chrome@108 (windows 10) -> agent set nav cookie when page is unloading -> no ins harvest yet
ok chrome@108 (windows 10) -> NEWRELIC-3788: Multiple identical errors from the same line but different columns should not be bucketed when retrying due to 429 -> got two jserrors harvest requests
# chrome@108 (windows 10) -> rum feature flags, rum loader
ok chrome@108 (windows 10) -> encoding error where message contains a circular reference -> has the expected message
# chrome@108 (windows 10) -> final harvest sends ajax events
# chrome@108 (windows 10) -> final harvest sends ajax events (retry 1)
ok chrome@108 (windows 10) -> final harvest sends ajax events (retry 1) -> there should be at least one ajax call
ok chrome@108 (windows 10) -> rum data -> DOM content loaded time of 35 is > 0
# chrome@108 (windows 10) -> RUM global count, full loader
ok chrome@108 (windows 10) -> rum data with multiple app IDs -> APP ID
# chrome@108 (windows 10) -> inline hit api
ok chrome@108 (windows 10) -> inline hit api -> inlineHit app id
ok chrome@108 (windows 10) -> inline hit api -> inlineHit request name
ok chrome@108 (windows 10) -> inline hit api -> inlineHit queue time
ok chrome@108 (windows 10) -> inline hit api -> inlineHit app time
ok chrome@108 (windows 10) -> inline hit api -> inlineHit backend time
ok chrome@108 (windows 10) -> inline hit api -> inlineHit DOM time
ok chrome@108 (windows 10) -> inline hit api -> inlineHit frontend time
ok chrome@108 (windows 10) -> inline hit api -> inlineHit cycle 1
ok chrome@108 (windows 10) -> inline hit api -> inlineHit cycle 2
ok chrome@108 (windows 10) -> inline hit api -> inlineHit app id
ok chrome@108 (windows 10) -> inline hit api -> inlineHit request name
ok chrome@108 (windows 10) -> inline hit api -> inlineHit queue time
ok chrome@108 (windows 10) -> inline hit api -> inlineHit app time
ok chrome@108 (windows 10) -> inline hit api -> inlineHit backend time
ok chrome@108 (windows 10) -> inline hit api -> inlineHit DOM time
ok chrome@108 (windows 10) -> inline hit api -> inlineHit frontend time
ok chrome@108 (windows 10) -> rum data using loader_config data -> DOM content loaded time of 39 is > 0
# chrome@108 (windows 10) -> RUM navTiming
ok chrome@108 (windows 10) -> noticeError accepts custom attributes in an argument (spa) -> should have second custom attribute
# chrome@108 (windows 10) -> jserrors are retried when collector returns 429
ok chrome@108 (windows 10) -> jserrors are retried when collector returns 429 -> server responded with 429
ok chrome@108 (windows 10) -> jserrors are retried when collector returns 429 -> server responded with 200
ok chrome@108 (windows 10) -> jserrors are retried when collector returns 429 -> post body in retry harvest should be the same as in the first harvest
ok chrome@108 (windows 10) -> browsers that do not decode the url when accessing window.location encode special characters in the referrer attribute -> The ref attribute should be the same as the assetURL
# chrome@108 (windows 10) -> RUM backend time
ok chrome@108 (windows 10) -> rum feature flags, full loader -> should be truthy
# chrome@108 (windows 10) -> RUM no body
ok chrome@108 (windows 10) -> RUM no body -> Reported without body element
ok chrome@108 (windows 10) -> reporting uncaught errors -> All expected error messages were found
# chrome@108 (windows 10) -> PageActions are retried when collector returns 429
ok chrome@108 (windows 10) -> PageActions are retried when collector returns 429 -> server responded with 429
ok chrome@108 (windows 10) -> PageActions are retried when collector returns 429 -> server responded with 200
ok chrome@108 (windows 10) -> PageActions are retried when collector returns 429 -> post body in retry harvest should be the same as in the first harvest
ok chrome@108 (windows 10) -> rum feature flags, rum loader -> should be equal
# chrome@108 (windows 10) -> RUM transactionName
ok chrome@108 (windows 10) -> RUM transactionName -> has correct obfuscated transactionName
ok chrome@108 (windows 10) -> agent set nav cookie when page is unloading -> received one ins harvest
# chrome@108 (windows 10) -> First contentful paint for supported browsers
ok chrome@108 (windows 10) -> final harvest sends ajax events (retry 1) -> first node is a ajax node
# chrome@108 (windows 10) -> RUM tNamePlain
ok chrome@108 (windows 10) -> RUM tNamePlain -> has correct tNamePlain
ok chrome@108 (windows 10) -> rum data with multiple app IDs using loader_config data -> APP ID
# chrome@108 (windows 10) -> First paint for supported browsers
ok chrome@108 (windows 10) -> RUM global count, full loader -> Added 4 globals
# chrome@108 (windows 10) -> RUM transactionName and tNamePlain
ok chrome@108 (windows 10) -> RUM transactionName and tNamePlain -> has correct obfuscated transactionName
ok chrome@108 (windows 10) -> query param -> ref param contains the redirected URL
# chrome@108 (windows 10) -> timings are retried when collector returns 429
ok chrome@108 (windows 10) -> timings are retried when collector returns 429 -> server responded with 429
ok chrome@108 (windows 10) -> timings are retried when collector returns 429 -> server responded with 200
ok chrome@108 (windows 10) -> jserrors are retried when collector returns 429 -> got two jserrors harvest requests
# chrome@108 (windows 10) -> captures value
ok chrome@108 (windows 10) -> captures value -> initial page load should be tracked with an interaction
ok chrome@108 (windows 10) -> captures value -> expect no child nodes
ok chrome@108 (windows 10) -> captures value -> The interaction does not include a route change.
ok chrome@108 (windows 10) -> captures value -> expected one child node
ok chrome@108 (windows 10) -> RUM navTiming -> navTiming
# chrome@108 (windows 10) -> captures innerText
ok chrome@108 (windows 10) -> captures innerText -> initial page load should be tracked with an interaction
ok chrome@108 (windows 10) -> captures innerText -> expect no child nodes
ok chrome@108 (windows 10) -> captures innerText -> The interaction does not include a route change.
ok chrome@108 (windows 10) -> captures innerText -> expected one child node
ok chrome@108 (windows 10) -> reporting uncaught errors from inline scripts -> stack trace should not include URL query string or fragment
# chrome@108 (windows 10) -> Agent detects a page built with ANGULAR and sends a supportability metric
ok chrome@108 (windows 10) -> Agent detects a page built with ANGULAR and sends a supportability metric -> SupportabilityMetrics objects were generated
ok chrome@108 (windows 10) -> NR-40043: Multiple errors with noticeError and unique messages should not bucket -> has correct request_uri attribute
# chrome@108 (windows 10) -> Agent detects a page built with REACT and sends a supportability metric
ok chrome@108 (windows 10) -> Agent detects a page built with REACT and sends a supportability metric -> SupportabilityMetrics objects were generated
ok chrome@108 (windows 10) -> ignoring errors works -> has correct request_uri attribute
# chrome@108 (windows 10) -> Agent detects a page built with NO FRAMEWORK and DOES NOT send a supportability metric
ok chrome@108 (windows 10) -> PageActions are retried when collector returns 429 -> got two ins harvest requests
# chrome@108 (windows 10) -> overwrite strict window.addEventListener does not break agent
ok chrome@108 (windows 10) -> RUM backend time -> Backend time of 174 > 0
# chrome@108 (windows 10) -> captures title
ok chrome@108 (windows 10) -> captures title -> initial page load should be tracked with an interaction
ok chrome@108 (windows 10) -> captures title -> expect no child nodes
ok chrome@108 (windows 10) -> captures title -> The interaction does not include a route change.
ok chrome@108 (windows 10) -> captures title -> expected one child node
ok chrome@108 (windows 10) -> First paint for supported browsers -> firstPaint has a positive value
# chrome@108 (windows 10) -> capturing SPA interactions
ok chrome@108 (windows 10) -> capturing SPA interactions -> should indicate that it supports spa
ok chrome@108 (windows 10) -> capturing SPA interactions -> initial page load should be tracked with an interaction
ok chrome@108 (windows 10) -> capturing SPA interactions -> expect no child nodes
ok chrome@108 (windows 10) -> capturing SPA interactions -> The interaction does not include a route change.
ok chrome@108 (windows 10) -> capturing SPA interactions -> interaction has id
ok chrome@108 (windows 10) -> capturing SPA interactions -> interaction id is in uuid format
ok chrome@108 (windows 10) -> capturing SPA interactions -> interaction has nodeId attribute
ok chrome@108 (windows 10) -> capturing SPA interactions -> interaction end time should be >= start
ok chrome@108 (windows 10) -> capturing SPA interactions -> interaaction callback end should be >= interaction start
ok chrome@108 (windows 10) -> capturing SPA interactions -> interaction callback end should be <= interaction end
ok chrome@108 (windows 10) -> capturing SPA interactions -> expected one child node
ok chrome@108 (windows 10) -> capturing SPA interactions -> node has nodeId attribute
ok chrome@108 (windows 10) -> capturing SPA interactions -> should be an ajax node
ok chrome@108 (windows 10) -> capturing SPA interactions -> should not have nested children
ok chrome@108 (windows 10) -> capturing SPA interactions -> should be a POST request
ok chrome@108 (windows 10) -> capturing SPA interactions -> should have a 200 status
ok chrome@108 (windows 10) -> capturing SPA interactions -> should have a correct hostname
ok chrome@108 (windows 10) -> capturing SPA interactions -> port should be in expected range
ok chrome@108 (windows 10) -> capturing SPA interactions -> should have correct requestBodySize
ok chrome@108 (windows 10) -> capturing SPA interactions -> should have correct responseBodySize
ok chrome@108 (windows 10) -> capturing SPA interactions -> should indicate it was requested with xhr
ok chrome@108 (windows 10) -> capturing SPA interactions -> estimated ixn start after test start
ok chrome@108 (windows 10) -> First contentful paint for supported browsers -> firstContentfulPaint has a positive value
# chrome@108 (windows 10) -> using SPA API with the lite loader
ok chrome@108 (windows 10) -> RUM no body -> Confirmed no body element
# chrome@108 (windows 10) -> does not capture body text
ok chrome@108 (windows 10) -> does not capture body text -> initial page load should be tracked with an interaction
ok chrome@108 (windows 10) -> does not capture body text -> expect no child nodes
ok chrome@108 (windows 10) -> does not capture body text -> The interaction does not include a route change.
ok chrome@108 (windows 10) -> RUM tNamePlain -> transactionName param excluded
# chrome@108 (windows 10) -> sends interaction id and nodeId
ok chrome@108 (windows 10) -> sends interaction id and nodeId -> interaction has id
ok chrome@108 (windows 10) -> sends interaction id and nodeId -> interaction has nodeId
ok chrome@108 (windows 10) -> sends interaction id and nodeId -> has nodeId attribute
ok chrome@108 (windows 10) -> RUM transactionName and tNamePlain -> tNamePlain excluded
# chrome@108 (windows 10) -> capturing SPA interactions using loader_config data
ok chrome@108 (windows 10) -> capturing SPA interactions using loader_config data -> should indicate that it supports spa
ok chrome@108 (windows 10) -> capturing SPA interactions using loader_config data -> initial page load should be tracked with an interaction
ok chrome@108 (windows 10) -> capturing SPA interactions using loader_config data -> expect no child nodes
ok chrome@108 (windows 10) -> capturing SPA interactions using loader_config data -> The interaction does not include a route change.
ok chrome@108 (windows 10) -> capturing SPA interactions using loader_config data -> interaction has id
ok chrome@108 (windows 10) -> capturing SPA interactions using loader_config data -> interaction id is in uuid format
ok chrome@108 (windows 10) -> capturing SPA interactions using loader_config data -> interaction has nodeId attribute
ok chrome@108 (windows 10) -> capturing SPA interactions using loader_config data -> interaction end time should be >= start
ok chrome@108 (windows 10) -> capturing SPA interactions using loader_config data -> interaaction callback end should be >= interaction start
ok chrome@108 (windows 10) -> capturing SPA interactions using loader_config data -> interaction callback end should be <= interaction end
ok chrome@108 (windows 10) -> capturing SPA interactions using loader_config data -> expected one child node
ok chrome@108 (windows 10) -> capturing SPA interactions using loader_config data -> node has nodeId attribute
ok chrome@108 (windows 10) -> capturing SPA interactions using loader_config data -> should be an ajax node
ok chrome@108 (windows 10) -> capturing SPA interactions using loader_config data -> should not have nested children
ok chrome@108 (windows 10) -> capturing SPA interactions using loader_config data -> should be a POST request
ok chrome@108 (windows 10) -> capturing SPA interactions using loader_config data -> should have a 200 status
ok chrome@108 (windows 10) -> capturing SPA interactions using loader_config data -> should have a correct hostname
ok chrome@108 (windows 10) -> capturing SPA interactions using loader_config data -> port should be in expected range
ok chrome@108 (windows 10) -> capturing SPA interactions using loader_config data -> should have correct requestBodySize
ok chrome@108 (windows 10) -> capturing SPA interactions using loader_config data -> should have correct responseBodySize
ok chrome@108 (windows 10) -> capturing SPA interactions using loader_config data -> should indicate it was requested with xhr
ok chrome@108 (windows 10) -> capturing SPA interactions using loader_config data -> estimated ixn start after test start
ok chrome@108 (windows 10) -> PageAction submission on final harvest -> estimated event time (215603679) < receipt time (215604296)
# chrome@108 (windows 10) -> rum with multiple load events
ok chrome@108 (windows 10) -> rum with multiple load events -> got first RUM submission
ok chrome@108 (windows 10) -> inline hit api -> inlineHit cycle 1
# chrome@108 (windows 10) -> RUM
ok chrome@108 (windows 10) -> captures innerText -> should be equivalent
# chrome@108 (windows 10) -> error in root node
ok chrome@108 (windows 10) -> error in root node -> should have 1 errors
ok chrome@108 (windows 10) -> error in root node -> interaction id should not be null
ok chrome@108 (windows 10) -> error in root node -> interaction should have nodeId attribute
ok chrome@108 (windows 10) -> error in root node -> should be equal
ok chrome@108 (windows 10) -> error in root node -> should have the correct interaction id
ok chrome@108 (windows 10) -> capturing SPA interactions using loader_config data -> estimated ixn start before receipt time
# chrome@108 (windows 10) -> fetch request using string URL with one parameter on same origin has AJAX request with DT payload
ok chrome@108 (windows 10) -> fetch request using string URL with one parameter on same origin has AJAX request with DT payload -> expected one child node
ok chrome@108 (windows 10) -> fetch request using string URL with one parameter on same origin has AJAX request with DT payload -> should be a non-empty guid string
ok chrome@108 (windows 10) -> fetch request using string URL with one parameter on same origin has AJAX request with DT payload -> should be a non-empty traceId string
ok chrome@108 (windows 10) -> captures value -> should be equivalent
# chrome@108 (windows 10) -> error on the initial page load
ok chrome@108 (windows 10) -> error on the initial page load -> should have 1 errors
ok chrome@108 (windows 10) -> error on the initial page load -> interaction id should not be null
ok chrome@108 (windows 10) -> error on the initial page load -> interaction should have nodeId attribute
ok chrome@108 (windows 10) -> error on the initial page load -> should have one child
ok chrome@108 (windows 10) -> error on the initial page load -> child is a custom tracer
ok chrome@108 (windows 10) -> error on the initial page load -> tracer should have a node id
ok chrome@108 (windows 10) -> error on the initial page load -> should be equal
ok chrome@108 (windows 10) -> error on the initial page load -> should have the correct interaction id
ok chrome@108 (windows 10) -> sends interaction id and nodeId -> should be an custom node
# chrome@108 (windows 10) -> fetch request using string URL with two parameters on same origin has AJAX request with DT payload
ok chrome@108 (windows 10) -> fetch request using string URL with two parameters on same origin has AJAX request with DT payload -> expected one child node
ok chrome@108 (windows 10) -> fetch request using string URL with two parameters on same origin has AJAX request with DT payload -> should be a non-empty guid string
ok chrome@108 (windows 10) -> fetch request using string URL with two parameters on same origin has AJAX request with DT payload -> should be a non-empty traceId string
ok chrome@108 (windows 10) -> rum with multiple load events -> did not get second RUM request
# chrome@108 (windows 10) -> fetch request using object URL on same origin has AJAX request with DT payload
ok chrome@108 (windows 10) -> fetch request using object URL on same origin has AJAX request with DT payload -> expected one child node
ok chrome@108 (windows 10) -> fetch request using object URL on same origin has AJAX request with DT payload -> should be a non-empty guid string
ok chrome@108 (windows 10) -> fetch request using object URL on same origin has AJAX request with DT payload -> should be a non-empty traceId string
ok chrome@108 (windows 10) -> final harvest sends resources -> received second resources harvest
# chrome@108 (windows 10) -> Calling a newrelic[api] fn creates a supportability metric
ok chrome@108 (windows 10) -> Calling a newrelic[api] fn creates a supportability metric -> SupportabilityMetrics object(s) were generated
ok chrome@108 (windows 10) -> Calling a newrelic[api] fn creates a supportability metric -> CustomMetrics object(s) were generated
ok chrome@108 (windows 10) -> Calling a newrelic[api] fn creates a supportability metric -> Generic/Version/1221.LOCAL/Detected count was incremented by 1
ok chrome@108 (windows 10) -> Calling a newrelic[api] fn creates a supportability metric -> Generic/Polyfill/Promise/undefined count was incremented by 1
ok chrome@108 (windows 10) -> Calling a newrelic[api] fn creates a supportability metric -> Generic/Polyfill/ArrayIncludes/undefined count was incremented by 1
ok chrome@108 (windows 10) -> Calling a newrelic[api] fn creates a supportability metric -> Generic/Polyfill/ObjectAssign/undefined count was incremented by 1
ok chrome@108 (windows 10) -> Calling a newrelic[api] fn creates a supportability metric -> Generic/Polyfill/ObjectEntries/undefined count was incremented by 1
ok chrome@108 (windows 10) -> Calling a newrelic[api] fn creates a supportability metric -> API/noticeError/called count was incremented by 1
ok chrome@108 (windows 10) -> Calling a newrelic[api] fn creates a supportability metric -> API/setPageViewName/called count was incremented by 1 until reached 5
ok chrome@108 (windows 10) -> Calling a newrelic[api] fn creates a supportability metric -> API/setCustomAttribute/called count was incremented by 1
ok chrome@108 (windows 10) -> Calling a newrelic[api] fn creates a supportability metric -> API/setErrorHandler/called count was incremented by 1
ok chrome@108 (windows 10) -> Calling a newrelic[api] fn creates a supportability metric -> API/finished/called count was incremented by 1
ok chrome@108 (windows 10) -> Calling a newrelic[api] fn creates a supportability metric -> API/addToTrace/called count was incremented by 1
ok chrome@108 (windows 10) -> Calling a newrelic[api] fn creates a supportability metric -> API/addRelease/called count was incremented by 1
ok chrome@108 (windows 10) -> Calling a newrelic[api] fn creates a supportability metric -> Saw all asyncApiFns
ok chrome@108 (windows 10) -> error in root node -> should not have parent id
# chrome@108 (windows 10) -> empty fetch does not break the agent
ok chrome@108 (windows 10) -> empty fetch does not break the agent -> should indicate that it supports spa
ok chrome@108 (windows 10) -> Agent detects a page built with ANGULAR and sends a supportability metric -> Supportability metric is Angular and is formatted correctly
# chrome@108 (windows 10) -> error in xhr
ok chrome@108 (windows 10) -> error in xhr -> should have 1 unique errors
ok chrome@108 (windows 10) -> error in xhr -> interaction id should not be null
ok chrome@108 (windows 10) -> error in xhr -> interaction should have nodeId attribute
ok chrome@108 (windows 10) -> error in xhr -> should be equal
ok chrome@108 (windows 10) -> error in xhr -> should have the correct interaction id
ok chrome@108 (windows 10) -> error in xhr -> has the correct parent node id
ok chrome@108 (windows 10) -> does not capture body text -> expected no child nodes
# chrome@108 (windows 10) -> DT payload is NOT added when the feature is not enabled (default)
ok chrome@108 (windows 10) -> DT payload is NOT added when the feature is not enabled (default) -> expected one child node
ok chrome@108 (windows 10) -> DT payload is NOT added when the feature is not enabled (default) -> should not have a guid
ok chrome@108 (windows 10) -> DT payload is NOT added when the feature is not enabled (default) -> should not have a traceId
ok chrome@108 (windows 10) -> Agent detects a page built with REACT and sends a supportability metric -> Supportability metric is React and is formatted correctly
# chrome@108 (windows 10) -> error in custom tracer
ok chrome@108 (windows 10) -> error in custom tracer -> should have 1 unique errors
ok chrome@108 (windows 10) -> error in custom tracer -> interaction id should not be null
ok chrome@108 (windows 10) -> error in custom tracer -> interaction should have nodeId attribute
ok chrome@108 (windows 10) -> error in custom tracer -> should be equal
ok chrome@108 (windows 10) -> error in custom tracer -> should have the correct interaction id
ok chrome@108 (windows 10) -> error in custom tracer -> has the correct node id
ok chrome@108 (windows 10) -> captures title -> should be equivalent
# chrome@108 (windows 10) -> errors outside of interaction
ok chrome@108 (windows 10) -> errors outside of interaction -> should be only one error
ok chrome@108 (windows 10) -> errors outside of interaction -> should be equal
ok chrome@108 (windows 10) -> errors outside of interaction -> should not have interaction id
ok chrome@108 (windows 10) -> Agent detects a page built with NO FRAMEWORK and DOES NOT send a supportability metric -> FRAMEWORK SupportabilityMetrics object(s) were NOT generated
# chrome@108 (windows 10) -> string error in custom tracer
ok chrome@108 (windows 10) -> string error in custom tracer -> should have 1 errors
ok chrome@108 (windows 10) -> string error in custom tracer -> interaction id should not be null
ok chrome@108 (windows 10) -> string error in custom tracer -> interaction should have nodeId attribute
ok chrome@108 (windows 10) -> string error in custom tracer -> should be equal
ok chrome@108 (windows 10) -> string error in custom tracer -> should have the correct interaction id
ok chrome@108 (windows 10) -> string error in custom tracer -> has the correct node id
ok chrome@108 (windows 10) -> RUM -> The agent was unconfigured, so no rum event fired!
# chrome@108 (windows 10) -> fetch request on different origin has no AJAX request with DT payload
ok chrome@108 (windows 10) -> fetch request on different origin has no AJAX request with DT payload -> expected one child node
ok chrome@108 (windows 10) -> fetch request on different origin has no AJAX request with DT payload -> should not have a guid
ok chrome@108 (windows 10) -> fetch request on different origin has no AJAX request with DT payload -> should not have a traceId
ok chrome@108 (windows 10) -> RUM transactionName -> tNamePlain excluded
# chrome@108 (windows 10) -> ajax in deny list is not harvested with interaction
# chrome@108 (windows 10) -> no deny list
ok chrome@108 (windows 10) -> no deny list -> type
ok chrome@108 (windows 10) -> no deny list -> type
ok chrome@108 (windows 10) -> no deny list -> path
ok chrome@108 (windows 10) -> no deny list -> type
ok chrome@108 (windows 10) -> no deny list -> path
ok chrome@108 (windows 10) -> no deny list -> there should be no children
# chrome@108 (windows 10) -> node at the end of tree branch
ok chrome@108 (windows 10) -> node at the end of tree branch -> type
ok chrome@108 (windows 10) -> node at the end of tree branch -> type
ok chrome@108 (windows 10) -> node at the end of tree branch -> path
ok chrome@108 (windows 10) -> node at the end of tree branch -> there should be no children
# chrome@108 (windows 10) -> node in the middle of tree branch
ok chrome@108 (windows 10) -> node in the middle of tree branch -> type
ok chrome@108 (windows 10) -> node in the middle of tree branch -> type
ok chrome@108 (windows 10) -> node in the middle of tree branch -> path
ok chrome@108 (windows 10) -> capturing SPA interactions -> estimated ixn start before receipt time
# chrome@108 (windows 10) -> same error in multiple interactions
ok chrome@108 (windows 10) -> same error in multiple interactions -> interaction 1 id should not be null
ok chrome@108 (windows 10) -> same error in multiple interactions -> interaction 2 id should not be null
ok chrome@108 (windows 10) -> same error in multiple interactions -> should have 2 unique errors
ok chrome@108 (windows 10) -> same error in multiple interactions -> should be equal
ok chrome@108 (windows 10) -> same error in multiple interactions -> should be equal
ok chrome@108 (windows 10) -> query param -> ref param contains the redirected URL
# chrome@108 (windows 10) -> Obfuscate All Events
ok chrome@108 (windows 10) -> Obfuscate All Events -> AJAX payload exists
ok chrome@108 (windows 10) -> Obfuscate All Events -> AJAX -- pii was obfuscated
ok chrome@108 (windows 10) -> Obfuscate All Events -> AJAX -- bam-test was obfuscated
ok chrome@108 (windows 10) -> Obfuscate All Events -> AJAX -- fakeid was obfuscated
ok chrome@108 (windows 10) -> Obfuscate All Events -> Errors payload exists
ok chrome@108 (windows 10) -> Obfuscate All Events -> Errors -- pii was obfuscated
ok chrome@108 (windows 10) -> Obfuscate All Events -> Errors -- bam-test was obfuscated
ok chrome@108 (windows 10) -> Obfuscate All Events -> Errors -- fakeid was obfuscated
ok chrome@108 (windows 10) -> Obfuscate All Events -> INS body payload exists
ok chrome@108 (windows 10) -> Obfuscate All Events -> INS body -- pii was obfuscated
ok chrome@108 (windows 10) -> Obfuscate All Events -> INS body -- bam-test was obfuscated
ok chrome@108 (windows 10) -> Obfuscate All Events -> INS body -- fakeid was obfuscated
ok chrome@108 (windows 10) -> Obfuscate All Events -> Resource payload exists
ok chrome@108 (windows 10) -> Obfuscate All Events -> Resource -- pii was obfuscated
ok chrome@108 (windows 10) -> Obfuscate All Events -> Resource -- bam-test was obfuscated
ok chrome@108 (windows 10) -> Obfuscate All Events -> Resource -- fakeid was obfuscated
ok chrome@108 (windows 10) -> Obfuscate All Events -> SPA payload exists
ok chrome@108 (windows 10) -> Obfuscate All Events -> SPA -- pii was obfuscated
ok chrome@108 (windows 10) -> Obfuscate All Events -> SPA -- bam-test was obfuscated
ok chrome@108 (windows 10) -> Obfuscate All Events -> SPA -- fakeid was obfuscated
ok chrome@108 (windows 10) -> Obfuscate All Events -> Timings payload exists
ok chrome@108 (windows 10) -> Obfuscate All Events -> Timings -- pii was obfuscated
ok chrome@108 (windows 10) -> Obfuscate All Events -> Timings -- bam-test was obfuscated
ok chrome@108 (windows 10) -> Obfuscate All Events -> Timings -- fakeid was obfuscated
ok chrome@108 (windows 10) -> Obfuscate All Events -> RUM payload exists
ok chrome@108 (windows 10) -> Obfuscate All Events -> RUM -- pii was obfuscated
ok chrome@108 (windows 10) -> Obfuscate All Events -> RUM -- bam-test was obfuscated
ok chrome@108 (windows 10) -> Obfuscate All Events -> RUM -- fakeid was obfuscated
ok chrome@108 (windows 10) -> Obfuscate All Events -> Errors query payload exists
ok chrome@108 (windows 10) -> Obfuscate All Events -> Errors query -- pii was obfuscated
ok chrome@108 (windows 10) -> Obfuscate All Events -> Errors query -- bam-test was obfuscated
ok chrome@108 (windows 10) -> Obfuscate All Events -> Errors query -- fakeid was obfuscated
ok chrome@108 (windows 10) -> Obfuscate All Events -> INS query payload exists
ok chrome@108 (windows 10) -> Obfuscate All Events -> INS query -- pii was obfuscated
ok chrome@108 (windows 10) -> Obfuscate All Events -> INS query -- bam-test was obfuscated
ok chrome@108 (windows 10) -> Obfuscate All Events -> INS query -- fakeid was obfuscated
ok chrome@108 (windows 10) -> Obfuscate All Events -> Resource query payload exists
ok chrome@108 (windows 10) -> Obfuscate All Events -> Resource query -- pii was obfuscated
ok chrome@108 (windows 10) -> Obfuscate All Events -> Resource query -- bam-test was obfuscated
ok chrome@108 (windows 10) -> Obfuscate All Events -> Resource query -- fakeid was obfuscated
ok chrome@108 (windows 10) -> Obfuscate All Events -> SPA query payload exists
ok chrome@108 (windows 10) -> Obfuscate All Events -> SPA query -- pii was obfuscated
ok chrome@108 (windows 10) -> Obfuscate All Events -> SPA query -- bam-test was obfuscated
ok chrome@108 (windows 10) -> Obfuscate All Events -> SPA query -- fakeid was obfuscated
ok chrome@108 (windows 10) -> Obfuscate All Events -> Timings query payload exists
ok chrome@108 (windows 10) -> Obfuscate All Events -> Timings query -- pii was obfuscated
ok chrome@108 (windows 10) -> Obfuscate All Events -> Timings query -- bam-test was obfuscated
ok chrome@108 (windows 10) -> overwrite strict window.addEventListener does not break agent -> Correctly added an event listener
# chrome@108 (windows 10) -> errors in discarded SPA interactions
ok chrome@108 (windows 10) -> errors in discarded SPA interactions -> should be only one error
ok chrome@108 (windows 10) -> errors in discarded SPA interactions -> should be equal
ok chrome@108 (windows 10) -> errors in discarded SPA interactions -> should not have interaction id
ok chrome@108 (windows 10) -> fetch request using string URL with one parameter on same origin has AJAX request with DT payload -> should be a non-zero timestamp
# chrome@108 (windows 10) -> capturing fetch in SPA interactions
ok chrome@108 (windows 10) -> capturing fetch in SPA interactions -> should indicate that it supports spa
ok chrome@108 (windows 10) -> capturing fetch in SPA interactions -> initial page load should be tracked with an interaction
ok chrome@108 (windows 10) -> capturing fetch in SPA interactions -> expect no child nodes
ok chrome@108 (windows 10) -> capturing fetch in SPA interactions -> The interaction does not include a route change.
ok chrome@108 (windows 10) -> capturing fetch in SPA interactions -> interaction has id attribute
ok chrome@108 (windows 10) -> capturing fetch in SPA interactions -> interaction has nodeId attribute
ok chrome@108 (windows 10) -> capturing fetch in SPA interactions -> interaction end time should be >= start
ok chrome@108 (windows 10) -> capturing fetch in SPA interactions -> interaaction callback end should be >= interaction start
ok chrome@108 (windows 10) -> capturing fetch in SPA interactions -> interaction callback end should be <= interaction end
ok chrome@108 (windows 10) -> capturing fetch in SPA interactions -> expected one child node
ok chrome@108 (windows 10) -> capturing fetch in SPA interactions -> has nodeId attribute
ok chrome@108 (windows 10) -> capturing fetch in SPA interactions -> should be an ajax node
ok chrome@108 (windows 10) -> capturing fetch in SPA interactions -> should not have nested children
ok chrome@108 (windows 10) -> capturing fetch in SPA interactions -> should be a POST request
ok chrome@108 (windows 10) -> capturing fetch in SPA interactions -> should have a 200 status
ok chrome@108 (windows 10) -> capturing fetch in SPA interactions -> should have a correct hostname
ok chrome@108 (windows 10) -> capturing fetch in SPA interactions -> port should be in expected range
ok chrome@108 (windows 10) -> capturing fetch in SPA interactions -> should have correct requestBodySize
ok chrome@108 (windows 10) -> capturing fetch in SPA interactions -> should have correct responseBodySize
ok chrome@108 (windows 10) -> capturing fetch in SPA interactions -> should indicate it was requested with fetch
ok chrome@108 (windows 10) -> capturing fetch in SPA interactions -> estimated ixn start after test start
ok chrome@108 (windows 10) -> string error in custom tracer -> error will be reported once
# chrome@108 (windows 10) -> JSONP on initial page load
ok chrome@108 (windows 10) -> JSONP on initial page load -> interaction end time should be >= start
ok chrome@108 (windows 10) -> JSONP on initial page load -> interaaction callback end should be >= interaction start
ok chrome@108 (windows 10) -> JSONP on initial page load -> interaction callback end should be <= interaction end
ok chrome@108 (windows 10) -> JSONP on initial page load -> expected one child node
ok chrome@108 (windows 10) -> JSONP on initial page load -> should be an ajax node
ok chrome@108 (windows 10) -> JSONP on initial page load -> should be a GET request
ok chrome@108 (windows 10) -> JSONP on initial page load -> should have a 200 status
ok chrome@108 (windows 10) -> JSONP on initial page load -> should have a correct hostname
ok chrome@108 (windows 10) -> JSONP on initial page load -> port should be in expected range
ok chrome@108 (windows 10) -> JSONP on initial page load -> should have correct requestBodySize
ok chrome@108 (windows 10) -> JSONP on initial page load -> should have correct responseBodySize
ok chrome@108 (windows 10) -> JSONP on initial page load -> should indicate it was requested with JSONP
# chrome@108 (windows 10) -> second: 1
ok chrome@108 (windows 10) -> second: 1 -> expected at least one child node
ok chrome@108 (windows 10) -> second: 1 -> xhr must have a child node of tracer
ok chrome@108 (windows 10) -> second: 1 -> tracer should be named tacoTimer
ok chrome@108 (windows 10) -> empty fetch does not break the agent -> events received
# chrome@108 (windows 10) -> sends SPA interactions even if endInteraction() is called before the window.load() event
ok chrome@108 (windows 10) -> sends SPA interactions even if endInteraction() is called before the window.load() event -> initial page load should be tracked with an interaction
ok chrome@108 (windows 10) -> sends SPA interactions even if endInteraction() is called before the window.load() event -> expect one child node
ok chrome@108 (windows 10) -> sends SPA interactions even if endInteraction() is called before the window.load() event -> expect one custom end node
ok chrome@108 (windows 10) -> sends SPA interactions even if endInteraction() is called before the window.load() event -> The interaction does not include a route change.
ok chrome@108 (windows 10) -> sends SPA interactions even if endInteraction() is called before the window.load() event -> interaction end time should be >= start
ok chrome@108 (windows 10) -> sends SPA interactions even if endInteraction() is called before the window.load() event -> interaaction callback end should be >= interaction start
ok chrome@108 (windows 10) -> sends SPA interactions even if endInteraction() is called before the window.load() event -> interaction callback end should be <= interaction end
ok chrome@108 (windows 10) -> using SPA API with the lite loader -> callbacks passed to SPA API functions fired
# chrome@108 (windows 10) -> does not send SPA interactions if flag is false
ok chrome@108 (windows 10) -> node in the middle of tree branch -> there should be no children
# chrome@108 (windows 10) -> JSONP with non-JSON response
ok chrome@108 (windows 10) -> JSONP with non-JSON response -> should have a 200 status
ok chrome@108 (windows 10) -> JSONP with non-JSON response -> should have correct requestBodySize
ok chrome@108 (windows 10) -> JSONP with non-JSON response -> should have correct responseBodySize
ok chrome@108 (windows 10) -> fetch request using object URL on same origin has AJAX request with DT payload -> should be a non-zero timestamp
# chrome@108 (windows 10) -> spa page urls include the hash fragment
ok chrome@108 (windows 10) -> fetch request on different origin has no AJAX request with DT payload -> should not have a timestamp
# chrome@108 (windows 10) -> two JSONP events
ok chrome@108 (windows 10) -> two JSONP events -> interaction end time should be >= start
ok chrome@108 (windows 10) -> two JSONP events -> interaaction callback end should be >= interaction start
ok chrome@108 (windows 10) -> two JSONP events -> interaction callback end should be <= interaction end
ok chrome@108 (windows 10) -> two JSONP events -> expected two child nodes
ok chrome@108 (windows 10) -> two JSONP events -> should be an ajax node
ok chrome@108 (windows 10) -> two JSONP events -> expected one child node
ok chrome@108 (windows 10) -> two JSONP events -> child must be a custom tracer
ok chrome@108 (windows 10) -> two JSONP events -> tracer should be named tacoTimer
ok chrome@108 (windows 10) -> two JSONP events -> should not have nested children
ok chrome@108 (windows 10) -> two JSONP events -> should be an ajax node
ok chrome@108 (windows 10) -> two JSONP events -> expected one child node
ok chrome@108 (windows 10) -> two JSONP events -> child must be a custom tracer
ok chrome@108 (windows 10) -> two JSONP events -> tracer should be named tacoTimer
ok chrome@108 (windows 10) -> same error in multiple interactions -> should be linked to two different browser interactions
# chrome@108 (windows 10) -> JSONP with error
ok chrome@108 (windows 10) -> JSONP with error -> xhr node should exist
ok chrome@108 (windows 10) -> JSONP with error -> should have a 0 status
ok chrome@108 (windows 10) -> JSONP with error -> should have correct requestBodySize
ok chrome@108 (windows 10) -> JSONP with error -> should have correct responseBodySize
ok chrome@108 (windows 10) -> error in custom tracer -> error should have been reported only once
# chrome@108 (windows 10) -> MooTools
ok chrome@108 (windows 10) -> MooTools -> interaction end time should be >= start
ok chrome@108 (windows 10) -> MooTools -> interaaction callback end should be >= interaction start
ok chrome@108 (windows 10) -> MooTools -> interaction callback end should be <= interaction end
ok chrome@108 (windows 10) -> MooTools -> expected one child node
ok chrome@108 (windows 10) -> MooTools -> should be an ajax node
ok chrome@108 (windows 10) -> MooTools -> should be a GET request
ok chrome@108 (windows 10) -> MooTools -> should have a 200 status
ok chrome@108 (windows 10) -> MooTools -> should have a correct hostname
ok chrome@108 (windows 10) -> MooTools -> port should be in expected range
ok chrome@108 (windows 10) -> MooTools -> should have correct requestBodySize
ok chrome@108 (windows 10) -> MooTools -> should have correct responseBodySize
ok chrome@108 (windows 10) -> MooTools -> should indicate it was requested with JSONP
ok chrome@108 (windows 10) -> MooTools -> expected one child node
ok chrome@108 (windows 10) -> MooTools -> child must be a custom tracer
ok chrome@108 (windows 10) -> MooTools -> tracer should be named tacoTimer
ok chrome@108 (windows 10) -> error on the initial page load -> should not have parent id
# chrome@108 (windows 10) -> response size
# chrome@108 (windows 10) -> with request that returns content-length header
ok chrome@108 (windows 10) -> with request that returns content-length header -> should have correct responseBodySize
# chrome@108 (windows 10) -> with request without content-length header
ok chrome@108 (windows 10) -> error in xhr -> error should have been reported only once
# chrome@108 (windows 10) -> basic
ok chrome@108 (windows 10) -> basic -> interaction end time should be >= start
ok chrome@108 (windows 10) -> basic -> interaaction callback end should be >= interaction start
ok chrome@108 (windows 10) -> basic -> interaction callback end should be <= interaction end
ok chrome@108 (windows 10) -> basic -> expected one child node
ok chrome@108 (windows 10) -> basic -> should be an ajax node
ok chrome@108 (windows 10) -> basic -> should be a GET request
ok chrome@108 (windows 10) -> basic -> should have a 200 status
ok chrome@108 (windows 10) -> basic -> should have a correct hostname
ok chrome@108 (windows 10) -> basic -> port should be in expected range
ok chrome@108 (windows 10) -> basic -> should have correct requestBodySize
ok chrome@108 (windows 10) -> basic -> should have correct responseBodySize
ok chrome@108 (windows 10) -> basic -> should indicate it was requested with JSONP
ok chrome@108 (windows 10) -> basic -> expected one child node
ok chrome@108 (windows 10) -> basic -> child must be a custom tracer
ok chrome@108 (windows 10) -> basic -> tracer should be named tacoTimer
ok chrome@108 (windows 10) -> DT payload is NOT added when the feature is not enabled (default) -> should not have a timestamp
# chrome@108 (windows 10) -> jQuery
ok chrome@108 (windows 10) -> jQuery -> interaction end time should be >= start
ok chrome@108 (windows 10) -> jQuery -> interaaction callback end should be >= interaction start
ok chrome@108 (windows 10) -> jQuery -> interaction callback end should be <= interaction end
ok chrome@108 (windows 10) -> jQuery -> expected one child node
ok chrome@108 (windows 10) -> jQuery -> should be an ajax node
ok chrome@108 (windows 10) -> jQuery -> should be a GET request
ok chrome@108 (windows 10) -> jQuery -> should have a 200 status
ok chrome@108 (windows 10) -> jQuery -> should have a correct hostname
ok chrome@108 (windows 10) -> jQuery -> port should be in expected range
ok chrome@108 (windows 10) -> jQuery -> should have correct requestBodySize
ok chrome@108 (windows 10) -> jQuery -> should have correct responseBodySize
ok chrome@108 (windows 10) -> jQuery -> should indicate it was requested with JSONP
ok chrome@108 (windows 10) -> jQuery -> expected one child node
ok chrome@108 (windows 10) -> jQuery -> child must be a custom tracer
ok chrome@108 (windows 10) -> jQuery -> tracer should be named tacoTimer
ok chrome@108 (windows 10) -> sends SPA interactions even if endInteraction() is called before the window.load() event -> expected one child node
# chrome@108 (windows 10) -> capturing SPA interactions
ok chrome@108 (windows 10) -> capturing SPA interactions -> initial page load should be tracked with an interaction
ok chrome@108 (windows 10) -> capturing SPA interactions -> expect 2 xhr children
ok chrome@108 (windows 10) -> capturing SPA interactions -> first child should be an ajax
ok chrome@108 (windows 10) -> capturing SPA interactions -> second child should be an ajax
ok chrome@108 (windows 10) -> Calling a newrelic[api] fn creates a supportability metric -> a `Finished` Custom Metric (cm) was also generated
# chrome@108 (windows 10) -> (anonymous)
ok chrome@108 (windows 10) -> (anonymous) -> initial page load should be tracked with an interaction
ok chrome@108 (windows 10) -> errors outside of interaction -> should not have parent node id
# chrome@108 (windows 10) -> Angular v1.x
ok chrome@108 (windows 10) -> Angular v1.x -> interaction end time should be >= start
ok chrome@108 (windows 10) -> Angular v1.x -> interaaction callback end should be >= interaction start
ok chrome@108 (windows 10) -> Angular v1.x -> interaction callback end should be <= interaction end
ok chrome@108 (windows 10) -> Angular v1.x -> expected one child node
ok chrome@108 (windows 10) -> Angular v1.x -> should be an ajax node
ok chrome@108 (windows 10) -> Angular v1.x -> should be a GET request
ok chrome@108 (windows 10) -> Angular v1.x -> should have a 200 status
ok chrome@108 (windows 10) -> Angular v1.x -> should have a correct hostname
ok chrome@108 (windows 10) -> Angular v1.x -> port should be in expected range
ok chrome@108 (windows 10) -> Angular v1.x -> should have correct requestBodySize
ok chrome@108 (windows 10) -> Angular v1.x -> should have correct responseBodySize
ok chrome@108 (windows 10) -> Angular v1.x -> should indicate it was requested with JSONP
ok chrome@108 (windows 10) -> Angular v1.x -> expected one child node
ok chrome@108 (windows 10) -> Angular v1.x -> child must be a custom tracer
ok chrome@108 (windows 10) -> Angular v1.x -> tracer should be named tacoTimer
ok chrome@108 (windows 10) -> JSONP with non-JSON response -> should indicate it was requested with JSONP
# chrome@108 (windows 10) -> First paint for supported browsers
ok chrome@108 (windows 10) -> spa page urls include the hash fragment -> the url should contain the hash fragment
# chrome@108 (windows 10) -> First contentful paint for supported browsers
ok chrome@108 (windows 10) -> capturing fetch in SPA interactions -> estimated ixn start before receipt time
# chrome@108 (windows 10) -> ajax call in loaded script extends interaction
ok chrome@108 (windows 10) -> ajax call in loaded script extends interaction -> should have one child for ajax
ok chrome@108 (windows 10) -> ajax call in loaded script extends interaction -> should be equal
ok chrome@108 (windows 10) -> ajax call in loaded script extends interaction -> start is present
ok chrome@108 (windows 10) -> ajax call in loaded script extends interaction -> end is present
ok chrome@108 (windows 10) -> does not send SPA interactions if flag is false -> should be truthy
# chrome@108 (windows 10) -> navTiming on initialPageLoad
ok chrome@108 (windows 10) -> navTiming on initialPageLoad -> initial page load should be tracked with an interaction
ok chrome@108 (windows 10) -> navTiming on initialPageLoad -> expect no child nodes
ok chrome@108 (windows 10) -> navTiming on initialPageLoad -> The interaction does not include a route change.
ok chrome@108 (windows 10) -> navTiming on initialPageLoad -> should be triggered by click
ok chrome@108 (windows 10) -> errors in discarded SPA interactions -> should not have parent node id
# chrome@108 (windows 10) -> interactions wait for external scripts to complete
ok chrome@108 (windows 10) -> interactions wait for external scripts to complete -> start is present
ok chrome@108 (windows 10) -> interactions wait for external scripts to complete -> end is present
ok chrome@108 (windows 10) -> two JSONP events -> should not have nested children
# chrome@108 (windows 10) -> route change interactions should not contain paint metrics values
ok chrome@108 (windows 10) -> route change interactions should not contain paint metrics values -> should be route change interaction
ok chrome@108 (windows 10) -> route change interactions should not contain paint metrics values -> firstPaint should not exist
ok chrome@108 (windows 10) -> jQuery -> should not have nested children
# chrome@108 (windows 10) -> onreadystatechange only called once with zone.js
ok chrome@108 (windows 10) -> onreadystatechange only called once with zone.js -> initial page load should be tracked with an interaction
ok chrome@108 (windows 10) -> onreadystatechange only called once with zone.js -> expect counts child from API
ok chrome@108 (windows 10) -> onreadystatechange only called once with zone.js -> The interaction does not include a route change.
ok chrome@108 (windows 10) -> onreadystatechange only called once with zone.js -> should be equal
ok chrome@108 (windows 10) -> onreadystatechange only called once with zone.js -> state 1 and 3 may be called more than once
ok chrome@108 (windows 10) -> onreadystatechange only called once with zone.js -> state 1 and 3 may be called more than once
ok chrome@108 (windows 10) -> onreadystatechange only called once with zone.js -> state 2 and 4 should be called exactly once
ok chrome@108 (windows 10) -> onreadystatechange only called once with zone.js -> state 1 and 3 may be called more than once
ok chrome@108 (windows 10) -> JSONP with error -> should indicate it was requested with JSONP
# chrome@108 (windows 10) -> incorrect timer
ok chrome@108 (windows 10) -> MooTools -> should not have nested children
# chrome@108 (windows 10) -> XHR request on same origin has AJAX request with DT payload
ok chrome@108 (windows 10) -> XHR request on same origin has AJAX request with DT payload -> expected one child node
ok chrome@108 (windows 10) -> XHR request on same origin has AJAX request with DT payload -> should be a non-empty guid string
ok chrome@108 (windows 10) -> XHR request on same origin has AJAX request with DT payload -> should be a non-empty traceId string
ok chrome@108 (windows 10) -> with request without content-length header -> should have correct responseBodySize
# chrome@108 (windows 10) -> XHR request on different origin has no AJAX request with DT payload
ok chrome@108 (windows 10) -> XHR request on different origin has no AJAX request with DT payload -> expected one child node
ok chrome@108 (windows 10) -> XHR request on different origin has no AJAX request with DT payload -> should not have a guid
ok chrome@108 (windows 10) -> XHR request on different origin has no AJAX request with DT payload -> should not have a traceId
ok chrome@108 (windows 10) -> second: 1 -> should not have nested children
# chrome@108 (windows 10) -> errored script
ok chrome@108 (windows 10) -> errored script -> start is present
ok chrome@108 (windows 10) -> errored script -> end is present
ok chrome@108 (windows 10) -> First paint for supported browsers -> firstPaint has positive value
# chrome@108 (windows 10) -> ensure scroll listener IS passive if supported
ok chrome@108 (windows 10) -> basic -> should not have nested children
# chrome@108 (windows 10) -> DT payload is NOT added when the feature is not enabled (default)
ok chrome@108 (windows 10) -> DT payload is NOT added when the feature is not enabled (default) -> expected one child node
ok chrome@108 (windows 10) -> DT payload is NOT added when the feature is not enabled (default) -> should not have a guid
ok chrome@108 (windows 10) -> DT payload is NOT added when the feature is not enabled (default) -> should not have a traceId
ok chrome@108 (windows 10) -> capturing SPA interactions -> The interaction does not include a route change.
# chrome@108 (windows 10) -> capturing SPA interactions with zone.js
ok chrome@108 (windows 10) -> capturing SPA interactions with zone.js -> initial page load should be tracked with an interaction
ok chrome@108 (windows 10) -> capturing SPA interactions with zone.js -> expect no child nodes
ok chrome@108 (windows 10) -> capturing SPA interactions with zone.js -> The interaction does not include a route change.
ok chrome@108 (windows 10) -> capturing SPA interactions with zone.js -> interaction end time should be >= start
ok chrome@108 (windows 10) -> capturing SPA interactions with zone.js -> expected one child node
ok chrome@108 (windows 10) -> capturing SPA interactions with zone.js -> estimated ixn start after test start
ok chrome@108 (windows 10) -> Obfuscate All Events -> Timings query -- fakeid was obfuscated
# chrome@108 (windows 10) -> JSONP timings
ok chrome@108 (windows 10) -> JSONP timings -> xhr node should exist
ok chrome@108 (windows 10) -> JSONP timings -> asyncTime is bigger than 1s
ok chrome@108 (windows 10) -> JSONP timings -> syncTime is bigger than 1s
ok chrome@108 (windows 10) -> JSONP timings -> total duration is bigger than async time
ok chrome@108 (windows 10) -> JSONP timings -> total duration is bigger than sync time
ok chrome@108 (windows 10) -> incorrect timer -> got route change harvest call
# chrome@108 (windows 10) -> posts session traces when xhr is monkey patched
ok chrome@108 (windows 10) -> posts session traces when xhr is monkey patched -> Got start time 1672804070280
ok chrome@108 (windows 10) -> XHR request on different origin has no AJAX request with DT payload -> should not have a timestamp
# chrome@108 (windows 10) -> Loading RequireJS does not cause errors.
ok chrome@108 (windows 10) -> JSONP timings -> end is bigger than start
# chrome@108 (windows 10) -> First interaction and first input delay for spa agent
ok chrome@108 (windows 10) -> First interaction and first input delay for spa agent -> firstInteraction is a positive value
ok chrome@108 (windows 10) -> First interaction and first input delay for spa agent -> firstInteraction should be a reasonable value
ok chrome@108 (windows 10) -> First interaction and first input delay for spa agent -> firstInteraction event type is a mouse event
ok chrome@108 (windows 10) -> First interaction and first input delay for spa agent -> firstInteraction attribute type is stringAttribute
ok chrome@108 (windows 10) -> First interaction and first input delay for spa agent -> firstInputDelay is a non-negative value
ok chrome@108 (windows 10) -> fetch request using string URL with two parameters on same origin has AJAX request with DT payload -> should be a non-zero timestamp
# chrome@108 (windows 10) -> events are retried when collector returns 429
ok chrome@108 (windows 10) -> events are retried when collector returns 429 -> server responded with 429
ok chrome@108 (windows 10) -> events are retried when collector returns 429 -> server responded with 200
ok chrome@108 (windows 10) -> events are retried when collector returns 429 -> post body in retry harvest should be the same as in the first harvest
ok chrome@108 (windows 10) -> posts session traces when xhr is monkey patched -> No ptid on first harvest
# chrome@108 (windows 10) -> First interaction and first input delay for rum agent
ok chrome@108 (windows 10) -> First interaction and first input delay for rum agent -> firstInteraction is a positive value
ok chrome@108 (windows 10) -> First interaction and first input delay for rum agent -> firstInteraction should be a reasonable value
ok chrome@108 (windows 10) -> First interaction and first input delay for rum agent -> firstInteraction event type is a mouse event
ok chrome@108 (windows 10) -> First interaction and first input delay for rum agent -> firstInteraction attribute type is stringAttribute
ok chrome@108 (windows 10) -> First interaction and first input delay for rum agent -> firstInputDelay is a non-negative value
ok chrome@108 (windows 10) -> (anonymous) -> should be truthy
# chrome@108 (windows 10) -> session trace resources
ok chrome@108 (windows 10) -> session trace resources -> server responded with 200
ok chrome@108 (windows 10) -> session trace resources -> got two harvest requests
ok chrome@108 (windows 10) -> session trace resources -> server responded with 200
ok chrome@108 (windows 10) -> Loading RequireJS does not cause errors. -> (unnamed assert)
# chrome@108 (windows 10) -> Largest Contentful Paint from first interaction event for spa agent
ok chrome@108 (windows 10) -> Largest Contentful Paint from first interaction event for spa agent -> there is a largestContentfulPaint timing
ok chrome@108 (windows 10) -> Largest Contentful Paint from first interaction event for spa agent -> largestContentfulPaint is a positive value
ok chrome@108 (windows 10) -> Largest Contentful Paint from first interaction event for spa agent -> element id is present and correct
ok chrome@108 (windows 10) -> Largest Contentful Paint from first interaction event for spa agent -> largestContentfulPaint attribute elementId is stringAttribute
ok chrome@108 (windows 10) -> Largest Contentful Paint from first interaction event for spa agent -> size is a non-negative value
ok chrome@108 (windows 10) -> Largest Contentful Paint from first interaction event for spa agent -> largestContentfulPaint attribute size is doubleAttribute
ok chrome@108 (windows 10) -> Largest Contentful Paint from first interaction event for spa agent -> element.tagName is present and correct
ok chrome@108 (windows 10) -> Largest Contentful Paint from first interaction event for spa agent -> largestContentfulPaint attribute elementTagName is stringAttribute
ok chrome@108 (windows 10) -> timings are retried when collector returns 429 -> post body in retry harvest should be the same as in the first harvest
# chrome@108 (windows 10) -> child nodes in SPA interaction does not exceed set limit
ok chrome@108 (windows 10) -> child nodes in SPA interaction does not exceed set limit -> should indicate that it supports spa
ok chrome@108 (windows 10) -> child nodes in SPA interaction does not exceed set limit -> initial page load should be tracked with an interaction
ok chrome@108 (windows 10) -> child nodes in SPA interaction does not exceed set limit -> expect no child nodes
ok chrome@108 (windows 10) -> child nodes in SPA interaction does not exceed set limit -> The interaction does not include a route change.
ok chrome@108 (windows 10) -> events are retried when collector returns 429 -> got two events harvest requests
# chrome@108 (windows 10) -> unload timing for spa agent
ok chrome@108 (windows 10) -> unload timing for spa agent -> there should be at least one timing metric
ok chrome@108 (windows 10) -> unload timing for spa agent -> there should be unload timing
ok chrome@108 (windows 10) -> unload timing for spa agent -> value should be a positive number
ok chrome@108 (windows 10) -> First interaction and first input delay for spa agent -> firstInputDelay attribute type is doubleAttribute
# chrome@108 (windows 10) -> Largest Contentful Paint from first interaction event for rum agent
ok chrome@108 (windows 10) -> Largest Contentful Paint from first interaction event for rum agent -> there is a largestContentfulPaint timing
ok chrome@108 (windows 10) -> Largest Contentful Paint from first interaction event for rum agent -> largestContentfulPaint is a positive value
ok chrome@108 (windows 10) -> Largest Contentful Paint from first interaction event for rum agent -> element id is present and correct
ok chrome@108 (windows 10) -> Largest Contentful Paint from first interaction event for rum agent -> largestContentfulPaint attribute elementId is stringAttribute
ok chrome@108 (windows 10) -> Largest Contentful Paint from first interaction event for rum agent -> size is a non-negative value
ok chrome@108 (windows 10) -> Largest Contentful Paint from first interaction event for rum agent -> largestContentfulPaint attribute size is doubleAttribute
ok chrome@108 (windows 10) -> Largest Contentful Paint from first interaction event for rum agent -> element.tagName is present and correct
ok chrome@108 (windows 10) -> Largest Contentful Paint from first interaction event for rum agent -> largestContentfulPaint attribute elementTagName is stringAttribute
ok chrome@108 (windows 10) -> session trace resources -> XMLHttpRequest nodes not captured when ajax instrumentation is disabled
# chrome@108 (windows 10) -> window load timing for spa agent
ok chrome@108 (windows 10) -> window load timing for spa agent -> there should be at least one timing metric
ok chrome@108 (windows 10) -> window load timing for spa agent -> there should be load timing
ok chrome@108 (windows 10) -> window load timing for spa agent -> value should be a positive number
ok chrome@108 (windows 10) -> onreadystatechange only called once with zone.js -> state 2 and 4 should be called exactly once
# chrome@108 (windows 10) -> session trace resources
ok chrome@108 (windows 10) -> session trace resources -> server responded with 200
ok chrome@108 (windows 10) -> session trace resources -> got two harvest requests
ok chrome@108 (windows 10) -> session trace resources -> server responded with 200
ok chrome@108 (windows 10) -> session trace resources -> there is at least one resource node
ok chrome@108 (windows 10) -> First interaction and first input delay for rum agent -> firstInputDelay attribute type is doubleAttribute
# chrome@108 (windows 10) -> unload timing for rum agent
ok chrome@108 (windows 10) -> unload timing for rum agent -> there should be at least one timing metric
ok chrome@108 (windows 10) -> unload timing for rum agent -> there should be unload timing
ok chrome@108 (windows 10) -> unload timing for rum agent -> value should be a positive number
ok chrome@108 (windows 10) -> Largest Contentful Paint from first interaction event for spa agent -> largestContentfulPaint has seven attributes
# chrome@108 (windows 10) -> window load timing for rum agent
ok chrome@108 (windows 10) -> window load timing for rum agent -> there should be at least one timing metric
ok chrome@108 (windows 10) -> window load timing for rum agent -> there should be load timing
ok chrome@108 (windows 10) -> window load timing for rum agent -> value should be a positive number
ok chrome@108 (windows 10) -> session trace resources -> expected resource was found
# chrome@108 (windows 10) -> spa agent collects cls attribute when cls is 0
ok chrome@108 (windows 10) -> spa agent collects cls attribute when cls is 0 -> there should be an unload timing
ok chrome@108 (windows 10) -> window load timing for spa agent -> value should not be larger than time to unload
# chrome@108 (windows 10) -> windowUnload for spa agent collects cls attribute
ok chrome@108 (windows 10) -> windowUnload for spa agent collects cls attribute -> cls is a non-negative value
ok chrome@108 (windows 10) -> unload timing for spa agent -> value should not be larger than time to unload
# chrome@108 (windows 10) -> page hide timing for rum agent
ok chrome@108 (windows 10) -> page hide timing for rum agent -> there should be at least one timing metric
ok chrome@108 (windows 10) -> page hide timing for rum agent -> there should be pageHide timing
ok chrome@108 (windows 10) -> page hide timing for rum agent -> value should be a positive number
ok chrome@108 (windows 10) -> XHR request on same origin has AJAX request with DT payload -> should be a non-zero timestamp
# chrome@108 (windows 10) -> jspdf generation should not cause error
ok chrome@108 (windows 10) -> Largest Contentful Paint from first interaction event for rum agent -> largestContentfulPaint has seven attributes
# chrome@108 (windows 10) -> LCP for spa agent collects cls attribute
ok chrome@108 (windows 10) -> LCP for spa agent collects cls attribute -> cls is a non-negative value
ok chrome@108 (windows 10) -> child nodes in SPA interaction does not exceed set limit -> interaction should have no more than 128 child nodes
# chrome@108 (windows 10) -> page hide timing for spa agent
ok chrome@108 (windows 10) -> page hide timing for spa agent -> there should be at least one timing metric
ok chrome@108 (windows 10) -> page hide timing for spa agent -> there should be pageHide timing
ok chrome@108 (windows 10) -> page hide timing for spa agent -> value should be a positive number
ok chrome@108 (windows 10) -> Angular v1.x -> should not have nested children
# chrome@108 (windows 10) -> errors get to session traces
ok chrome@108 (windows 10) -> errors get to session traces -> Has an error
ok chrome@108 (windows 10) -> errors get to session traces -> should be equal
ok chrome@108 (windows 10) -> unload timing for rum agent -> value should not be larger than time to unload
# chrome@108 (windows 10) -> First interaction spa agent collects cls attribute
ok chrome@108 (windows 10) -> First interaction spa agent collects cls attribute -> cls is a non-negative value
ok chrome@108 (windows 10) -> First contentful paint for supported browsers -> firstContentfulPaint has positive value
# chrome@108 (windows 10) -> captures callbacks even when window.Event overwritten
ok chrome@108 (windows 10) -> ajax call in loaded script extends interaction -> interaction end should be same or higher than the delayed ajax
# chrome@108 (windows 10) -> session traces are retried when collector returns 429 during first harvest
ok chrome@108 (windows 10) -> session traces are retried when collector returns 429 during first harvest -> server responded with 429
ok chrome@108 (windows 10) -> session traces are retried when collector returns 429 during first harvest -> second try has more nodes than first
ok chrome@108 (windows 10) -> session traces are retried when collector returns 429 during first harvest -> all nodes have been resent
ok chrome@108 (windows 10) -> session traces are retried when collector returns 429 during first harvest -> server responded with 200
ok chrome@108 (windows 10) -> errored script -> ajax in script should increase duration of the interaction
# chrome@108 (windows 10) -> First paint for spa agent
ok chrome@108 (windows 10) -> ensure scroll listener IS passive if supported -> should be truthy
# chrome@108 (windows 10) -> First contentful paint for spa agent
ok chrome@108 (windows 10) -> route change interactions should not contain paint metrics values -> firstContentfulPaint should not exist
# chrome@108 (windows 10) -> posts session traces
ok chrome@108 (windows 10) -> posts session traces -> Got start time 1672804069943
ok chrome@108 (windows 10) -> posts session traces -> No ptid on first harvest
ok chrome@108 (windows 10) -> posts session traces -> custom javascript attributes (on stn first post)
ok chrome@108 (windows 10) -> posts session traces -> ptid on second harvest 123-456
ok chrome@108 (windows 10) -> window load timing for rum agent -> value should not be larger than time to unload
# chrome@108 (windows 10) -> window load for spa agent collects cls attribute
ok chrome@108 (windows 10) -> window load for spa agent collects cls attribute -> cls is a non-negative value
ok chrome@108 (windows 10) -> DT payload is NOT added when the feature is not enabled (default) -> should not have a timestamp
# chrome@108 (windows 10) -> First paint for rum agent
ok chrome@108 (windows 10) -> page hide timing for spa agent -> value should not be larger than time since start of the test
# chrome@108 (windows 10) -> rum agent collects cls attribute when cls is 0
ok chrome@108 (windows 10) -> rum agent collects cls attribute when cls is 0 -> there should be an unload timing
ok chrome@108 (windows 10) -> capturing SPA interactions with zone.js -> estimated ixn start before receipt time
# chrome@108 (windows 10) -> First contentful paint for rum agent
ok chrome@108 (windows 10) -> LCP for spa agent collects cls attribute -> largestContentfulPaint attribute cls is doubleAttribute
# chrome@108 (windows 10) -> windowUnload for rum agent collects cls attribute
ok chrome@108 (windows 10) -> windowUnload for rum agent collects cls attribute -> cls is a non-negative value
ok chrome@108 (windows 10) -> final harvest doesnt append pageHide if already previously recorded -> value should not be larger than time since start of the test
# chrome@108 (windows 10) -> PageAction submission
ok chrome@108 (windows 10) -> PageAction submission -> first PageAction submission is a POST
ok chrome@108 (windows 10) -> PageAction submission -> query string does not include ins parameter
ok chrome@108 (windows 10) -> PageAction submission -> should have 1 event
ok chrome@108 (windows 10) -> PageAction submission -> event has correct action name
ok chrome@108 (windows 10) -> PageAction submission -> event has free tacos
ok chrome@108 (windows 10) -> PageAction submission -> harvest time (32294) should always be bigger than event time (3640)
ok chrome@108 (windows 10) -> final harvest sends pageHide if not already recorded -> pageHide value should be valid
# chrome@108 (windows 10) -> precedence
ok chrome@108 (windows 10) -> precedence -> should have 1 event
ok chrome@108 (windows 10) -> precedence -> event has correct action name
ok chrome@108 (windows 10) -> precedence -> defaults has correct precedence
ok chrome@108 (windows 10) -> precedence -> att has correct precedence
ok chrome@108 (windows 10) -> precedence -> attributes has correct precedence
ok chrome@108 (windows 10) -> jspdf generation should not cause error -> Did not generate "error" payload
# chrome@108 (windows 10) -> LCP for rum agent collects cls attribute
ok chrome@108 (windows 10) -> LCP for rum agent collects cls attribute -> cls is a non-negative value
ok chrome@108 (windows 10) -> First interaction spa agent collects cls attribute -> largestContentfulPaint attribute cls is doubleAttribute
# chrome@108 (windows 10) -> window load for rum agent collects cls attribute
ok chrome@108 (windows 10) -> window load for rum agent collects cls attribute -> cls is a non-negative value
ok chrome@108 (windows 10) -> spa agent collects cls attribute when cls is 0 -> cls value should be a perfect score of 0
# chrome@108 (windows 10) -> pageHide event for spa agent collects cls attribute
ok chrome@108 (windows 10) -> pageHide event for spa agent collects cls attribute -> cls is a non-negative value
ok chrome@108 (windows 10) -> errors get to session traces -> Has an Ajax
# chrome@108 (windows 10) -> First interaction rum agent collects cls attribute
ok chrome@108 (windows 10) -> First interaction rum agent collects cls attribute -> cls is a non-negative value
ok chrome@108 (windows 10) -> posts session traces -> no javascript attributes (on stn second post)
# chrome@108 (windows 10) -> window load timing for rum agent includes custom attributes
ok chrome@108 (windows 10) -> window load timing for rum agent includes custom attributes -> there should be at least one timing metric
ok chrome@108 (windows 10) -> window load timing for rum agent includes custom attributes -> there should be load timing
ok chrome@108 (windows 10) -> window load timing for rum agent includes custom attributes -> PageViewTiming custom attributes should not contain default attribute keys
ok chrome@108 (windows 10) -> window load timing for rum agent includes custom attributes -> PageViewTiming event should have a custom attribute
ok chrome@108 (windows 10) -> First contentful paint for spa agent -> firstContentfulPaint is a positive value
# chrome@108 (windows 10) -> window load timing for spa agent includes custom attributes
ok chrome@108 (windows 10) -> window load timing for spa agent includes custom attributes -> there should be at least one timing metric
ok chrome@108 (windows 10) -> window load timing for spa agent includes custom attributes -> there should be load timing
ok chrome@108 (windows 10) -> window load timing for spa agent includes custom attributes -> PageViewTiming custom attributes should not contain default attribute keys
ok chrome@108 (windows 10) -> window load timing for spa agent includes custom attributes -> PageViewTiming event should have a custom attribute
ok chrome@108 (windows 10) -> page hide timing for rum agent -> value should not be larger than time since start of the test
# chrome@108 (windows 10) -> cls only accumulates biggest session (long CLS session followed by short)
ok chrome@108 (windows 10) -> cls only accumulates biggest session (long CLS session followed by short) -> initial CLS is 0
ok chrome@108 (windows 10) -> cls only accumulates biggest session (long CLS session followed by short) -> cls is doubleAttribute
ok chrome@108 (windows 10) -> cls only accumulates biggest session (long CLS session followed by short) -> cls is a non-negative value
ok chrome@108 (windows 10) -> cls only accumulates biggest session (long CLS session followed by short) -> CLS is set to the largest CLS session
ok chrome@108 (windows 10) -> captures callbacks even when window.Event overwritten -> 36 timer nodes seen in session trace, want >= 31
# chrome@108 (windows 10) -> pageHide event for rum agent collects cls attribute
ok chrome@108 (windows 10) -> pageHide event for rum agent collects cls attribute -> cls is a non-negative value
ok chrome@108 (windows 10) -> First paint for spa agent -> firstPaint is a positive value
# chrome@108 (windows 10) -> cls only accumulates biggest session (long CLS session followed by short)
ok chrome@108 (windows 10) -> cls only accumulates biggest session (long CLS session followed by short) -> initial CLS is 0
ok chrome@108 (windows 10) -> cls only accumulates biggest session (long CLS session followed by short) -> cls is doubleAttribute
ok chrome@108 (windows 10) -> cls only accumulates biggest session (long CLS session followed by short) -> cls is a non-negative value
ok chrome@108 (windows 10) -> cls only accumulates biggest session (long CLS session followed by short) -> CLS is set to the largest CLS session
ok chrome@108 (windows 10) -> pageHide event for rum agent collects cls attribute -> cls is doubleAttribute
# chrome@108 (windows 10) -> classic - finished records a PageAction
ok chrome@108 (windows 10) -> classic - finished records a PageAction -> exactly 1 PageAction was submitted
ok chrome@108 (windows 10) -> PageAction submission -> estimated event time (215603197) < receipt time (215631851)
# chrome@108 (windows 10) -> Disabled timings feature
ok chrome@108 (windows 10) -> Disabled timings feature -> no events harvest yet
ok chrome@108 (windows 10) -> windowUnload for rum agent collects cls attribute -> largestContentfulPaint attribute cls is doubleAttribute
# chrome@108 (windows 10) -> Checking for PVT in STN payload for spa agent
ok chrome@108 (windows 10) -> Checking for PVT in STN payload for spa agent -> STN items were generated
ok chrome@108 (windows 10) -> precedence -> custom member of attributes passed through
# chrome@108 (windows 10) -> classic - disabled ajax events
ok chrome@108 (windows 10) -> LCP for rum agent collects cls attribute -> largestContentfulPaint attribute cls is doubleAttribute
# chrome@108 (windows 10) -> classic - capturing XHR and fetch ajax events
ok chrome@108 (windows 10) -> pageHide event for spa agent collects cls attribute -> cls is doubleAttribute
# chrome@108 (windows 10) -> classic - Distributed Tracing info is added to XHR & fetch ajax events
ok chrome@108 (windows 10) -> classic - Distributed Tracing info is added to XHR & fetch ajax events -> should be truthy
ok chrome@108 (windows 10) -> classic - Distributed Tracing info is added to XHR & fetch ajax events -> should be a non-empty guid string
ok chrome@108 (windows 10) -> classic - Distributed Tracing info is added to XHR & fetch ajax events -> should be a non-empty traceId string
ok chrome@108 (windows 10) -> classic - Distributed Tracing info is added to XHR & fetch ajax events -> should be a non-zero timestamp
ok chrome@108 (windows 10) -> classic - Distributed Tracing info is added to XHR & fetch ajax events -> should be a non-empty guid string
ok chrome@108 (windows 10) -> classic - Distributed Tracing info is added to XHR & fetch ajax events -> should be a non-empty traceId string
ok chrome@108 (windows 10) -> window load timing for rum agent includes custom attributes -> custom PageViewTiming attribute has the expected value
# chrome@108 (windows 10) -> module - capturing XHR and fetch ajax events
ok chrome@108 (windows 10) -> First interaction rum agent collects cls attribute -> largestContentfulPaint attribute cls is doubleAttribute
# chrome@108 (windows 10) -> module - disabled ajax events
ok chrome@108 (windows 10) -> Checking for PVT in STN payload for spa agent -> Expected PVT Items are present in STN payload
# chrome@108 (windows 10) -> classic - referrer attr is sent in the query string & does not include query params
ok chrome@108 (windows 10) -> classic - referrer attr is sent in the query string & does not include query params -> The query string should include the ref attribute.
ok chrome@108 (windows 10) -> windowUnload for spa agent collects cls attribute -> largestContentfulPaint attribute cls is doubleAttribute
# chrome@108 (windows 10) -> cls only accumulates biggest session (short CLS session followed by long)
ok chrome@108 (windows 10) -> cls only accumulates biggest session (short CLS session followed by long) -> cls is a non-negative value
ok chrome@108 (windows 10) -> cls only accumulates biggest session (short CLS session followed by long) -> CLS is set to the largest CLS session
ok chrome@108 (windows 10) -> cls only accumulates biggest session (long CLS session followed by short) -> cls is doubleAttribute
# chrome@108 (windows 10) -> module - Distributed Tracing info is added to XHR & fetch ajax events
ok chrome@108 (windows 10) -> module - Distributed Tracing info is added to XHR & fetch ajax events -> should be truthy
ok chrome@108 (windows 10) -> module - Distributed Tracing info is added to XHR & fetch ajax events -> should be a non-empty guid string
ok chrome@108 (windows 10) -> module - Distributed Tracing info is added to XHR & fetch ajax events -> should be a non-empty traceId string
ok chrome@108 (windows 10) -> module - Distributed Tracing info is added to XHR & fetch ajax events -> should be a non-zero timestamp
ok chrome@108 (windows 10) -> module - Distributed Tracing info is added to XHR & fetch ajax events -> should be a non-empty guid string
ok chrome@108 (windows 10) -> module - Distributed Tracing info is added to XHR & fetch ajax events -> should be a non-empty traceId string
ok chrome@108 (windows 10) -> session traces are retried when collector returns 429 during first harvest -> got two harvest requests
# chrome@108 (windows 10) -> cls only accumulates biggest session (short CLS session followed by long)
ok chrome@108 (windows 10) -> cls only accumulates biggest session (short CLS session followed by long) -> cls is a non-negative value
ok chrome@108 (windows 10) -> cls only accumulates biggest session (short CLS session followed by long) -> CLS is set to the largest CLS session
ok chrome@108 (windows 10) -> navTiming on initialPageLoad -> should not have navTiming
# chrome@108 (windows 10) -> retried first harvest captures ptid
ok chrome@108 (windows 10) -> retried first harvest captures ptid -> server responded with 429
ok chrome@108 (windows 10) -> retried first harvest captures ptid -> server responded with 200
ok chrome@108 (windows 10) -> retried first harvest captures ptid -> server responded with 200
ok chrome@108 (windows 10) -> cls only accumulates biggest session (long CLS session followed by short) -> cls is doubleAttribute
# chrome@108 (windows 10) -> classic - release api adds tags to jserrors (with tags limit)
ok chrome@108 (windows 10) -> classic - disabled ajax events -> AJAX Promise did not execute because enabled was false
# chrome@108 (windows 10) -> classic - session tracking (enabled by default) is in query string attributes and is 0
ok chrome@108 (windows 10) -> classic - session tracking (enabled by default) is in query string attributes and is 0 -> The cookie flag ('ck') should equal 0.
ok chrome@108 (windows 10) -> interactions wait for external scripts to complete -> external script should not increase duration of the interaction
# chrome@108 (windows 10) -> session traces are retried when collector returns 429 during scheduled harvest
ok chrome@108 (windows 10) -> session traces are retried when collector returns 429 during scheduled harvest -> server responded with 200
ok chrome@108 (windows 10) -> session traces are retried when collector returns 429 during scheduled harvest -> server responded with 429
ok chrome@108 (windows 10) -> session traces are retried when collector returns 429 during scheduled harvest -> second try has more nodes than first
ok chrome@108 (windows 10) -> session traces are retried when collector returns 429 during scheduled harvest -> all nodes have been resent
ok chrome@108 (windows 10) -> session traces are retried when collector returns 429 during scheduled harvest -> nodes from first successful harvest are not resent in second harvest
ok chrome@108 (windows 10) -> session traces are retried when collector returns 429 during scheduled harvest -> nodes from first successful harvest are not resent in third harvest
ok chrome@108 (windows 10) -> session traces are retried when collector returns 429 during scheduled harvest -> server responded with 200
ok chrome@108 (windows 10) -> classic - capturing XHR and fetch ajax events -> should be truthy
# chrome@108 (windows 10) -> classic - Obfuscate All Events
ok chrome@108 (windows 10) -> classic - Obfuscate All Events -> AJAX payload exists
ok chrome@108 (windows 10) -> classic - Obfuscate All Events -> AJAX -- pii was obfuscated
ok chrome@108 (windows 10) -> classic - Obfuscate All Events -> AJAX -- bam-test was obfuscated
ok chrome@108 (windows 10) -> classic - Obfuscate All Events -> AJAX -- fakeid was obfuscated
ok chrome@108 (windows 10) -> classic - Obfuscate All Events -> Errors payload exists
ok chrome@108 (windows 10) -> classic - Obfuscate All Events -> Errors -- pii was obfuscated
ok chrome@108 (windows 10) -> classic - Obfuscate All Events -> Errors -- bam-test was obfuscated
ok chrome@108 (windows 10) -> classic - Obfuscate All Events -> Errors -- fakeid was obfuscated
ok chrome@108 (windows 10) -> classic - Obfuscate All Events -> INS body payload exists
ok chrome@108 (windows 10) -> classic - Obfuscate All Events -> INS body -- pii was obfuscated
ok chrome@108 (windows 10) -> classic - Obfuscate All Events -> INS body -- bam-test was obfuscated
ok chrome@108 (windows 10) -> classic - Obfuscate All Events -> INS body -- fakeid was obfuscated
ok chrome@108 (windows 10) -> classic - Obfuscate All Events -> Errors query payload exists
ok chrome@108 (windows 10) -> classic - Obfuscate All Events -> Errors query -- pii was obfuscated
ok chrome@108 (windows 10) -> classic - Obfuscate All Events -> Errors query -- bam-test was obfuscated
ok chrome@108 (windows 10) -> classic - Obfuscate All Events -> Errors query -- fakeid was obfuscated
ok chrome@108 (windows 10) -> classic - Obfuscate All Events -> INS query payload exists
ok chrome@108 (windows 10) -> classic - Obfuscate All Events -> INS query -- pii was obfuscated
ok chrome@108 (windows 10) -> classic - Obfuscate All Events -> INS query -- bam-test was obfuscated
ok chrome@108 (windows 10) -> classic - finished records a PageAction -> PageAction has actionName = finished
# chrome@108 (windows 10) -> classic - release api limits the length of tags
ok chrome@108 (windows 10) -> classic - release api limits the length of tags -> twoHundredCharacterString should be 200 characters but is 200
ok chrome@108 (windows 10) -> Disabled timings feature -> no events harvest
# chrome@108 (windows 10) -> classic - no query param when release is not set
ok chrome@108 (windows 10) -> classic - Distributed Tracing info is added to XHR & fetch ajax events -> should be a non-zero timestamp
# chrome@108 (windows 10) -> module - finished records a PageAction
ok chrome@108 (windows 10) -> module - finished records a PageAction -> exactly 1 PageAction was submitted
ok chrome@108 (windows 10) -> cls only accumulates biggest session (short CLS session followed by long) -> cls is doubleAttribute
# chrome@108 (windows 10) -> module - referrer attr is sent in the query string & does not include query params
ok chrome@108 (windows 10) -> module - referrer attr is sent in the query string & does not include query params -> The query string should include the ref attribute.
ok chrome@108 (windows 10) -> module - Distributed Tracing info is added to XHR & fetch ajax events -> should be a non-zero timestamp
# chrome@108 (windows 10) -> module - session tracking (enabled by default) is in query string attributes and is 0
ok chrome@108 (windows 10) -> module - session tracking (enabled by default) is in query string attributes and is 0 -> The cookie flag ('ck') should equal 0.
ok chrome@108 (windows 10) -> window load for spa agent collects cls attribute -> cls is doubleAttribute
# chrome@108 (windows 10) -> rum loader: LCP is not collected after pageHide
ok chrome@108 (windows 10) -> rum loader: LCP is not collected after pageHide -> found an LCP timing
ok chrome@108 (windows 10) -> rum loader: LCP is not collected after pageHide -> LCP has attributes
ok chrome@108 (windows 10) -> cls only accumulates biggest session (short CLS session followed by long) -> cls is doubleAttribute
# chrome@108 (windows 10) -> module - Obfuscate All Events
ok chrome@108 (windows 10) -> module - Obfuscate All Events -> AJAX payload exists
ok chrome@108 (windows 10) -> module - Obfuscate All Events -> AJAX -- pii was obfuscated
ok chrome@108 (windows 10) -> module - Obfuscate All Events -> AJAX -- bam-test was obfuscated
ok chrome@108 (windows 10) -> module - Obfuscate All Events -> AJAX -- fakeid was obfuscated
ok chrome@108 (windows 10) -> module - Obfuscate All Events -> Errors payload exists
ok chrome@108 (windows 10) -> module - Obfuscate All Events -> Errors -- pii was obfuscated
ok chrome@108 (windows 10) -> module - Obfuscate All Events -> Errors -- bam-test was obfuscated
ok chrome@108 (windows 10) -> module - Obfuscate All Events -> Errors -- fakeid was obfuscated
ok chrome@108 (windows 10) -> module - Obfuscate All Events -> INS body payload exists
ok chrome@108 (windows 10) -> module - Obfuscate All Events -> INS body -- pii was obfuscated
ok chrome@108 (windows 10) -> module - Obfuscate All Events -> INS body -- bam-test was obfuscated
ok chrome@108 (windows 10) -> module - Obfuscate All Events -> INS body -- fakeid was obfuscated
ok chrome@108 (windows 10) -> module - Obfuscate All Events -> Errors query payload exists
ok chrome@108 (windows 10) -> module - Obfuscate All Events -> Errors query -- pii was obfuscated
ok chrome@108 (windows 10) -> module - Obfuscate All Events -> Errors query -- bam-test was obfuscated
ok chrome@108 (windows 10) -> module - Obfuscate All Events -> Errors query -- fakeid was obfuscated
ok chrome@108 (windows 10) -> module - Obfuscate All Events -> INS query payload exists
ok chrome@108 (windows 10) -> module - Obfuscate All Events -> INS query -- pii was obfuscated
ok chrome@108 (windows 10) -> module - Obfuscate All Events -> INS query -- bam-test was obfuscated
ok chrome@108 (windows 10) -> First paint for rum agent -> firstPaint is a positive value
# chrome@108 (windows 10) -> rum loader: LCP is not collected on hidden page
ok chrome@108 (windows 10) -> rum agent collects cls attribute when cls is 0 -> cls value should be a perfect score of 0
# chrome@108 (windows 10) -> spa loader: LCP is not collected after pageHide
ok chrome@108 (windows 10) -> spa loader: LCP is not collected after pageHide -> found an LCP timing
ok chrome@108 (windows 10) -> spa loader: LCP is not collected after pageHide -> LCP has attributes
ok chrome@108 (windows 10) -> First contentful paint for rum agent -> firstContentfulPaint is a positive value
# chrome@108 (windows 10) -> spa loader: LCP is not collected on hidden page
ok chrome@108 (windows 10) -> window load for rum agent collects cls attribute -> cls is doubleAttribute
# chrome@108 (windows 10) -> classic - capturing large payload of XHR ajax events
# chrome@108 (windows 10) -> classic - capturing large payload of XHR ajax events (retry 1)
ok chrome@108 (windows 10) -> module - capturing XHR and fetch ajax events -> should be truthy
# chrome@108 (windows 10) -> module - release api adds tags to jserrors (with tags limit)
ok chrome@108 (windows 10) -> module - disabled ajax events -> AJAX Promise did not execute because enabled was false
# chrome@108 (windows 10) -> module - release api limits the length of tags
ok chrome@108 (windows 10) -> module - release api limits the length of tags -> twoHundredCharacterString should be 200 characters but is 200
ok chrome@108 (windows 10) -> classic - referrer attr is sent in the query string & does not include query params -> url in ref query param does not contain query parameters
# chrome@108 (windows 10) -> module - no query param when release is not set
ok chrome@108 (windows 10) -> classic - release api adds tags to jserrors (with tags limit) -> {"num1":"1","num2":"2","num3":"3","num4":"4","num5":"5","num6":"6","num7":"7","num8":"8","num9":"9","num10":"10"} is expected but got {"num1":"1","num2":"2","num3":"3","num4":"4","num5":"5","num6":"6","num7":"7","num8":"8","num9":"9","num10":"10"}
# chrome@108 (windows 10) -> classic - a thrown error generates and sends an error object
ok chrome@108 (windows 10) -> classic - a thrown error generates and sends an error object -> Should have 1 error obj
ok chrome@108 (windows 10) -> classic - a thrown error generates and sends an error object -> Should have seen 1 error
ok chrome@108 (windows 10) -> classic - a thrown error generates and sends an error object -> Should have a valid timestamp
ok chrome@108 (windows 10) -> classic - a thrown error generates and sends an error object -> Should be Error class
ok chrome@108 (windows 10) -> classic - a thrown error generates and sends an error object -> Should have message
ok chrome@108 (windows 10) -> classic - a thrown error generates and sends an error object -> Should have a stack trace
ok chrome@108 (windows 10) -> classic - session tracking (enabled by default) is in query string attributes and is 0 -> The session id attr 's' should be 0.
# chrome@108 (windows 10) -> classic - unhandledPromise generates and sends an error object
ok chrome@108 (windows 10) -> classic - unhandledPromise generates and sends an error object -> Should have 1 error obj
ok chrome@108 (windows 10) -> classic - unhandledPromise generates and sends an error object -> Should have seen 1 error
ok chrome@108 (windows 10) -> classic - unhandledPromise generates and sends an error object -> Should have a valid timestamp
ok chrome@108 (windows 10) -> classic - unhandledPromise generates and sends an error object -> Should be Error class
ok chrome@108 (windows 10) -> classic - unhandledPromise generates and sends an error object -> Should have message
ok chrome@108 (windows 10) -> classic - unhandledPromise generates and sends an error object -> Should have a stack trace
ok chrome@108 (windows 10) -> session traces are retried when collector returns 429 during scheduled harvest -> got three harvest requests
# chrome@108 (windows 10) -> classic - RangeError generates and sends an error object
ok chrome@108 (windows 10) -> classic - RangeError generates and sends an error object -> Should have 1 error obj
ok chrome@108 (windows 10) -> classic - RangeError generates and sends an error object -> Should have seen 1 error
ok chrome@108 (windows 10) -> classic - RangeError generates and sends an error object -> Should have a valid timestamp
ok chrome@108 (windows 10) -> classic - RangeError generates and sends an error object -> Should be RangeError class
ok chrome@108 (windows 10) -> classic - RangeError generates and sends an error object -> Should have message
ok chrome@108 (windows 10) -> classic - RangeError generates and sends an error object -> Should have a stack trace
ok chrome@108 (windows 10) -> classic - Obfuscate All Events -> INS query -- fakeid was obfuscated
# chrome@108 (windows 10) -> classic - SyntaxError generates and sends an error object
ok chrome@108 (windows 10) -> classic - SyntaxError generates and sends an error object -> Should have 1 error obj
ok chrome@108 (windows 10) -> classic - SyntaxError generates and sends an error object -> Should have seen 1 error
ok chrome@108 (windows 10) -> classic - SyntaxError generates and sends an error object -> Should have a valid timestamp
ok chrome@108 (windows 10) -> classic - SyntaxError generates and sends an error object -> Should be SyntaxError class
ok chrome@108 (windows 10) -> classic - SyntaxError generates and sends an error object -> Should have message
ok chrome@108 (windows 10) -> classic - SyntaxError generates and sends an error object -> Should have a stack trace
ok chrome@108 (windows 10) -> classic - no query param when release is not set -> should not have ri query param
# chrome@108 (windows 10) -> classic - URIError generates and sends an error object
ok chrome@108 (windows 10) -> classic - URIError generates and sends an error object -> Should have 1 error obj
ok chrome@108 (windows 10) -> classic - URIError generates and sends an error object -> Should have seen 1 error
ok chrome@108 (windows 10) -> classic - URIError generates and sends an error object -> Should have a valid timestamp
ok chrome@108 (windows 10) -> classic - URIError generates and sends an error object -> Should be URIError class
ok chrome@108 (windows 10) -> classic - URIError generates and sends an error object -> Should have message
ok chrome@108 (windows 10) -> classic - URIError generates and sends an error object -> Should have a stack trace
ok chrome@108 (windows 10) -> classic - release api limits the length of tags -> {"one":"201","three":"yyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxq","yyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxq":"2"} is expected but got {"one":"201","yyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxq":"2","three":"yyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxq"}
# chrome@108 (windows 10) -> classic - TypeError generates and sends an error object
ok chrome@108 (windows 10) -> classic - TypeError generates and sends an error object -> Should have 1 error obj
ok chrome@108 (windows 10) -> classic - TypeError generates and sends an error object -> Should have seen 1 error
ok chrome@108 (windows 10) -> classic - TypeError generates and sends an error object -> Should have a valid timestamp
ok chrome@108 (windows 10) -> classic - TypeError generates and sends an error object -> Should be TypeError class
ok chrome@108 (windows 10) -> classic - TypeError generates and sends an error object -> Should have message
ok chrome@108 (windows 10) -> classic - TypeError generates and sends an error object -> Should have a stack trace
ok chrome@108 (windows 10) -> module - finished records a PageAction -> PageAction has actionName = finished
# chrome@108 (windows 10) -> classic - max call stack size generates and sends an error object
ok chrome@108 (windows 10) -> retried first harvest captures ptid -> ptid was included
# chrome@108 (windows 10) -> classic - a reference error generates and sends an error object
ok chrome@108 (windows 10) -> classic - a reference error generates and sends an error object -> Should have 1 error obj
ok chrome@108 (windows 10) -> classic - a reference error generates and sends an error object -> Should have seen 1 error
ok chrome@108 (windows 10) -> classic - a reference error generates and sends an error object -> Should have a valid timestamp
ok chrome@108 (windows 10) -> classic - a reference error generates and sends an error object -> Should be ReferenceError class
ok chrome@108 (windows 10) -> classic - a reference error generates and sends an error object -> Should have message
ok chrome@108 (windows 10) -> classic - a reference error generates and sends an error object -> Should have a stack trace
ok chrome@108 (windows 10) -> module - referrer attr is sent in the query string & does not include query params -> url in ref query param does not contain query parameters
# chrome@108 (windows 10) -> module - a reference error generates and sends an error object
ok chrome@108 (windows 10) -> module - a reference error generates and sends an error object -> Should have 1 error obj
ok chrome@108 (windows 10) -> module - a reference error generates and sends an error object -> Should have seen 1 error
ok chrome@108 (windows 10) -> module - a reference error generates and sends an error object -> Should have a valid timestamp
ok chrome@108 (windows 10) -> module - a reference error generates and sends an error object -> Should be ReferenceError class
ok chrome@108 (windows 10) -> module - a reference error generates and sends an error object -> Should have message
ok chrome@108 (windows 10) -> module - a reference error generates and sends an error object -> Should have a stack trace
ok chrome@108 (windows 10) -> module - session tracking (enabled by default) is in query string attributes and is 0 -> The session id attr 's' should be 0.
# chrome@108 (windows 10) -> module - a thrown error generates and sends an error object
ok chrome@108 (windows 10) -> module - a thrown error generates and sends an error object -> Should have 1 error obj
ok chrome@108 (windows 10) -> module - a thrown error generates and sends an error object -> Should have seen 1 error
ok chrome@108 (windows 10) -> module - a thrown error generates and sends an error object -> Should have a valid timestamp
ok chrome@108 (windows 10) -> module - a thrown error generates and sends an error object -> Should be Error class
ok chrome@108 (windows 10) -> module - a thrown error generates and sends an error object -> Should have message
ok chrome@108 (windows 10) -> module - a thrown error generates and sends an error object -> Should have a stack trace
ok chrome@108 (windows 10) -> rum loader: LCP is not collected after pageHide -> LCP captured the pre-pageHide attribute
# chrome@108 (windows 10) -> module - unhandledPromise generates and sends an error object
ok chrome@108 (windows 10) -> module - unhandledPromise generates and sends an error object -> Should have 1 error obj
ok chrome@108 (windows 10) -> module - unhandledPromise generates and sends an error object -> Should have seen 1 error
ok chrome@108 (windows 10) -> module - unhandledPromise generates and sends an error object -> Should have a valid timestamp
ok chrome@108 (windows 10) -> module - unhandledPromise generates and sends an error object -> Should be Error class
ok chrome@108 (windows 10) -> module - unhandledPromise generates and sends an error object -> Should have message
ok chrome@108 (windows 10) -> module - unhandledPromise generates and sends an error object -> Should have a stack trace
ok chrome@108 (windows 10) -> module - Obfuscate All Events -> INS query -- fakeid was obfuscated
# chrome@108 (windows 10) -> module - RangeError generates and sends an error object
ok chrome@108 (windows 10) -> module - RangeError generates and sends an error object -> Should have 1 error obj
ok chrome@108 (windows 10) -> module - RangeError generates and sends an error object -> Should have seen 1 error
ok chrome@108 (windows 10) -> module - RangeError generates and sends an error object -> Should have a valid timestamp
ok chrome@108 (windows 10) -> module - RangeError generates and sends an error object -> Should be RangeError class
ok chrome@108 (windows 10) -> module - RangeError generates and sends an error object -> Should have message
ok chrome@108 (windows 10) -> module - RangeError generates and sends an error object -> Should have a stack trace
ok chrome@108 (windows 10) -> spa loader: LCP is not collected after pageHide -> LCP captured the pre-pageHide attribute
# chrome@108 (windows 10) -> module - TypeError generates and sends an error object
ok chrome@108 (windows 10) -> module - TypeError generates and sends an error object -> Should have 1 error obj
ok chrome@108 (windows 10) -> module - TypeError generates and sends an error object -> Should have seen 1 error
ok chrome@108 (windows 10) -> module - TypeError generates and sends an error object -> Should have a valid timestamp
ok chrome@108 (windows 10) -> module - TypeError generates and sends an error object -> Should be TypeError class
ok chrome@108 (windows 10) -> module - TypeError generates and sends an error object -> Should have message
ok chrome@108 (windows 10) -> module - TypeError generates and sends an error object -> Should have a stack trace
ok chrome@108 (windows 10) -> spa loader: LCP is not collected on hidden page -> did NOT find an LCP timing
# chrome@108 (windows 10) -> module - URIError generates and sends an error object
ok chrome@108 (windows 10) -> module - URIError generates and sends an error object -> Should have 1 error obj
ok chrome@108 (windows 10) -> module - URIError generates and sends an error object -> Should have seen 1 error
ok chrome@108 (windows 10) -> module - URIError generates and sends an error object -> Should have a valid timestamp
ok chrome@108 (windows 10) -> module - URIError generates and sends an error object -> Should be URIError class
ok chrome@108 (windows 10) -> module - URIError generates and sends an error object -> Should have message
ok chrome@108 (windows 10) -> module - URIError generates and sends an error object -> Should have a stack trace
# storing failed test for later retry: chrome@108 (windows 10) - module - capturing large payload of XHR ajax events
ok chrome@108 (windows 10) -> rum loader: LCP is not collected on hidden page -> did NOT find an LCP timing
# chrome@108 (windows 10) -> module - SyntaxError generates and sends an error object
ok chrome@108 (windows 10) -> module - SyntaxError generates and sends an error object -> Should have 1 error obj
ok chrome@108 (windows 10) -> module - SyntaxError generates and sends an error object -> Should have seen 1 error
ok chrome@108 (windows 10) -> module - SyntaxError generates and sends an error object -> Should have a valid timestamp
ok chrome@108 (windows 10) -> module - SyntaxError generates and sends an error object -> Should be SyntaxError class
ok chrome@108 (windows 10) -> module - SyntaxError generates and sends an error object -> Should have message
ok chrome@108 (windows 10) -> module - SyntaxError generates and sends an error object -> Should have a stack trace
ok chrome@108 (windows 10) -> classic - capturing large payload of XHR ajax events (retry 1) -> should be truthy
# chrome@108 (windows 10) -> module - max call stack size generates and sends an error object
ok chrome@108 (windows 10) -> module - max call stack size generates and sends an error object -> Should have 1 error obj
ok chrome@108 (windows 10) -> module - max call stack size generates and sends an error object -> Should have seen 1 error
ok chrome@108 (windows 10) -> module - max call stack size generates and sends an error object -> Should have a valid timestamp
ok chrome@108 (windows 10) -> module - max call stack size generates and sends an error object -> Should be RangeError class
ok chrome@108 (windows 10) -> module - max call stack size generates and sends an error object -> Should have message
ok chrome@108 (windows 10) -> module - max call stack size generates and sends an error object -> Should have a stack trace
ok chrome@108 (windows 10) -> module - release api adds tags to jserrors (with tags limit) -> {"num1":"1","num2":"2","num3":"3","num4":"4","num5":"5","num6":"6","num7":"7","num8":"8","num9":"9","num10":"10"} is expected but got {"num1":"1","num2":"2","num3":"3","num4":"4","num5":"5","num6":"6","num7":"7","num8":"8","num9":"9","num10":"10"}
# chrome@108 (windows 10) -> classic - a circular reference error generates and sends an error object
ok chrome@108 (windows 10) -> classic - a circular reference error generates and sends an error object -> exactly one error
ok chrome@108 (windows 10) -> module - release api limits the length of tags -> {"one":"201","three":"yyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxq","yyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxq":"2"} is expected but got {"one":"201","yyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxq":"2","three":"yyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxq"}
# chrome@108 (windows 10) -> module - a circular reference error generates and sends an error object
ok chrome@108 (windows 10) -> module - a circular reference error generates and sends an error object -> exactly one error
ok chrome@108 (windows 10) -> classic - RangeError generates and sends an error object -> Should have correct custom attributes
# chrome@108 (windows 10) -> classic - no headers are added on different origin when the origin is not allowed
# chrome@108 (windows 10) -> classic - when fetch is called with one string argument
ok chrome@108 (windows 10) -> classic - when fetch is called with one string argument -> newrelic header should not be present
ok chrome@108 (windows 10) -> classic - when fetch is called with one string argument -> traceparent header should not be present
ok chrome@108 (windows 10) -> classic - when fetch is called with one string argument -> tracestate header should not be present
# chrome@108 (windows 10) -> classic - when fetch is called with URL string and options arguments
ok chrome@108 (windows 10) -> classic - when fetch is called with URL string and options arguments -> newrelic header should not be present
ok chrome@108 (windows 10) -> classic - when fetch is called with URL string and options arguments -> traceparent header should not be present
ok chrome@108 (windows 10) -> classic - when fetch is called with URL string and options arguments -> tracestate header should not be present
# chrome@108 (windows 10) -> classic - when fetch is called with a Request argument
ok chrome@108 (windows 10) -> classic - when fetch is called with a Request argument -> newrelic header should not be present
ok chrome@108 (windows 10) -> classic - when fetch is called with a Request argument -> traceparent header should not be present
ok chrome@108 (windows 10) -> classic - when fetch is called with a Request argument -> tracestate header should not be present
# chrome@108 (windows 10) -> classic - when fetch is called with a URL object argument
ok chrome@108 (windows 10) -> classic - when fetch is called with a URL object argument -> newrelic header should not be present
ok chrome@108 (windows 10) -> classic - when fetch is called with a URL object argument -> traceparent header should not be present
ok chrome@108 (windows 10) -> module - RangeError generates and sends an error object -> Should have correct custom attributes
# chrome@108 (windows 10) -> classic - buffered events are sent at end-of-life aka worker closing
ok chrome@108 (windows 10) -> classic - buffered events are sent at end-of-life aka worker closing -> supportability metrics are sent on close
ok chrome@108 (windows 10) -> classic - buffered events are sent at end-of-life aka worker closing -> metrics included api calls as expected
ok chrome@108 (windows 10) -> classic - buffered events are sent at end-of-life aka worker closing -> metrics(-jserror) harvest is a POST
ok chrome@108 (windows 10) -> classic - buffered events are sent at end-of-life aka worker closing -> jserrors are sent on close
ok chrome@108 (windows 10) -> classic - buffered events are sent at end-of-life aka worker closing -> should have 1 error obj
ok chrome@108 (windows 10) -> classic - buffered events are sent at end-of-life aka worker closing -> should have correct message
ok chrome@108 (windows 10) -> classic - buffered events are sent at end-of-life aka worker closing -> jserrors harvest is a POST
ok chrome@108 (windows 10) -> classic - buffered events are sent at end-of-life aka worker closing -> ajax event is sent on close
ok chrome@108 (windows 10) -> classic - buffered events are sent at end-of-life aka worker closing -> events harvest is a POST
ok chrome@108 (windows 10) -> classic - buffered events are sent at end-of-life aka worker closing -> page actions are sent on close
ok chrome@108 (windows 10) -> classic - buffered events are sent at end-of-life aka worker closing -> should have 1 action obj
ok chrome@108 (windows 10) -> classic - buffered events are sent at end-of-life aka worker closing -> should have correct actionName
ok chrome@108 (windows 10) -> module - no query param when release is not set -> should not have ri query param
# chrome@108 (windows 10) -> classic - disabled jserrors should not generate errors
ok chrome@108 (windows 10) -> classic - SyntaxError generates and sends an error object -> Should have correct custom attributes
# chrome@108 (windows 10) -> classic - default headers on different origin when the origin is allowed
# chrome@108 (windows 10) -> classic - when fetch is called with one string argument
ok chrome@108 (windows 10) -> classic - when fetch is called with one string argument -> newrelic header should be present
ok chrome@108 (windows 10) -> classic - when fetch is called with one string argument -> should be equivalent
ok chrome@108 (windows 10) -> classic - when fetch is called with one string argument -> should be equal
ok chrome@108 (windows 10) -> classic - when fetch is called with one string argument -> should be equal
ok chrome@108 (windows 10) -> classic - when fetch is called with one string argument -> should be equal
ok chrome@108 (windows 10) -> classic - when fetch is called with one string argument -> should be equal
ok chrome@108 (windows 10) -> classic - when fetch is called with one string argument -> should be truthy
ok chrome@108 (windows 10) -> classic - when fetch is called with one string argument -> should be truthy
ok chrome@108 (windows 10) -> classic - when fetch is called with one string argument -> should be truthy
ok chrome@108 (windows 10) -> classic - when fetch is called with one string argument -> traceparent header should not be present
ok chrome@108 (windows 10) -> classic - when fetch is called with one string argument -> tracestate header should not be present
# chrome@108 (windows 10) -> classic - when fetch is called with URL string and options arguments
ok chrome@108 (windows 10) -> classic - when fetch is called with URL string and options arguments -> newrelic header should be present
ok chrome@108 (windows 10) -> classic - when fetch is called with URL string and options arguments -> should be equivalent
ok chrome@108 (windows 10) -> classic - when fetch is called with URL string and options arguments -> should be equal
ok chrome@108 (windows 10) -> classic - when fetch is called with URL string and options arguments -> should be equal
ok chrome@108 (windows 10) -> classic - when fetch is called with URL string and options arguments -> should be equal
ok chrome@108 (windows 10) -> classic - when fetch is called with URL string and options arguments -> should be equal
ok chrome@108 (windows 10) -> classic - when fetch is called with URL string and options arguments -> should be truthy
ok chrome@108 (windows 10) -> classic - when fetch is called with URL string and options arguments -> should be truthy
ok chrome@108 (windows 10) -> classic - when fetch is called with URL string and options arguments -> should be truthy
ok chrome@108 (windows 10) -> classic - when fetch is called with URL string and options arguments -> traceparent header should not be present
ok chrome@108 (windows 10) -> classic - when fetch is called with URL string and options arguments -> tracestate header should not be present
# chrome@108 (windows 10) -> classic - when fetch is called with a Request argument
ok chrome@108 (windows 10) -> classic - when fetch is called with a Request argument -> newrelic header should be present
ok chrome@108 (windows 10) -> classic - when fetch is called with a Request argument -> should be equivalent
ok chrome@108 (windows 10) -> classic - when fetch is called with a Request argument -> should be equal
ok chrome@108 (windows 10) -> classic - when fetch is called with a Request argument -> should be equal
ok chrome@108 (windows 10) -> classic - when fetch is called with a Request argument -> should be equal
ok chrome@108 (windows 10) -> classic - when fetch is called with a Request argument -> should be equal
ok chrome@108 (windows 10) -> classic - when fetch is called with a Request argument -> should be truthy
ok chrome@108 (windows 10) -> classic - when fetch is called with a Request argument -> should be truthy
ok chrome@108 (windows 10) -> classic - when fetch is called with a Request argument -> should be truthy
ok chrome@108 (windows 10) -> classic - when fetch is called with a Request argument -> traceparent header should not be present
ok chrome@108 (windows 10) -> classic - when fetch is called with a Request argument -> tracestate header should not be present
# chrome@108 (windows 10) -> classic - when fetch is called with a URL object argument
ok chrome@108 (windows 10) -> classic - when fetch is called with a URL object argument -> newrelic header should be present
ok chrome@108 (windows 10) -> classic - when fetch is called with a URL object argument -> should be equivalent
ok chrome@108 (windows 10) -> classic - when fetch is called with a URL object argument -> should be equal
ok chrome@108 (windows 10) -> classic - when fetch is called with a URL object argument -> should be equal
ok chrome@108 (windows 10) -> classic - when fetch is called with a URL object argument -> should be equal
ok chrome@108 (windows 10) -> classic - when fetch is called with a URL object argument -> should be equal
ok chrome@108 (windows 10) -> classic - when fetch is called with a URL object argument -> should be truthy
ok chrome@108 (windows 10) -> classic - when fetch is called with a URL object argument -> should be truthy
ok chrome@108 (windows 10) -> classic - when fetch is called with a URL object argument -> should be truthy
ok chrome@108 (windows 10) -> classic - when fetch is called with a URL object argument -> traceparent header should not be present
ok chrome@108 (windows 10) -> module - TypeError generates and sends an error object -> Should have correct custom attributes
# chrome@108 (windows 10) -> module - buffered events are sent at end-of-life aka worker closing
ok chrome@108 (windows 10) -> module - buffered events are sent at end-of-life aka worker closing -> supportability metrics are sent on close
ok chrome@108 (windows 10) -> module - buffered events are sent at end-of-life aka worker closing -> metrics included api calls as expected
ok chrome@108 (windows 10) -> module - buffered events are sent at end-of-life aka worker closing -> metrics(-jserror) harvest is a POST
ok chrome@108 (windows 10) -> module - buffered events are sent at end-of-life aka worker closing -> jserrors are sent on close
ok chrome@108 (windows 10) -> module - buffered events are sent at end-of-life aka worker closing -> should have 1 error obj
ok chrome@108 (windows 10) -> module - buffered events are sent at end-of-life aka worker closing -> should have correct message
ok chrome@108 (windows 10) -> module - buffered events are sent at end-of-life aka worker closing -> jserrors harvest is a POST
ok chrome@108 (windows 10) -> module - buffered events are sent at end-of-life aka worker closing -> ajax event is sent on close
ok chrome@108 (windows 10) -> module - buffered events are sent at end-of-life aka worker closing -> events harvest is a POST
ok chrome@108 (windows 10) -> module - buffered events are sent at end-of-life aka worker closing -> page actions are sent on close
ok chrome@108 (windows 10) -> module - buffered events are sent at end-of-life aka worker closing -> should have 1 action obj
ok chrome@108 (windows 10) -> module - buffered events are sent at end-of-life aka worker closing -> should have correct actionName
ok chrome@108 (windows 10) -> classic - URIError generates and sends an error object -> Should have correct custom attributes
# chrome@108 (windows 10) -> classic - trace context headers are added on different origin when explicitly enabled in configuration
# chrome@108 (windows 10) -> classic - when fetch is called with one string argument
ok chrome@108 (windows 10) -> classic - when fetch is called with one string argument -> newrelic header should be present
ok chrome@108 (windows 10) -> classic - when fetch is called with one string argument -> should be equivalent
ok chrome@108 (windows 10) -> classic - when fetch is called with one string argument -> should be equal
ok chrome@108 (windows 10) -> classic - when fetch is called with one string argument -> should be equal
ok chrome@108 (windows 10) -> classic - when fetch is called with one string argument -> should be equal
ok chrome@108 (windows 10) -> classic - when fetch is called with one string argument -> should be equal
ok chrome@108 (windows 10) -> classic - when fetch is called with one string argument -> should be truthy
ok chrome@108 (windows 10) -> classic - when fetch is called with one string argument -> should be truthy
ok chrome@108 (windows 10) -> classic - when fetch is called with one string argument -> should be truthy
ok chrome@108 (windows 10) -> classic - when fetch is called with one string argument -> traceparent header should be present
ok chrome@108 (windows 10) -> classic - when fetch is called with one string argument -> tracestate header should be present
ok chrome@108 (windows 10) -> classic - when fetch is called with one string argument -> parent header should have four parts
ok chrome@108 (windows 10) -> classic - when fetch is called with one string argument -> first part should be format version set to 00
ok chrome@108 (windows 10) -> classic - when fetch is called with one string argument -> trace ID is there
ok chrome@108 (windows 10) -> classic - when fetch is called with one string argument -> span ID is there
ok chrome@108 (windows 10) -> classic - when fetch is called with one string argument -> fourth part should be set to sampled flag
ok chrome@108 (windows 10) -> classic - when fetch is called with one string argument -> key should be in the right format
ok chrome@108 (windows 10) -> classic - when fetch is called with one string argument -> state header should have nine parts
ok chrome@108 (windows 10) -> classic - when fetch is called with one string argument -> version is set to 0
ok chrome@108 (windows 10) -> classic - when fetch is called with one string argument -> parent type is set to 1 for Browser
ok chrome@108 (windows 10) -> classic - when fetch is called with one string argument -> third part is set to account ID
ok chrome@108 (windows 10) -> classic - when fetch is called with one string argument -> fourth part is set to app/agent ID
ok chrome@108 (windows 10) -> classic - when fetch is called with one string argument -> span ID is there
ok chrome@108 (windows 10) -> classic - when fetch is called with one string argument -> fifth part is empty - no transaction in Browser
ok chrome@108 (windows 10) -> classic - when fetch is called with one string argument -> fifth part is set to empty to defer sampling decision to next hop
ok chrome@108 (windows 10) -> classic - when fetch is called with one string argument -> priority is not set
ok chrome@108 (windows 10) -> classic - when fetch is called with one string argument -> timestamp is there
# chrome@108 (windows 10) -> classic - when fetch is called with URL string and options arguments
ok chrome@108 (windows 10) -> classic - when fetch is called with URL string and options arguments -> newrelic header should be present
ok chrome@108 (windows 10) -> classic - when fetch is called with URL string and options arguments -> should be equivalent
ok chrome@108 (windows 10) -> classic - when fetch is called with URL string and options arguments -> should be equal
ok chrome@108 (windows 10) -> classic - when fetch is called with URL string and options arguments -> should be equal
ok chrome@108 (windows 10) -> classic - when fetch is called with URL string and options arguments -> should be equal
ok chrome@108 (windows 10) -> classic - when fetch is called with URL string and options arguments -> should be equal
ok chrome@108 (windows 10) -> classic - when fetch is called with URL string and options arguments -> should be truthy
ok chrome@108 (windows 10) -> classic - when fetch is called with URL string and options arguments -> should be truthy
ok chrome@108 (windows 10) -> classic - when fetch is called with URL string and options arguments -> should be truthy
ok chrome@108 (windows 10) -> classic - when fetch is called with URL string and options arguments -> traceparent header should be present
ok chrome@108 (windows 10) -> classic - when fetch is called with URL string and options arguments -> tracestate header should be present
ok chrome@108 (windows 10) -> classic - when fetch is called with URL string and options arguments -> parent header should have four parts
ok chrome@108 (windows 10) -> classic - when fetch is called with URL string and options arguments -> first part should be format version set to 00
ok chrome@108 (windows 10) -> classic - when fetch is called with URL string and options arguments -> trace ID is there
ok chrome@108 (windows 10) -> classic - when fetch is called with URL string and options arguments -> span ID is there
ok chrome@108 (windows 10) -> classic - when fetch is called with URL string and options arguments -> fourth part should be set to sampled flag
ok chrome@108 (windows 10) -> classic - when fetch is called with URL string and options arguments -> key should be in the right format
ok chrome@108 (windows 10) -> classic - when fetch is called with URL string and options arguments -> state header should have nine parts
ok chrome@108 (windows 10) -> classic - when fetch is called with URL string and options arguments -> version is set to 0
ok chrome@108 (windows 10) -> classic - when fetch is called with URL string and options arguments -> parent type is set to 1 for Browser
ok chrome@108 (windows 10) -> classic - when fetch is called with URL string and options arguments -> third part is set to account ID
ok chrome@108 (windows 10) -> classic - when fetch is called with URL string and options arguments -> fourth part is set to app/agent ID
ok chrome@108 (windows 10) -> classic - when fetch is called with URL string and options arguments -> span ID is there
ok chrome@108 (windows 10) -> classic - when fetch is called with URL string and options arguments -> fifth part is empty - no transaction in Browser
ok chrome@108 (windows 10) -> classic - when fetch is called with URL string and options arguments -> fifth part is set to empty to defer sampling decision to next hop
ok chrome@108 (windows 10) -> classic - when fetch is called with URL string and options arguments -> priority is not set
ok chrome@108 (windows 10) -> classic - when fetch is called with URL string and options arguments -> timestamp is there
# chrome@108 (windows 10) -> classic - when fetch is called with a Request argument
ok chrome@108 (windows 10) -> classic - when fetch is called with a Request argument -> newrelic header should be present
ok chrome@108 (windows 10) -> classic - when fetch is called with a Request argument -> should be equivalent
ok chrome@108 (windows 10) -> classic - when fetch is called with a Request argument -> should be equal
ok chrome@108 (windows 10) -> classic - when fetch is called with a Request argument -> should be equal
ok chrome@108 (windows 10) -> classic - when fetch is called with a Request argument -> should be equal
ok chrome@108 (windows 10) -> classic - when fetch is called with a Request argument -> should be equal
ok chrome@108 (windows 10) -> classic - when fetch is called with a Request argument -> should be truthy
ok chrome@108 (windows 10) -> classic - when fetch is called with a Request argument -> should be truthy
ok chrome@108 (windows 10) -> classic - when fetch is called with a Request argument -> should be truthy
ok chrome@108 (windows 10) -> classic - when fetch is called with a Request argument -> traceparent header should be present
ok chrome@108 (windows 10) -> classic - when fetch is called with a Request argument -> tracestate header should be present
ok chrome@108 (windows 10) -> classic - when fetch is called with a Request argument -> parent header should have four parts
ok chrome@108 (windows 10) -> classic - when fetch is called with a Request argument -> first part should be format version set to 00
ok chrome@108 (windows 10) -> classic - when fetch is called with a Request argument -> trace ID is there
ok chrome@108 (windows 10) -> classic - when fetch is called with a Request argument -> span ID is there
ok chrome@108 (windows 10) -> classic - when fetch is called with a Request argument -> fourth part should be set to sampled flag
ok chrome@108 (windows 10) -> classic - when fetch is called with a Request argument -> key should be in the right format
ok chrome@108 (windows 10) -> classic - when fetch is called with a Request argument -> state header should have nine parts
ok chrome@108 (windows 10) -> classic - when fetch is called with a Request argument -> version is set to 0
ok chrome@108 (windows 10) -> classic - when fetch is called with a Request argument -> parent type is set to 1 for Browser
ok chrome@108 (windows 10) -> classic - when fetch is called with a Request argument -> third part is set to account ID
ok chrome@108 (windows 10) -> classic - when fetch is called with a Request argument -> fourth part is set to app/agent ID
ok chrome@108 (windows 10) -> classic - when fetch is called with a Request argument -> span ID is there
ok chrome@108 (windows 10) -> classic - when fetch is called with a Request argument -> fifth part is empty - no transaction in Browser
ok chrome@108 (windows 10) -> classic - when fetch is called with a Request argument -> fifth part is set to empty to defer sampling decision to next hop
ok chrome@108 (windows 10) -> classic - when fetch is called with a Request argument -> priority is not set
ok chrome@108 (windows 10) -> classic - when fetch is called with a Request argument -> timestamp is there
# chrome@108 (windows 10) -> classic - when fetch is called with a URL object argument
ok chrome@108 (windows 10) -> classic - when fetch is called with a URL object argument -> newrelic header should be present
ok chrome@108 (windows 10) -> classic - when fetch is called with a URL object argument -> should be equivalent
ok chrome@108 (windows 10) -> classic - when fetch is called with a URL object argument -> should be equal
ok chrome@108 (windows 10) -> classic - when fetch is called with a URL object argument -> should be equal
ok chrome@108 (windows 10) -> classic - when fetch is called with a URL object argument -> should be equal
ok chrome@108 (windows 10) -> classic - when fetch is called with a URL object argument -> should be equal
ok chrome@108 (windows 10) -> classic - when fetch is called with a URL object argument -> should be truthy
ok chrome@108 (windows 10) -> classic - when fetch is called with a URL object argument -> should be truthy
ok chrome@108 (windows 10) -> classic - when fetch is called with a URL object argument -> should be truthy
ok chrome@108 (windows 10) -> classic - when fetch is called with a URL object argument -> traceparent header should be present
ok chrome@108 (windows 10) -> classic - when fetch is called with a URL object argument -> tracestate header should be present
ok chrome@108 (windows 10) -> classic - when fetch is called with a URL object argument -> parent header should have four parts
ok chrome@108 (windows 10) -> classic - when fetch is called with a URL object argument -> first part should be format version set to 00
ok chrome@108 (windows 10) -> classic - when fetch is called with a URL object argument -> trace ID is there
ok chrome@108 (windows 10) -> classic - when fetch is called with a URL object argument -> span ID is there
ok chrome@108 (windows 10) -> classic - when fetch is called with a URL object argument -> fourth part should be set to sampled flag
ok chrome@108 (windows 10) -> classic - when fetch is called with a URL object argument -> key should be in the right format
ok chrome@108 (windows 10) -> classic - when fetch is called with a URL object argument -> state header should have nine parts
ok chrome@108 (windows 10) -> classic - when fetch is called with a URL object argument -> version is set to 0
ok chrome@108 (windows 10) -> classic - when fetch is called with a URL object argument -> parent type is set to 1 for Browser
ok chrome@108 (windows 10) -> classic - when fetch is called with a URL object argument -> third part is set to account ID
ok chrome@108 (windows 10) -> classic - when fetch is called with a URL object argument -> fourth part is set to app/agent ID
ok chrome@108 (windows 10) -> classic - when fetch is called with a URL object argument -> span ID is there
ok chrome@108 (windows 10) -> classic - when fetch is called with a URL object argument -> fifth part is empty - no transaction in Browser
ok chrome@108 (windows 10) -> classic - when fetch is called with a URL object argument -> fifth part is set to empty to defer sampling decision to next hop
ok chrome@108 (windows 10) -> classic - when fetch is called with a URL object argument -> priority is not set
ok chrome@108 (windows 10) -> classic - unhandledPromise generates and sends an error object -> Should have custom attribute
# chrome@108 (windows 10) -> classic - no headers are added on different origin by default
# chrome@108 (windows 10) -> classic - when fetch is called with one string argument
ok chrome@108 (windows 10) -> classic - when fetch is called with one string argument -> newrelic header should not be present
ok chrome@108 (windows 10) -> classic - when fetch is called with one string argument -> traceparent header should not be present
ok chrome@108 (windows 10) -> classic - when fetch is called with one string argument -> tracestate header should not be present
# chrome@108 (windows 10) -> classic - when fetch is called with URL string and options arguments
ok chrome@108 (windows 10) -> classic - when fetch is called with URL string and options arguments -> newrelic header should not be present
ok chrome@108 (windows 10) -> classic - when fetch is called with URL string and options arguments -> traceparent header should not be present
ok chrome@108 (windows 10) -> classic - when fetch is called with URL string and options arguments -> tracestate header should not be present
# chrome@108 (windows 10) -> classic - when fetch is called with a Request argument
ok chrome@108 (windows 10) -> classic - when fetch is called with a Request argument -> newrelic header should not be present
ok chrome@108 (windows 10) -> classic - when fetch is called with a Request argument -> traceparent header should not be present
ok chrome@108 (windows 10) -> classic - when fetch is called with a Request argument -> tracestate header should not be present
# chrome@108 (windows 10) -> classic - when fetch is called with a URL object argument
ok chrome@108 (windows 10) -> classic - when fetch is called with a URL object argument -> newrelic header should not be present
ok chrome@108 (windows 10) -> classic - when fetch is called with a URL object argument -> traceparent header should not be present
ok chrome@108 (windows 10) -> classic - a reference error generates and sends an error object -> Should have correct custom attributes
# chrome@108 (windows 10) -> module - no headers are added on different origin when the origin is not allowed
# chrome@108 (windows 10) -> module - when fetch is called with one string argument
ok chrome@108 (windows 10) -> module - when fetch is called with one string argument -> newrelic header should not be present
ok chrome@108 (windows 10) -> module - when fetch is called with one string argument -> traceparent header should not be present
ok chrome@108 (windows 10) -> module - when fetch is called with one string argument -> tracestate header should not be present
# chrome@108 (windows 10) -> module - when fetch is called with URL string and options arguments
ok chrome@108 (windows 10) -> module - when fetch is called with URL string and options arguments -> newrelic header should not be present
ok chrome@108 (windows 10) -> module - when fetch is called with URL string and options arguments -> traceparent header should not be present
ok chrome@108 (windows 10) -> module - when fetch is called with URL string and options arguments -> tracestate header should not be present
# chrome@108 (windows 10) -> module - when fetch is called with a Request argument
ok chrome@108 (windows 10) -> module - when fetch is called with a Request argument -> newrelic header should not be present
ok chrome@108 (windows 10) -> module - when fetch is called with a Request argument -> traceparent header should not be present
ok chrome@108 (windows 10) -> module - when fetch is called with a Request argument -> tracestate header should not be present
# chrome@108 (windows 10) -> module - when fetch is called with a URL object argument
ok chrome@108 (windows 10) -> module - when fetch is called with a URL object argument -> newrelic header should not be present
ok chrome@108 (windows 10) -> module - when fetch is called with a URL object argument -> traceparent header should not be present
ok chrome@108 (windows 10) -> classic - max call stack size generates and sends an error object -> This browser version does not throw errors in worker when max stack size is reached
# chrome@108 (windows 10) -> module - no headers are added on different origin by default
# chrome@108 (windows 10) -> module - when fetch is called with one string argument
ok chrome@108 (windows 10) -> module - when fetch is called with one string argument -> newrelic header should not be present
ok chrome@108 (windows 10) -> module - when fetch is called with one string argument -> traceparent header should not be present
ok chrome@108 (windows 10) -> module - when fetch is called with one string argument -> tracestate header should not be present
# chrome@108 (windows 10) -> module - when fetch is called with URL string and options arguments
ok chrome@108 (windows 10) -> module - when fetch is called with URL string and options arguments -> newrelic header should not be present
ok chrome@108 (windows 10) -> module - when fetch is called with URL string and options arguments -> traceparent header should not be present
ok chrome@108 (windows 10) -> module - when fetch is called with URL string and options arguments -> tracestate header should not be present
# chrome@108 (windows 10) -> module - when fetch is called with a Request argument
ok chrome@108 (windows 10) -> module - when fetch is called with a Request argument -> newrelic header should not be present
ok chrome@108 (windows 10) -> module - when fetch is called with a Request argument -> traceparent header should not be present
ok chrome@108 (windows 10) -> module - when fetch is called with a Request argument -> tracestate header should not be present
# chrome@108 (windows 10) -> module - when fetch is called with a URL object argument
ok chrome@108 (windows 10) -> module - when fetch is called with a URL object argument -> newrelic header should not be present
ok chrome@108 (windows 10) -> module - when fetch is called with a URL object argument -> traceparent header should not be present
ok chrome@108 (windows 10) -> classic - a thrown error generates and sends an error object -> Should have correct custom attributes
# chrome@108 (windows 10) -> module - disabled jserrors should not generate errors
ok chrome@108 (windows 10) -> module - unhandledPromise generates and sends an error object -> Should have custom attribute
# chrome@108 (windows 10) -> module - newrelic header is not added on different origin when explicitly disabled in configuration
# chrome@108 (windows 10) -> module - when fetch is called with one string argument
ok chrome@108 (windows 10) -> module - when fetch is called with one string argument -> newrelic header should not be present
ok chrome@108 (windows 10) -> module - when fetch is called with one string argument -> traceparent header should not be present
ok chrome@108 (windows 10) -> module - when fetch is called with one string argument -> tracestate header should not be present
# chrome@108 (windows 10) -> module - when fetch is called with URL string and options arguments
ok chrome@108 (windows 10) -> module - when fetch is called with URL string and options arguments -> newrelic header should not be present
ok chrome@108 (windows 10) -> module - when fetch is called with URL string and options arguments -> traceparent header should not be present
ok chrome@108 (windows 10) -> module - when fetch is called with URL string and options arguments -> tracestate header should not be present
# chrome@108 (windows 10) -> module - when fetch is called with a Request argument
ok chrome@108 (windows 10) -> module - when fetch is called with a Request argument -> newrelic header should not be present
ok chrome@108 (windows 10) -> module - when fetch is called with a Request argument -> traceparent header should not be present
ok chrome@108 (windows 10) -> module - when fetch is called with a Request argument -> tracestate header should not be present
# chrome@108 (windows 10) -> module - when fetch is called with a URL object argument
ok chrome@108 (windows 10) -> module - when fetch is called with a URL object argument -> newrelic header should not be present
ok chrome@108 (windows 10) -> module - when fetch is called with a URL object argument -> traceparent header should not be present
ok chrome@108 (windows 10) -> classic - TypeError generates and sends an error object -> Should have correct custom attributes
# chrome@108 (windows 10) -> classic - newrelic header is not added on different origin when explicitly disabled in configuration
# chrome@108 (windows 10) -> classic - when fetch is called with one string argument
ok chrome@108 (windows 10) -> classic - when fetch is called with one string argument -> newrelic header should not be present
ok chrome@108 (windows 10) -> classic - when fetch is called with one string argument -> traceparent header should not be present
ok chrome@108 (windows 10) -> classic - when fetch is called with one string argument -> tracestate header should not be present
# chrome@108 (windows 10) -> classic - when fetch is called with URL string and options arguments
ok chrome@108 (windows 10) -> classic - when fetch is called with URL string and options arguments -> newrelic header should not be present
ok chrome@108 (windows 10) -> classic - when fetch is called with URL string and options arguments -> traceparent header should not be present
ok chrome@108 (windows 10) -> classic - when fetch is called with URL string and options arguments -> tracestate header should not be present
# chrome@108 (windows 10) -> classic - when fetch is called with a Request argument
ok chrome@108 (windows 10) -> classic - when fetch is called with a Request argument -> newrelic header should not be present
ok chrome@108 (windows 10) -> classic - when fetch is called with a Request argument -> traceparent header should not be present
ok chrome@108 (windows 10) -> classic - when fetch is called with a Request argument -> tracestate header should not be present
# chrome@108 (windows 10) -> classic - when fetch is called with a URL object argument
ok chrome@108 (windows 10) -> classic - when fetch is called with a URL object argument -> newrelic header should not be present
ok chrome@108 (windows 10) -> classic - when fetch is called with a URL object argument -> traceparent header should not be present
ok chrome@108 (windows 10) -> module - a thrown error generates and sends an error object -> Should have correct custom attributes
# chrome@108 (windows 10) -> module - trace context headers are added on different origin when explicitly enabled in configuration
# chrome@108 (windows 10) -> module - when fetch is called with one string argument
ok chrome@108 (windows 10) -> module - when fetch is called with one string argument -> newrelic header should be present
ok chrome@108 (windows 10) -> module - when fetch is called with one string argument -> should be equivalent
ok chrome@108 (windows 10) -> module - when fetch is called with one string argument -> should be equal
ok chrome@108 (windows 10) -> module - when fetch is called with one string argument -> should be equal
ok chrome@108 (windows 10) -> module - when fetch is called with one string argument -> should be equal
ok chrome@108 (windows 10) -> module - when fetch is called with one string argument -> should be equal
ok chrome@108 (windows 10) -> module - when fetch is called with one string argument -> should be truthy
ok chrome@108 (windows 10) -> module - when fetch is called with one string argument -> should be truthy
ok chrome@108 (windows 10) -> module - when fetch is called with one string argument -> should be truthy
ok chrome@108 (windows 10) -> module - when fetch is called with one string argument -> traceparent header should be present
ok chrome@108 (windows 10) -> module - when fetch is called with one string argument -> tracestate header should be present
ok chrome@108 (windows 10) -> module - when fetch is called with one string argument -> parent header should have four parts
ok chrome@108 (windows 10) -> module - when fetch is called with one string argument -> first part should be format version set to 00
ok chrome@108 (windows 10) -> module - when fetch is called with one string argument -> trace ID is there
ok chrome@108 (windows 10) -> module - when fetch is called with one string argument -> span ID is there
ok chrome@108 (windows 10) -> module - when fetch is called with one string argument -> fourth part should be set to sampled flag
ok chrome@108 (windows 10) -> module - when fetch is called with one string argument -> key should be in the right format
ok chrome@108 (windows 10) -> module - when fetch is called with one string argument -> state header should have nine parts
ok chrome@108 (windows 10) -> module - when fetch is called with one string argument -> version is set to 0
ok chrome@108 (windows 10) -> module - when fetch is called with one string argument -> parent type is set to 1 for Browser
ok chrome@108 (windows 10) -> module - when fetch is called with one string argument -> third part is set to account ID
ok chrome@108 (windows 10) -> module - when fetch is called with one string argument -> fourth part is set to app/agent ID
ok chrome@108 (windows 10) -> module - when fetch is called with one string argument -> span ID is there
ok chrome@108 (windows 10) -> module - when fetch is called with one string argument -> fifth part is empty - no transaction in Browser
ok chrome@108 (windows 10) -> module - when fetch is called with one string argument -> fifth part is set to empty to defer sampling decision to next hop
ok chrome@108 (windows 10) -> module - when fetch is called with one string argument -> priority is not set
ok chrome@108 (windows 10) -> module - when fetch is called with one string argument -> timestamp is there
# chrome@108 (windows 10) -> module - when fetch is called with URL string and options arguments
ok chrome@108 (windows 10) -> module - when fetch is called with URL string and options arguments -> newrelic header should be present
ok chrome@108 (windows 10) -> module - when fetch is called with URL string and options arguments -> should be equivalent
ok chrome@108 (windows 10) -> module - when fetch is called with URL string and options arguments -> should be equal
ok chrome@108 (windows 10) -> module - when fetch is called with URL string and options arguments -> should be equal
ok chrome@108 (windows 10) -> module - when fetch is called with URL string and options arguments -> should be equal
ok chrome@108 (windows 10) -> module - when fetch is called with URL string and options arguments -> should be equal
ok chrome@108 (windows 10) -> module - when fetch is called with URL string and options arguments -> should be truthy
ok chrome@108 (windows 10) -> module - when fetch is called with URL string and options arguments -> should be truthy
ok chrome@108 (windows 10) -> module - when fetch is called with URL string and options arguments -> should be truthy
ok chrome@108 (windows 10) -> module - when fetch is called with URL string and options arguments -> traceparent header should be present
ok chrome@108 (windows 10) -> module - when fetch is called with URL string and options arguments -> tracestate header should be present
ok chrome@108 (windows 10) -> module - when fetch is called with URL string and options arguments -> parent header should have four parts
ok chrome@108 (windows 10) -> module - when fetch is called with URL string and options arguments -> first part should be format version set to 00
ok chrome@108 (windows 10) -> module - when fetch is called with URL string and options arguments -> trace ID is there
ok chrome@108 (windows 10) -> module - when fetch is called with URL string and options arguments -> span ID is there
ok chrome@108 (windows 10) -> module - when fetch is called with URL string and options arguments -> fourth part should be set to sampled flag
ok chrome@108 (windows 10) -> module - when fetch is called with URL string and options arguments -> key should be in the right format
ok chrome@108 (windows 10) -> module - when fetch is called with URL string and options arguments -> state header should have nine parts
ok chrome@108 (windows 10) -> module - when fetch is called with URL string and options arguments -> version is set to 0
ok chrome@108 (windows 10) -> module - when fetch is called with URL string and options arguments -> parent type is set to 1 for Browser
ok chrome@108 (windows 10) -> module - when fetch is called with URL string and options arguments -> third part is set to account ID
ok chrome@108 (windows 10) -> module - when fetch is called with URL string and options arguments -> fourth part is set to app/agent ID
ok chrome@108 (windows 10) -> module - when fetch is called with URL string and options arguments -> span ID is there
ok chrome@108 (windows 10) -> module - when fetch is called with URL string and options arguments -> fifth part is empty - no transaction in Browser
ok chrome@108 (windows 10) -> module - when fetch is called with URL string and options arguments -> fifth part is set to empty to defer sampling decision to next hop
ok chrome@108 (windows 10) -> module - when fetch is called with URL string and options arguments -> priority is not set
ok chrome@108 (windows 10) -> module - when fetch is called with URL string and options arguments -> timestamp is there
# chrome@108 (windows 10) -> module - when fetch is called with a Request argument
ok chrome@108 (windows 10) -> module - when fetch is called with a Request argument -> newrelic header should be present
ok chrome@108 (windows 10) -> module - when fetch is called with a Request argument -> should be equivalent
ok chrome@108 (windows 10) -> module - when fetch is called with a Request argument -> should be equal
ok chrome@108 (windows 10) -> module - when fetch is called with a Request argument -> should be equal
ok chrome@108 (windows 10) -> module - when fetch is called with a Request argument -> should be equal
ok chrome@108 (windows 10) -> module - when fetch is called with a Request argument -> should be equal
ok chrome@108 (windows 10) -> module - when fetch is called with a Request argument -> should be truthy
ok chrome@108 (windows 10) -> module - when fetch is called with a Request argument -> should be truthy
ok chrome@108 (windows 10) -> module - when fetch is called with a Request argument -> should be truthy
ok chrome@108 (windows 10) -> module - when fetch is called with a Request argument -> traceparent header should be present
ok chrome@108 (windows 10) -> module - when fetch is called with a Request argument -> tracestate header should be present
ok chrome@108 (windows 10) -> module - when fetch is called with a Request argument -> parent header should have four parts
ok chrome@108 (windows 10) -> module - when fetch is called with a Request argument -> first part should be format version set to 00
ok chrome@108 (windows 10) -> module - when fetch is called with a Request argument -> trace ID is there
ok chrome@108 (windows 10) -> module - when fetch is called with a Request argument -> span ID is there
ok chrome@108 (windows 10) -> module - when fetch is called with a Request argument -> fourth part should be set to sampled flag
ok chrome@108 (windows 10) -> module - when fetch is called with a Request argument -> key should be in the right format
ok chrome@108 (windows 10) -> module - when fetch is called with a Request argument -> state header should have nine parts
ok chrome@108 (windows 10) -> module - when fetch is called with a Request argument -> version is set to 0
ok chrome@108 (windows 10) -> module - when fetch is called with a Request argument -> parent type is set to 1 for Browser
ok chrome@108 (windows 10) -> module - when fetch is called with a Request argument -> third part is set to account ID
ok chrome@108 (windows 10) -> module - when fetch is called with a Request argument -> fourth part is set to app/agent ID
ok chrome@108 (windows 10) -> module - when fetch is called with a Request argument -> span ID is there
ok chrome@108 (windows 10) -> module - when fetch is called with a Request argument -> fifth part is empty - no transaction in Browser
ok chrome@108 (windows 10) -> module - when fetch is called with a Request argument -> fifth part is set to empty to defer sampling decision to next hop
ok chrome@108 (windows 10) -> module - when fetch is called with a Request argument -> priority is not set
ok chrome@108 (windows 10) -> module - when fetch is called with a Request argument -> timestamp is there
# chrome@108 (windows 10) -> module - when fetch is called with a URL object argument
ok chrome@108 (windows 10) -> module - when fetch is called with a URL object argument -> newrelic header should be present
ok chrome@108 (windows 10) -> module - when fetch is called with a URL object argument -> should be equivalent
ok chrome@108 (windows 10) -> module - when fetch is called with a URL object argument -> should be equal
ok chrome@108 (windows 10) -> module - when fetch is called with a URL object argument -> should be equal
ok chrome@108 (windows 10) -> module - when fetch is called with a URL object argument -> should be equal
ok chrome@108 (windows 10) -> module - when fetch is called with a URL object argument -> should be equal
ok chrome@108 (windows 10) -> module - when fetch is called with a URL object argument -> should be truthy
ok chrome@108 (windows 10) -> module - when fetch is called with a URL object argument -> should be truthy
ok chrome@108 (windows 10) -> module - when fetch is called with a URL object argument -> should be truthy
ok chrome@108 (windows 10) -> module - when fetch is called with a URL object argument -> traceparent header should be present
ok chrome@108 (windows 10) -> module - when fetch is called with a URL object argument -> tracestate header should be present
ok chrome@108 (windows 10) -> module - when fetch is called with a URL object argument -> parent header should have four parts
ok chrome@108 (windows 10) -> module - when fetch is called with a URL object argument -> first part should be format version set to 00
ok chrome@108 (windows 10) -> module - when fetch is called with a URL object argument -> trace ID is there
ok chrome@108 (windows 10) -> module - when fetch is called with a URL object argument -> span ID is there
ok chrome@108 (windows 10) -> module - when fetch is called with a URL object argument -> fourth part should be set to sampled flag
ok chrome@108 (windows 10) -> module - when fetch is called with a URL object argument -> key should be in the right format
ok chrome@108 (windows 10) -> module - when fetch is called with a URL object argument -> state header should have nine parts
ok chrome@108 (windows 10) -> module - when fetch is called with a URL object argument -> version is set to 0
ok chrome@108 (windows 10) -> module - when fetch is called with a URL object argument -> parent type is set to 1 for Browser
ok chrome@108 (windows 10) -> module - when fetch is called with a URL object argument -> third part is set to account ID
ok chrome@108 (windows 10) -> module - when fetch is called with a URL object argument -> fourth part is set to app/agent ID
ok chrome@108 (windows 10) -> module - when fetch is called with a URL object argument -> span ID is there
ok chrome@108 (windows 10) -> module - when fetch is called with a URL object argument -> fifth part is empty - no transaction in Browser
ok chrome@108 (windows 10) -> module - when fetch is called with a URL object argument -> fifth part is set to empty to defer sampling decision to next hop
ok chrome@108 (windows 10) -> module - when fetch is called with a URL object argument -> priority is not set
ok chrome@108 (windows 10) -> module - a reference error generates and sends an error object -> Should have correct custom attributes
# chrome@108 (windows 10) -> module - default headers on different origin when the origin is allowed
# chrome@108 (windows 10) -> module - when fetch is called with one string argument
ok chrome@108 (windows 10) -> module - when fetch is called with one string argument -> newrelic header should be present
ok chrome@108 (windows 10) -> module - when fetch is called with one string argument -> should be equivalent
ok chrome@108 (windows 10) -> module - when fetch is called with one string argument -> should be equal
ok chrome@108 (windows 10) -> module - when fetch is called with one string argument -> should be equal
ok chrome@108 (windows 10) -> module - when fetch is called with one string argument -> should be equal
ok chrome@108 (windows 10) -> module - when fetch is called with one string argument -> should be equal
ok chrome@108 (windows 10) -> module - when fetch is called with one string argument -> should be truthy
ok chrome@108 (windows 10) -> module - when fetch is called with one string argument -> should be truthy
ok chrome@108 (windows 10) -> module - when fetch is called with one string argument -> should be truthy
ok chrome@108 (windows 10) -> module - when fetch is called with one string argument -> traceparent header should not be present
ok chrome@108 (windows 10) -> module - when fetch is called with one string argument -> tracestate header should not be present
# chrome@108 (windows 10) -> module - when fetch is called with URL string and options arguments
ok chrome@108 (windows 10) -> module - when fetch is called with URL string and options arguments -> newrelic header should be present
ok chrome@108 (windows 10) -> module - when fetch is called with URL string and options arguments -> should be equivalent
ok chrome@108 (windows 10) -> module - when fetch is called with URL string and options arguments -> should be equal
ok chrome@108 (windows 10) -> module - when fetch is called with URL string and options arguments -> should be equal
ok chrome@108 (windows 10) -> module - when fetch is called with URL string and options arguments -> should be equal
ok chrome@108 (windows 10) -> module - when fetch is called with URL string and options arguments -> should be equal
ok chrome@108 (windows 10) -> module - when fetch is called with URL string and options arguments -> should be truthy
ok chrome@108 (windows 10) -> module - when fetch is called with URL string and options arguments -> should be truthy
ok chrome@108 (windows 10) -> module - when fetch is called with URL string and options arguments -> should be truthy
ok chrome@108 (windows 10) -> module - when fetch is called with URL string and options arguments -> traceparent header should not be present
ok chrome@108 (windows 10) -> module - when fetch is called with URL string and options arguments -> tracestate header should not be present
# chrome@108 (windows 10) -> module - when fetch is called with a Request argument
ok chrome@108 (windows 10) -> module - when fetch is called with a Request argument -> newrelic header should be present
ok chrome@108 (windows 10) -> module - when fetch is called with a Request argument -> should be equivalent
ok chrome@108 (windows 10) -> module - when fetch is called with a Request argument -> should be equal
ok chrome@108 (windows 10) -> module - when fetch is called with a Request argument -> should be equal
ok chrome@108 (windows 10) -> module - when fetch is called with a Request argument -> should be equal
ok chrome@108 (windows 10) -> module - when fetch is called with a Request argument -> should be equal
ok chrome@108 (windows 10) -> module - when fetch is called with a Request argument -> should be truthy
ok chrome@108 (windows 10) -> module - when fetch is called with a Request argument -> should be truthy
ok chrome@108 (windows 10) -> module - when fetch is called with a Request argument -> should be truthy
ok chrome@108 (windows 10) -> module - when fetch is called with a Request argument -> traceparent header should not be present
ok chrome@108 (windows 10) -> module - when fetch is called with a Request argument -> tracestate header should not be present
# chrome@108 (windows 10) -> module - when fetch is called with a URL object argument
ok chrome@108 (windows 10) -> module - when fetch is called with a URL object argument -> newrelic header should be present
ok chrome@108 (windows 10) -> module - when fetch is called with a URL object argument -> should be equivalent
ok chrome@108 (windows 10) -> module - when fetch is called with a URL object argument -> should be equal
ok chrome@108 (windows 10) -> module - when fetch is called with a URL object argument -> should be equal
ok chrome@108 (windows 10) -> module - when fetch is called with a URL object argument -> should be equal
ok chrome@108 (windows 10) -> module - when fetch is called with a URL object argument -> should be equal
ok chrome@108 (windows 10) -> module - when fetch is called with a URL object argument -> should be truthy
ok chrome@108 (windows 10) -> module - when fetch is called with a URL object argument -> should be truthy
ok chrome@108 (windows 10) -> module - when fetch is called with a URL object argument -> should be truthy
ok chrome@108 (windows 10) -> module - when fetch is called with a URL object argument -> traceparent header should not be present
ok chrome@108 (windows 10) -> module - SyntaxError generates and sends an error object -> Should have correct custom attributes
# chrome@108 (windows 10) -> classic - an error has a custom attribute if setCustomAttribute() is called
ok chrome@108 (windows 10) -> classic - an error has a custom attribute if setCustomAttribute() is called -> exactly one error
ok chrome@108 (windows 10) -> classic - an error has a custom attribute if setCustomAttribute() is called -> has the expected message
ok chrome@108 (windows 10) -> module - max call stack size generates and sends an error object -> Should have correct custom attributes
# chrome@108 (windows 10) -> module - an error has a custom attribute if setCustomAttribute() is called
ok chrome@108 (windows 10) -> module - an error has a custom attribute if setCustomAttribute() is called -> exactly one error
ok chrome@108 (windows 10) -> module - an error has a custom attribute if setCustomAttribute() is called -> has the expected message
ok chrome@108 (windows 10) -> module - a circular reference error generates and sends an error object -> has the expected message
# chrome@108 (windows 10) -> module - an error in eventListener is noticed and harvested
ok chrome@108 (windows 10) -> module - an error in eventListener is noticed and harvested -> exactly one error
ok chrome@108 (windows 10) -> module - an error in eventListener is noticed and harvested -> Should have seen 1 error
ok chrome@108 (windows 10) -> module - an error in eventListener is noticed and harvested -> Should have a valid timestamp
ok chrome@108 (windows 10) -> module - an error in eventListener is noticed and harvested -> Should be Error class
ok chrome@108 (windows 10) -> module - an error in eventListener is noticed and harvested -> Should have correct message
ok chrome@108 (windows 10) -> classic - a circular reference error generates and sends an error object -> has the expected message
# chrome@108 (windows 10) -> classic - an error in eventListener is noticed and harvested
ok chrome@108 (windows 10) -> classic - an error in eventListener is noticed and harvested -> exactly one error
ok chrome@108 (windows 10) -> classic - an error in eventListener is noticed and harvested -> Should have seen 1 error
ok chrome@108 (windows 10) -> classic - an error in eventListener is noticed and harvested -> Should have a valid timestamp
ok chrome@108 (windows 10) -> classic - an error in eventListener is noticed and harvested -> Should be Error class
ok chrome@108 (windows 10) -> classic - an error in eventListener is noticed and harvested -> Should have correct message
ok chrome@108 (windows 10) -> classic - when fetch is called with a URL object argument -> tracestate header should not be present
# chrome@108 (windows 10) -> classic - an external JS import that throws an error generates and sends an error object
ok chrome@108 (windows 10) -> classic - an external JS import that throws an error generates and sends an error object -> Should have 1 error obj
ok chrome@108 (windows 10) -> classic - an external JS import that throws an error generates and sends an error object -> Should have seen 1 error
ok chrome@108 (windows 10) -> classic - an external JS import that throws an error generates and sends an error object -> Should have a valid timestamp
ok chrome@108 (windows 10) -> classic - an external JS import that throws an error generates and sends an error object -> Should be Error class
ok chrome@108 (windows 10) -> classic - an external JS import that throws an error generates and sends an error object -> Should have correct message
ok chrome@108 (windows 10) -> classic - an external JS import that throws an error generates and sends an error object -> Should have a stack trace
ok chrome@108 (windows 10) -> classic - buffered events are sent at end-of-life aka worker closing -> ins harvest is a POST
# chrome@108 (windows 10) -> module - an external JS import that throws an error generates and sends an error object
ok chrome@108 (windows 10) -> module - an external JS import that throws an error generates and sends an error object -> Should have 1 error obj
ok chrome@108 (windows 10) -> module - an external JS import that throws an error generates and sends an error object -> Should have seen 1 error
ok chrome@108 (windows 10) -> module - an external JS import that throws an error generates and sends an error object -> Should have a valid timestamp
ok chrome@108 (windows 10) -> module - an external JS import that throws an error generates and sends an error object -> Should be Error class
ok chrome@108 (windows 10) -> module - an external JS import that throws an error generates and sends an error object -> Should have correct message
ok chrome@108 (windows 10) -> module - an external JS import that throws an error generates and sends an error object -> Should have a stack trace
ok chrome@108 (windows 10) -> window load timing for spa agent includes custom attributes -> custom PageViewTiming attribute has the expected value
# chrome@108 (windows 10) -> module - capturing large payload of XHR ajax events
# chrome@108 (windows 10) -> module - if server returns 429, errors are stored and retried
ok chrome@108 (windows 10) -> module - if server returns 429, errors are stored and retried -> server responded with 429
ok chrome@108 (windows 10) -> module - if server returns 429, errors are stored and retried -> exactly one error
ok chrome@108 (windows 10) -> module - if server returns 429, errors are stored and retried -> Should have seen 1 error
ok chrome@108 (windows 10) -> module - if server returns 429, errors are stored and retried -> Should have a valid timestamp
ok chrome@108 (windows 10) -> module - if server returns 429, errors are stored and retried -> Should be Error class
ok chrome@108 (windows 10) -> module - if server returns 429, errors are stored and retried -> Should have correct message
ok chrome@108 (windows 10) -> module - URIError generates and sends an error object -> Should have correct custom attributes
# chrome@108 (windows 10) -> classic - if server returns 429, errors are stored and retried
ok chrome@108 (windows 10) -> classic - if server returns 429, errors are stored and retried -> server responded with 429
ok chrome@108 (windows 10) -> classic - if server returns 429, errors are stored and retried -> exactly one error
ok chrome@108 (windows 10) -> classic - if server returns 429, errors are stored and retried -> Should have seen 1 error
ok chrome@108 (windows 10) -> classic - if server returns 429, errors are stored and retried -> Should have a valid timestamp
ok chrome@108 (windows 10) -> classic - if server returns 429, errors are stored and retried -> Should be Error class
ok chrome@108 (windows 10) -> classic - if server returns 429, errors are stored and retried -> Should have correct message
ok chrome@108 (windows 10) -> classic - an error has a custom attribute if setCustomAttribute() is called -> Should have correct custom attributes
# chrome@108 (windows 10) -> classic - noticeError generates and sends an error object
ok chrome@108 (windows 10) -> classic - noticeError generates and sends an error object -> Should have 1 error obj
ok chrome@108 (windows 10) -> classic - noticeError generates and sends an error object -> Should have seen 1 error
ok chrome@108 (windows 10) -> classic - noticeError generates and sends an error object -> Should have a valid timestamp
ok chrome@108 (windows 10) -> classic - noticeError generates and sends an error object -> Should be Error class
ok chrome@108 (windows 10) -> classic - noticeError generates and sends an error object -> Should have correct message
ok chrome@108 (windows 10) -> classic - noticeError generates and sends an error object -> Should have a stack trace
ok chrome@108 (windows 10) -> module - an error has a custom attribute if setCustomAttribute() is called -> Should have correct custom attributes
# chrome@108 (windows 10) -> classic - noticeError works with string argument
ok chrome@108 (windows 10) -> classic - noticeError works with string argument -> Should have 1 error obj
ok chrome@108 (windows 10) -> classic - noticeError works with string argument -> Should have seen 1 error
ok chrome@108 (windows 10) -> classic - noticeError works with string argument -> Should have a valid timestamp
ok chrome@108 (windows 10) -> classic - noticeError works with string argument -> Should be Error class
ok chrome@108 (windows 10) -> classic - noticeError works with string argument -> Should have correct message
ok chrome@108 (windows 10) -> classic - noticeError works with string argument -> Should have a stack trace
ok chrome@108 (windows 10) -> classic - noticeError generates and sends an error object -> Should not have correct custom attributes
# chrome@108 (windows 10) -> classic - addPageAction sends PA event
ok chrome@108 (windows 10) -> classic - addPageAction sends PA event -> first PageAction submission is a POST
ok chrome@108 (windows 10) -> classic - addPageAction sends PA event -> query string does not include ins parameter
ok chrome@108 (windows 10) -> classic - addPageAction sends PA event -> should have 1 event
ok chrome@108 (windows 10) -> classic - addPageAction sends PA event -> event has correct action name
ok chrome@108 (windows 10) -> classic - addPageAction sends PA event -> event has free tacos
ok chrome@108 (windows 10) -> classic - addPageAction sends PA event -> harvest time (16) should always be bigger than event time (15)
ok chrome@108 (windows 10) -> module - an error in eventListener is noticed and harvested -> Should have a stack trace
# chrome@108 (windows 10) -> classic - noticeError generates and sends an error object with custom params
ok chrome@108 (windows 10) -> classic - noticeError generates and sends an error object with custom params -> Should have 1 error obj
ok chrome@108 (windows 10) -> classic - noticeError generates and sends an error object with custom params -> Should have seen 1 error
ok chrome@108 (windows 10) -> classic - noticeError generates and sends an error object with custom params -> Should have a valid timestamp
ok chrome@108 (windows 10) -> classic - noticeError generates and sends an error object with custom params -> Should be Error class
ok chrome@108 (windows 10) -> classic - noticeError generates and sends an error object with custom params -> Should have correct message
ok chrome@108 (windows 10) -> classic - noticeError generates and sends an error object with custom params -> Should have a stack trace
ok chrome@108 (windows 10) -> classic - when fetch is called with a URL object argument -> tracestate header should not be present
# chrome@108 (windows 10) -> classic - a valid obfuscationRule creates detected supportability metric
ok chrome@108 (windows 10) -> classic - a valid obfuscationRule creates detected supportability metric -> SupportabilityMetrics object(s) were generated
ok chrome@108 (windows 10) -> classic - a valid obfuscationRule creates detected supportability metric -> Generic/Version/1221.LOCAL/Detected contains correct name
ok chrome@108 (windows 10) -> classic - a valid obfuscationRule creates detected supportability metric -> Generic/Obfuscate/Detected contains correct name
ok chrome@108 (windows 10) -> classic - a valid obfuscationRule creates detected supportability metric -> API/addPageAction/called contains correct name
ok chrome@108 (windows 10) -> classic - disabled jserrors should not generate errors -> Did not generate "error" payload
# chrome@108 (windows 10) -> classic - Calling a newrelic[api] fn creates a supportability metric
ok chrome@108 (windows 10) -> classic - Calling a newrelic[api] fn creates a supportability metric -> SupportabilityMetrics object(s) were generated
ok chrome@108 (windows 10) -> classic - Calling a newrelic[api] fn creates a supportability metric -> CustomMetrics object(s) were generated
ok chrome@108 (windows 10) -> classic - Calling a newrelic[api] fn creates a supportability metric -> Generic/Version/1221.LOCAL/Detected count was incremented by 1
ok chrome@108 (windows 10) -> classic - Calling a newrelic[api] fn creates a supportability metric -> API/noticeError/called count was incremented by 1
ok chrome@108 (windows 10) -> classic - Calling a newrelic[api] fn creates a supportability metric -> API/setPageViewName/called count was incremented by 1 until reached 5
ok chrome@108 (windows 10) -> classic - Calling a newrelic[api] fn creates a supportability metric -> API/setCustomAttribute/called count was incremented by 1
ok chrome@108 (windows 10) -> classic - Calling a newrelic[api] fn creates a supportability metric -> API/setErrorHandler/called count was incremented by 1
ok chrome@108 (windows 10) -> classic - Calling a newrelic[api] fn creates a supportability metric -> API/finished/called count was incremented by 1
ok chrome@108 (windows 10) -> classic - Calling a newrelic[api] fn creates a supportability metric -> API/addToTrace/called count was incremented by 1
ok chrome@108 (windows 10) -> classic - Calling a newrelic[api] fn creates a supportability metric -> API/addRelease/called count was incremented by 1
ok chrome@108 (windows 10) -> classic - Calling a newrelic[api] fn creates a supportability metric -> Saw all asyncApiFns
ok chrome@108 (windows 10) -> classic - an error in eventListener is noticed and harvested -> Should have a stack trace
# chrome@108 (windows 10) -> classic - multiple matching errors are aggregated
ok chrome@108 (windows 10) -> classic - multiple matching errors are aggregated -> Should have 1 error obj
ok chrome@108 (windows 10) -> module - buffered events are sent at end-of-life aka worker closing -> ins harvest is a POST
# chrome@108 (windows 10) -> classic - invalid obfuscation rule #1 creates invalid supportability metric
ok chrome@108 (windows 10) -> classic - invalid obfuscation rule #1 creates invalid supportability metric -> SupportabilityMetrics object(s) were generated
ok chrome@108 (windows 10) -> classic - an external JS import that throws an error generates and sends an error object -> Should have correct custom attributes
# chrome@108 (windows 10) -> module - noticeError generates and sends an error object
ok chrome@108 (windows 10) -> module - noticeError generates and sends an error object -> Should have 1 error obj
ok chrome@108 (windows 10) -> module - noticeError generates and sends an error object -> Should have seen 1 error
ok chrome@108 (windows 10) -> module - noticeError generates and sends an error object -> Should have a valid timestamp
ok chrome@108 (windows 10) -> module - noticeError generates and sends an error object -> Should be Error class
ok chrome@108 (windows 10) -> module - noticeError generates and sends an error object -> Should have correct message
ok chrome@108 (windows 10) -> module - noticeError generates and sends an error object -> Should have a stack trace
ok chrome@108 (windows 10) -> classic - when fetch is called with a URL object argument -> tracestate header should not be present
# chrome@108 (windows 10) -> classic - invalid obfuscation rule #3 creates invalid supportability metric
ok chrome@108 (windows 10) -> classic - invalid obfuscation rule #3 creates invalid supportability metric -> SupportabilityMetrics object(s) were generated
ok chrome@108 (windows 10) -> classic - when fetch is called with a URL object argument -> timestamp is there
# chrome@108 (windows 10) -> classic - invalid obfuscation rule #2 creates invalid supportability metric
ok chrome@108 (windows 10) -> classic - invalid obfuscation rule #2 creates invalid supportability metric -> SupportabilityMetrics object(s) were generated
ok chrome@108 (windows 10) -> module - when fetch is called with a URL object argument -> tracestate header should not be present
# chrome@108 (windows 10) -> classic - workers creation generates sm
ok chrome@108 (windows 10) -> classic - workers creation generates sm -> 3 SupportabilityMetrics object(s) were generated
ok chrome@108 (windows 10) -> classic - workers creation generates sm -> nested classic worker is available
ok chrome@108 (windows 10) -> classic - workers creation generates sm -> nested module worker is available
ok chrome@108 (windows 10) -> classic - workers creation generates sm -> nested classic or module sharedworker is not avail
ok chrome@108 (windows 10) -> classic - workers creation generates sm -> sharedworker supportability should not be emitted by or within a worker
ok chrome@108 (windows 10) -> classic - workers creation generates sm -> nested classic or module serviceworker is not avail
ok chrome@108 (windows 10) -> module - an external JS import that throws an error generates and sends an error object -> Should have correct custom attributes
# chrome@108 (windows 10) -> module - noticeError works with string argument
ok chrome@108 (windows 10) -> module - noticeError works with string argument -> Should have 1 error obj
ok chrome@108 (windows 10) -> module - noticeError works with string argument -> Should have seen 1 error
ok chrome@108 (windows 10) -> module - noticeError works with string argument -> Should have a valid timestamp
ok chrome@108 (windows 10) -> module - noticeError works with string argument -> Should be Error class
ok chrome@108 (windows 10) -> module - noticeError works with string argument -> Should have correct message
ok chrome@108 (windows 10) -> module - noticeError works with string argument -> Should have a stack trace
ok chrome@108 (windows 10) -> classic - addPageAction sends PA event -> estimated event time (215661173) < receipt time (215661174)
# chrome@108 (windows 10) -> classic - addPageAction has precedence over custom attributes
ok chrome@108 (windows 10) -> classic - addPageAction has precedence over custom attributes -> should have 1 event
ok chrome@108 (windows 10) -> classic - addPageAction has precedence over custom attributes -> event has correct action name
ok chrome@108 (windows 10) -> classic - addPageAction has precedence over custom attributes -> defaults has correct precedence
ok chrome@108 (windows 10) -> classic - addPageAction has precedence over custom attributes -> att has correct precedence
ok chrome@108 (windows 10) -> classic - addPageAction has precedence over custom attributes -> attributes has correct precedence
ok chrome@108 (windows 10) -> module - when fetch is called with a URL object argument -> tracestate header should not be present
# chrome@108 (windows 10) -> module - invalid obfuscation rule #1 creates invalid supportability metric
ok chrome@108 (windows 10) -> module - invalid obfuscation rule #1 creates invalid supportability metric -> SupportabilityMetrics object(s) were generated
ok chrome@108 (windows 10) -> module - when fetch is called with a URL object argument -> tracestate header should not be present
# chrome@108 (windows 10) -> module - Calling a newrelic[api] fn creates a supportability metric
ok chrome@108 (windows 10) -> module - Calling a newrelic[api] fn creates a supportability metric -> SupportabilityMetrics object(s) were generated
ok chrome@108 (windows 10) -> module - Calling a newrelic[api] fn creates a supportability metric -> CustomMetrics object(s) were generated
ok chrome@108 (windows 10) -> module - Calling a newrelic[api] fn creates a supportability metric -> Generic/Version/1221.LOCAL/Detected count was incremented by 1
ok chrome@108 (windows 10) -> module - Calling a newrelic[api] fn creates a supportability metric -> API/noticeError/called count was incremented by 1
ok chrome@108 (windows 10) -> module - Calling a newrelic[api] fn creates a supportability metric -> API/setPageViewName/called count was incremented by 1 until reached 5
ok chrome@108 (windows 10) -> module - Calling a newrelic[api] fn creates a supportability metric -> API/setCustomAttribute/called count was incremented by 1
ok chrome@108 (windows 10) -> module - Calling a newrelic[api] fn creates a supportability metric -> API/setErrorHandler/called count was incremented by 1
ok chrome@108 (windows 10) -> module - Calling a newrelic[api] fn creates a supportability metric -> API/finished/called count was incremented by 1
ok chrome@108 (windows 10) -> module - Calling a newrelic[api] fn creates a supportability metric -> API/addToTrace/called count was incremented by 1
ok chrome@108 (windows 10) -> module - Calling a newrelic[api] fn creates a supportability metric -> API/addRelease/called count was incremented by 1
ok chrome@108 (windows 10) -> module - Calling a newrelic[api] fn creates a supportability metric -> Saw all asyncApiFns
ok chrome@108 (windows 10) -> module - disabled jserrors should not generate errors -> Did not generate "error" payload
# chrome@108 (windows 10) -> module - a valid obfuscationRule creates detected supportability metric
ok chrome@108 (windows 10) -> module - a valid obfuscationRule creates detected supportability metric -> SupportabilityMetrics object(s) were generated
ok chrome@108 (windows 10) -> module - a valid obfuscationRule creates detected supportability metric -> Generic/Version/1221.LOCAL/Detected contains correct name
ok chrome@108 (windows 10) -> module - a valid obfuscationRule creates detected supportability metric -> Generic/Obfuscate/Detected contains correct name
ok chrome@108 (windows 10) -> module - a valid obfuscationRule creates detected supportability metric -> API/addPageAction/called contains correct name
ok chrome@108 (windows 10) -> classic - when fetch is called with a URL object argument -> tracestate header should not be present
# chrome@108 (windows 10) -> module - invalid obfuscation rule #2 creates invalid supportability metric
ok chrome@108 (windows 10) -> module - invalid obfuscation rule #2 creates invalid supportability metric -> SupportabilityMetrics object(s) were generated
ok chrome@108 (windows 10) -> module - when fetch is called with a URL object argument -> timestamp is there
# chrome@108 (windows 10) -> module - invalid obfuscation rule #3 creates invalid supportability metric
ok chrome@108 (windows 10) -> module - invalid obfuscation rule #3 creates invalid supportability metric -> SupportabilityMetrics object(s) were generated
ok chrome@108 (windows 10) -> module - when fetch is called with a URL object argument -> tracestate header should not be present
# chrome@108 (windows 10) -> module - workers creation generates sm
ok chrome@108 (windows 10) -> module - workers creation generates sm -> 3 SupportabilityMetrics object(s) were generated
ok chrome@108 (windows 10) -> module - workers creation generates sm -> nested classic worker is available
ok chrome@108 (windows 10) -> module - workers creation generates sm -> nested module worker is available
ok chrome@108 (windows 10) -> module - workers creation generates sm -> nested classic or module sharedworker is not avail
ok chrome@108 (windows 10) -> module - workers creation generates sm -> sharedworker supportability should not be emitted by or within a worker
ok chrome@108 (windows 10) -> module - workers creation generates sm -> nested classic or module serviceworker is not avail
ok chrome@108 (windows 10) -> classic - noticeError works with string argument -> Should not have correct custom attributes
# chrome@108 (windows 10) -> classic - PageActions are retried when collector returns 429
ok chrome@108 (windows 10) -> classic - PageActions are retried when collector returns 429 -> server responded with 429
ok chrome@108 (windows 10) -> classic - PageActions are retried when collector returns 429 -> server responded with 200
ok chrome@108 (windows 10) -> classic - PageActions are retried when collector returns 429 -> post body in retry harvest should be the same as in the first harvest
ok chrome@108 (windows 10) -> module - if server returns 429, errors are stored and retried -> Should have a stack trace
# chrome@108 (windows 10) -> module - noticeError generates and sends an error object with custom params
ok chrome@108 (windows 10) -> module - noticeError generates and sends an error object with custom params -> Should have 1 error obj
ok chrome@108 (windows 10) -> module - noticeError generates and sends an error object with custom params -> Should have seen 1 error
ok chrome@108 (windows 10) -> module - noticeError generates and sends an error object with custom params -> Should have a valid timestamp
ok chrome@108 (windows 10) -> module - noticeError generates and sends an error object with custom params -> Should be Error class
ok chrome@108 (windows 10) -> module - noticeError generates and sends an error object with custom params -> Should have correct message
ok chrome@108 (windows 10) -> module - noticeError generates and sends an error object with custom params -> Should have a stack trace
ok chrome@108 (windows 10) -> classic - if server returns 429, errors are stored and retried -> Should have a stack trace
# chrome@108 (windows 10) -> module - multiple matching errors are aggregated
ok chrome@108 (windows 10) -> module - multiple matching errors are aggregated -> Should have 1 error obj
ok chrome@108 (windows 10) -> module - workers creation generates sm -> serviceworker supportability should not be emitted by or within a worker
# chrome@108 (windows 10) -> module - does not set CAT headers on outbound XHRs to different origin
ok chrome@108 (windows 10) -> module - invalid obfuscation rule #1 creates invalid supportability metric -> an invalid regex rule detected
# chrome@108 (windows 10) -> classic - does not set CAT headers on outbound XHRs to different origin
ok chrome@108 (windows 10) -> classic - a valid obfuscationRule creates detected supportability metric -> API/setCustomAttribute/called contains correct name
# chrome@108 (windows 10) -> module - PageActions are retried when collector returns 429
ok chrome@108 (windows 10) -> module - PageActions are retried when collector returns 429 -> server responded with 429
ok chrome@108 (windows 10) -> module - PageActions are retried when collector returns 429 -> server responded with 200
ok chrome@108 (windows 10) -> module - PageActions are retried when collector returns 429 -> post body in retry harvest should be the same as in the first harvest
ok chrome@108 (windows 10) -> classic - noticeError generates and sends an error object with custom params -> Should have correct custom attributes
# chrome@108 (windows 10) -> module - addPageAction sends PA event
ok chrome@108 (windows 10) -> module - addPageAction sends PA event -> first PageAction submission is a POST
ok chrome@108 (windows 10) -> module - addPageAction sends PA event -> query string does not include ins parameter
ok chrome@108 (windows 10) -> module - addPageAction sends PA event -> should have 1 event
ok chrome@108 (windows 10) -> module - addPageAction sends PA event -> event has correct action name
ok chrome@108 (windows 10) -> module - addPageAction sends PA event -> event has free tacos
ok chrome@108 (windows 10) -> module - addPageAction sends PA event -> harvest time (5025) should always be bigger than event time (17)
ok chrome@108 (windows 10) -> classic - invalid obfuscation rule #1 creates invalid supportability metric -> an invalid regex rule detected
# chrome@108 (windows 10) -> module - setErrorHandler ignores error
ok chrome@108 (windows 10) -> module - setErrorHandler ignores error -> pageViewErr reported
ok chrome@108 (windows 10) -> module - setErrorHandler ignores error -> exactly one error
ok chrome@108 (windows 10) -> module - setErrorHandler ignores error -> Should have seen 1 error
ok chrome@108 (windows 10) -> module - setErrorHandler ignores error -> Should have a valid timestamp
ok chrome@108 (windows 10) -> module - setErrorHandler ignores error -> Should be Error class
ok chrome@108 (windows 10) -> module - setErrorHandler ignores error -> Should have correct message
ok chrome@108 (windows 10) -> classic - multiple matching errors are aggregated -> Should have aggregated 3 errors
# chrome@108 (windows 10) -> classic - setErrorHandler ignores error
ok chrome@108 (windows 10) -> classic - setErrorHandler ignores error -> pageViewErr reported
ok chrome@108 (windows 10) -> classic - setErrorHandler ignores error -> exactly one error
ok chrome@108 (windows 10) -> classic - setErrorHandler ignores error -> Should have seen 1 error
ok chrome@108 (windows 10) -> classic - setErrorHandler ignores error -> Should have a valid timestamp
ok chrome@108 (windows 10) -> classic - setErrorHandler ignores error -> Should be Error class
ok chrome@108 (windows 10) -> classic - setErrorHandler ignores error -> Should have correct message
ok chrome@108 (windows 10) -> classic - Calling a newrelic[api] fn creates a supportability metric -> a `Finished` Custom Metric (cm) was also generated
# chrome@108 (windows 10) -> module - addPageAction has precedence over custom attributes
ok chrome@108 (windows 10) -> module - addPageAction has precedence over custom attributes -> should have 1 event
ok chrome@108 (windows 10) -> module - addPageAction has precedence over custom attributes -> event has correct action name
ok chrome@108 (windows 10) -> module - addPageAction has precedence over custom attributes -> defaults has correct precedence
ok chrome@108 (windows 10) -> module - addPageAction has precedence over custom attributes -> att has correct precedence
ok chrome@108 (windows 10) -> module - addPageAction has precedence over custom attributes -> attributes has correct precedence
ok chrome@108 (windows 10) -> module - noticeError generates and sends an error object -> Should not have correct custom attributes
# chrome@108 (windows 10) -> classic - an error in setInterval is noticed and harvested
ok chrome@108 (windows 10) -> classic - an error in setInterval is noticed and harvested -> exactly one error
ok chrome@108 (windows 10) -> classic - an error in setInterval is noticed and harvested -> Should have seen 1 error
ok chrome@108 (windows 10) -> classic - an error in setInterval is noticed and harvested -> Should have a valid timestamp
ok chrome@108 (windows 10) -> classic - an error in setInterval is noticed and harvested -> Should be Error class
ok chrome@108 (windows 10) -> classic - an error in setInterval is noticed and harvested -> Should have correct message
ok chrome@108 (windows 10) -> classic - invalid obfuscation rule #3 creates invalid supportability metric -> an invalid regex rule detected
# chrome@108 (windows 10) -> module - an error in setInterval is noticed and harvested
ok chrome@108 (windows 10) -> module - an error in setInterval is noticed and harvested -> exactly one error
ok chrome@108 (windows 10) -> module - an error in setInterval is noticed and harvested -> Should have seen 1 error
ok chrome@108 (windows 10) -> module - an error in setInterval is noticed and harvested -> Should have a valid timestamp
ok chrome@108 (windows 10) -> module - an error in setInterval is noticed and harvested -> Should be Error class
ok chrome@108 (windows 10) -> module - an error in setInterval is noticed and harvested -> Should have correct message
ok chrome@108 (windows 10) -> classic - invalid obfuscation rule #2 creates invalid supportability metric -> an invalid regex rule detected
# chrome@108 (windows 10) -> classic - an error in setTimeout is noticed and harvested
ok chrome@108 (windows 10) -> classic - an error in setTimeout is noticed and harvested -> exactly one error
ok chrome@108 (windows 10) -> classic - an error in setTimeout is noticed and harvested -> Should have seen 1 error
ok chrome@108 (windows 10) -> classic - an error in setTimeout is noticed and harvested -> Should have a valid timestamp
ok chrome@108 (windows 10) -> classic - an error in setTimeout is noticed and harvested -> Should be Error class
ok chrome@108 (windows 10) -> classic - an error in setTimeout is noticed and harvested -> Should have correct message
ok chrome@108 (windows 10) -> classic - workers creation generates sm -> serviceworker supportability should not be emitted by or within a worker
# chrome@108 (windows 10) -> module - an error in setTimeout is noticed and harvested
ok chrome@108 (windows 10) -> module - an error in setTimeout is noticed and harvested -> exactly one error
ok chrome@108 (windows 10) -> module - an error in setTimeout is noticed and harvested -> Should have seen 1 error
ok chrome@108 (windows 10) -> module - an error in setTimeout is noticed and harvested -> Should have a valid timestamp
ok chrome@108 (windows 10) -> module - an error in setTimeout is noticed and harvested -> Should be Error class
ok chrome@108 (windows 10) -> module - an error in setTimeout is noticed and harvested -> Should have correct message
ok chrome@108 (windows 10) -> module - multiple matching errors are aggregated -> Should have aggregated 3 errors
# chrome@108 (windows 10) -> classic - an error in xhr callback is noticed and harvested
ok chrome@108 (windows 10) -> classic - an error in xhr callback is noticed and harvested -> exactly one error
ok chrome@108 (windows 10) -> classic - an error in xhr callback is noticed and harvested -> Should have seen 1 error
ok chrome@108 (windows 10) -> classic - an error in xhr callback is noticed and harvested -> Should have a valid timestamp
ok chrome@108 (windows 10) -> classic - an error in xhr callback is noticed and harvested -> Should be Error class
ok chrome@108 (windows 10) -> classic - an error in xhr callback is noticed and harvested -> Should have correct message
ok chrome@108 (windows 10) -> module - does not set CAT headers on outbound XHRs to different origin -> cross-origin XHR should not have CAT header
# chrome@108 (windows 10) -> classic - capturing XHR metrics
ok chrome@108 (windows 10) -> classic - capturing XHR metrics -> XHR data submitted via POST request from sendBeacon
ok chrome@108 (windows 10) -> classic - capturing XHR metrics -> request body should not be empty
ok chrome@108 (windows 10) -> classic - capturing XHR metrics -> has xhr data
ok chrome@108 (windows 10) -> classic - capturing XHR metrics -> has at least one XHR record
ok chrome@108 (windows 10) -> classic - does not set CAT headers on outbound XHRs to different origin -> cross-origin XHR should not have CAT header
# chrome@108 (windows 10) -> classic - capturing fetch metrics
ok chrome@108 (windows 10) -> classic - capturing fetch metrics -> XHR data submitted via POST request from sendBeacon
ok chrome@108 (windows 10) -> classic - capturing fetch metrics -> request body should not be empty
ok chrome@108 (windows 10) -> classic - capturing fetch metrics -> has xhr data
ok chrome@108 (windows 10) -> classic - setErrorHandler ignores error -> Should have a stack trace
# chrome@108 (windows 10) -> xhr instrumentation works with EventTarget.prototype.addEventListener patched
ok chrome@108 (windows 10) -> classic - capturing XHR metrics -> XHR record has correct keys
# chrome@108 (windows 10) -> does not set CAT headers on outbound XHRs to different origin
ok chrome@108 (windows 10) -> module - PageActions are retried when collector returns 429 -> got two ins harvest requests
# chrome@108 (windows 10) -> module - an error in xhr callback is noticed and harvested
ok chrome@108 (windows 10) -> module - an error in xhr callback is noticed and harvested -> exactly one error
ok chrome@108 (windows 10) -> module - an error in xhr callback is noticed and harvested -> Should have seen 1 error
ok chrome@108 (windows 10) -> module - an error in xhr callback is noticed and harvested -> Should have a valid timestamp
ok chrome@108 (windows 10) -> module - an error in xhr callback is noticed and harvested -> Should be Error class
ok chrome@108 (windows 10) -> module - an error in xhr callback is noticed and harvested -> Should have correct message
ok chrome@108 (windows 10) -> module - addPageAction sends PA event -> estimated event time (215663588) < receipt time (215668596)
# chrome@108 (windows 10) -> module - capturing XHR metrics
ok chrome@108 (windows 10) -> module - capturing XHR metrics -> XHR data submitted via POST request from sendBeacon
ok chrome@108 (windows 10) -> module - capturing XHR metrics -> request body should not be empty
ok chrome@108 (windows 10) -> module - capturing XHR metrics -> has xhr data
ok chrome@108 (windows 10) -> module - capturing XHR metrics -> has at least one XHR record
ok chrome@108 (windows 10) -> module - setErrorHandler ignores error -> Should have a stack trace
# chrome@108 (windows 10) -> module - capturing fetch metrics
ok chrome@108 (windows 10) -> module - capturing fetch metrics -> XHR data submitted via POST request from sendBeacon
ok chrome@108 (windows 10) -> module - capturing fetch metrics -> request body should not be empty
ok chrome@108 (windows 10) -> module - capturing fetch metrics -> has xhr data
ok chrome@108 (windows 10) -> classic - an error in setInterval is noticed and harvested -> Should have a stack trace
# chrome@108 (windows 10) -> capturing XHR ajax events
ok chrome@108 (windows 10) -> classic - capturing fetch metrics -> XHR record has correct keys
# chrome@108 (windows 10) -> xhr instrumentation works with bad XHR constructor monkey-patch
ok chrome@108 (windows 10) -> module - Calling a newrelic[api] fn creates a supportability metric -> a `Finished` Custom Metric (cm) was also generated
# chrome@108 (windows 10) -> classic - ajax events harvests are retried when collector returns 429
# chrome@108 (windows 10) -> classic - ajax events harvests are retried when collector returns 429 (retry 1)
ok chrome@108 (windows 10) -> classic - ajax events harvests are retried when collector returns 429 (retry 1) -> server responded with 429
ok chrome@108 (windows 10) -> classic - ajax events harvests are retried when collector returns 429 (retry 1) -> server responded with 200
ok chrome@108 (windows 10) -> classic - ajax events harvests are retried when collector returns 429 (retry 1) -> second body should include the contents of the first retried harvest
ok chrome@108 (windows 10) -> classic - an error in setTimeout is noticed and harvested -> Should have a stack trace
# chrome@108 (windows 10) -> capturing Fetch ajax events
ok chrome@108 (windows 10) -> module - an error in setTimeout is noticed and harvested -> Should have a stack trace
# chrome@108 (windows 10) -> Distributed Tracing info is added to XHR ajax events
ok chrome@108 (windows 10) -> Distributed Tracing info is added to XHR ajax events -> XMLHttpRequest ajax event was harvested
ok chrome@108 (windows 10) -> Distributed Tracing info is added to XHR ajax events -> should be a non-empty guid string
ok chrome@108 (windows 10) -> Distributed Tracing info is added to XHR ajax events -> should be a non-empty traceId string
ok chrome@108 (windows 10) -> module - noticeError works with string argument -> Should not have correct custom attributes
# chrome@108 (windows 10) -> classic - xhr instrumentation works with EventTarget.prototype.addEventListener patched
ok chrome@108 (windows 10) -> classic - addPageAction has precedence over custom attributes -> custom member of attributes passed through
# chrome@108 (windows 10) -> classic - xhr instrumentation works with bad XHR constructor monkey-patch
ok chrome@108 (windows 10) -> module - invalid obfuscation rule #3 creates invalid supportability metric -> an invalid regex rule detected
# chrome@108 (windows 10) -> module - xhr instrumentation works with bad XHR constructor monkey-patch
ok chrome@108 (windows 10) -> module - invalid obfuscation rule #2 creates invalid supportability metric -> an invalid regex rule detected
# chrome@108 (windows 10) -> module - xhr instrumentation works with EventTarget.prototype.addEventListener patched
ok chrome@108 (windows 10) -> module - a valid obfuscationRule creates detected supportability metric -> API/setCustomAttribute/called contains correct name
# chrome@108 (windows 10) -> classic - xhr.abort() called in load callback
ok chrome@108 (windows 10) -> classic - xhr.abort() called in load callback -> got XHR data
ok chrome@108 (windows 10) -> classic - xhr.abort() called in load callback -> has at least one XHR record
ok chrome@108 (windows 10) -> classic - xhr.abort() called in load callback -> has xhr with /xhr_with_cat/1 endpoint
ok chrome@108 (windows 10) -> classic - xhr.abort() called in load callback -> has GET method
ok chrome@108 (windows 10) -> classic - xhr.abort() called in load callback -> has a hostname
ok chrome@108 (windows 10) -> classic - xhr.abort() called in load callback -> has status of 200
ok chrome@108 (windows 10) -> classic - xhr.abort() called in load callback -> has CAT data for /xhr_with_cat
ok chrome@108 (windows 10) -> classic - xhr.abort() called in load callback -> has metrics
ok chrome@108 (windows 10) -> classic - xhr.abort() called in load callback -> has one metric count
ok chrome@108 (windows 10) -> classic - xhr.abort() called in load callback -> has duration >= 0
ok chrome@108 (windows 10) -> classic - xhr.abort() called in load callback -> has rxSize of 409
ok chrome@108 (windows 10) -> classic - xhr.abort() called in load callback -> has cbTime >= 0
ok chrome@108 (windows 10) -> module - addPageAction has precedence over custom attributes -> custom member of attributes passed through
# chrome@108 (windows 10) -> Disabled ajax events
ok chrome@108 (windows 10) -> classic - an error in xhr callback is noticed and harvested -> Should have a stack trace
# chrome@108 (windows 10) -> Distributed Tracing info is added to Fetch ajax events
ok chrome@108 (windows 10) -> Distributed Tracing info is added to Fetch ajax events -> Fetch ajax event was harvested
ok chrome@108 (windows 10) -> Distributed Tracing info is added to Fetch ajax events -> should be a non-empty guid string
ok chrome@108 (windows 10) -> Distributed Tracing info is added to Fetch ajax events -> should be a non-empty traceId string
ok chrome@108 (windows 10) -> module - noticeError generates and sends an error object with custom params -> Should have correct custom attributes
# chrome@108 (windows 10) -> module - xhr.abort() called in load callback
ok chrome@108 (windows 10) -> module - xhr.abort() called in load callback -> got XHR data
ok chrome@108 (windows 10) -> module - xhr.abort() called in load callback -> has at least one XHR record
ok chrome@108 (windows 10) -> module - xhr.abort() called in load callback -> has xhr with /xhr_with_cat/1 endpoint
ok chrome@108 (windows 10) -> module - xhr.abort() called in load callback -> has GET method
ok chrome@108 (windows 10) -> module - xhr.abort() called in load callback -> has a hostname
ok chrome@108 (windows 10) -> module - xhr.abort() called in load callback -> has status of 200
ok chrome@108 (windows 10) -> module - xhr.abort() called in load callback -> has CAT data for /xhr_with_cat
ok chrome@108 (windows 10) -> module - xhr.abort() called in load callback -> has metrics
ok chrome@108 (windows 10) -> module - xhr.abort() called in load callback -> has one metric count
ok chrome@108 (windows 10) -> module - xhr.abort() called in load callback -> has duration >= 0
ok chrome@108 (windows 10) -> module - xhr.abort() called in load callback -> has rxSize of 409
ok chrome@108 (windows 10) -> module - xhr.abort() called in load callback -> has cbTime >= 0
# storing failed test for later retry: chrome@108 (windows 10) - module - ajax events harvests are retried when collector returns 429
ok chrome@108 (windows 10) -> classic - xhr.abort() called in load callback -> has time >= 0
# chrome@108 (windows 10) -> XHR request on same origin has DT headers
ok chrome@108 (windows 10) -> XHR request on same origin has DT headers -> newrelic header should be present
ok chrome@108 (windows 10) -> XHR request on same origin has DT headers -> should be equivalent
ok chrome@108 (windows 10) -> XHR request on same origin has DT headers -> should be equal
ok chrome@108 (windows 10) -> XHR request on same origin has DT headers -> should be equal
ok chrome@108 (windows 10) -> XHR request on same origin has DT headers -> should be equal
ok chrome@108 (windows 10) -> XHR request on same origin has DT headers -> should be equal
ok chrome@108 (windows 10) -> XHR request on same origin has DT headers -> should be truthy
ok chrome@108 (windows 10) -> XHR request on same origin has DT headers -> should be truthy
ok chrome@108 (windows 10) -> XHR request on same origin has DT headers -> should be truthy
ok chrome@108 (windows 10) -> XHR request on same origin has DT headers -> parent header should have four parts
ok chrome@108 (windows 10) -> XHR request on same origin has DT headers -> first part should be format version set to 00
ok chrome@108 (windows 10) -> XHR request on same origin has DT headers -> trace ID is there
ok chrome@108 (windows 10) -> XHR request on same origin has DT headers -> span ID is there
ok chrome@108 (windows 10) -> XHR request on same origin has DT headers -> fourth part should be set to sampled flag
ok chrome@108 (windows 10) -> XHR request on same origin has DT headers -> key should be in the right format
ok chrome@108 (windows 10) -> XHR request on same origin has DT headers -> state header should have nine parts
ok chrome@108 (windows 10) -> XHR request on same origin has DT headers -> version is set to 0
ok chrome@108 (windows 10) -> XHR request on same origin has DT headers -> parent type is set to 1 for Browser
ok chrome@108 (windows 10) -> XHR request on same origin has DT headers -> third part is set to account ID
ok chrome@108 (windows 10) -> XHR request on same origin has DT headers -> fourth part is set to app/agent ID
ok chrome@108 (windows 10) -> XHR request on same origin has DT headers -> span ID is there
ok chrome@108 (windows 10) -> XHR request on same origin has DT headers -> fifth part is empty - no transaction in Browser
ok chrome@108 (windows 10) -> XHR request on same origin has DT headers -> fifth part is set to empty to defer sampling decision to next hop
ok chrome@108 (windows 10) -> XHR request on same origin has DT headers -> priority is not set
ok chrome@108 (windows 10) -> Disabled ajax events -> AJAX Promise did not execute because enabled was false
# chrome@108 (windows 10) -> XHR request on same origin has no newrelic header when disabled in configuration
ok chrome@108 (windows 10) -> XHR request on same origin has no newrelic header when disabled in configuration -> newrelic header should not be present
ok chrome@108 (windows 10) -> XHR request on same origin has no newrelic header when disabled in configuration -> traceparent header should be present
ok chrome@108 (windows 10) -> does not set CAT headers on outbound XHRs to different origin -> cross-origin XHR should not have CAT header
# chrome@108 (windows 10) -> headers are added on same origin by default
# chrome@108 (windows 10) -> when fetch is called with one string argument
ok chrome@108 (windows 10) -> when fetch is called with one string argument -> newrelic header should be present
ok chrome@108 (windows 10) -> when fetch is called with one string argument -> should be equivalent
ok chrome@108 (windows 10) -> when fetch is called with one string argument -> should be equal
ok chrome@108 (windows 10) -> when fetch is called with one string argument -> should be equal
ok chrome@108 (windows 10) -> when fetch is called with one string argument -> should be equal
ok chrome@108 (windows 10) -> when fetch is called with one string argument -> should be equal
ok chrome@108 (windows 10) -> when fetch is called with one string argument -> should be truthy
ok chrome@108 (windows 10) -> when fetch is called with one string argument -> should be truthy
ok chrome@108 (windows 10) -> when fetch is called with one string argument -> should be truthy
ok chrome@108 (windows 10) -> when fetch is called with one string argument -> traceparent header should be present
ok chrome@108 (windows 10) -> when fetch is called with one string argument -> tracestate header should be present
ok chrome@108 (windows 10) -> when fetch is called with one string argument -> parent header should have four parts
ok chrome@108 (windows 10) -> when fetch is called with one string argument -> first part should be format version set to 00
ok chrome@108 (windows 10) -> when fetch is called with one string argument -> trace ID is there
ok chrome@108 (windows 10) -> when fetch is called with one string argument -> span ID is there
ok chrome@108 (windows 10) -> when fetch is called with one string argument -> fourth part should be set to sampled flag
ok chrome@108 (windows 10) -> when fetch is called with one string argument -> key should be in the right format
ok chrome@108 (windows 10) -> when fetch is called with one string argument -> state header should have nine parts
ok chrome@108 (windows 10) -> when fetch is called with one string argument -> version is set to 0
ok chrome@108 (windows 10) -> when fetch is called with one string argument -> parent type is set to 1 for Browser
ok chrome@108 (windows 10) -> when fetch is called with one string argument -> third part is set to account ID
ok chrome@108 (windows 10) -> when fetch is called with one string argument -> fourth part is set to app/agent ID
ok chrome@108 (windows 10) -> when fetch is called with one string argument -> span ID is there
ok chrome@108 (windows 10) -> when fetch is called with one string argument -> fifth part is empty - no transaction in Browser
ok chrome@108 (windows 10) -> when fetch is called with one string argument -> fifth part is set to empty to defer sampling decision to next hop
ok chrome@108 (windows 10) -> when fetch is called with one string argument -> priority is not set
ok chrome@108 (windows 10) -> when fetch is called with one string argument -> timestamp is there
# chrome@108 (windows 10) -> when fetch is called with URL string and options arguments
ok chrome@108 (windows 10) -> when fetch is called with URL string and options arguments -> newrelic header should be present
ok chrome@108 (windows 10) -> when fetch is called with URL string and options arguments -> should be equivalent
ok chrome@108 (windows 10) -> when fetch is called with URL string and options arguments -> should be equal
ok chrome@108 (windows 10) -> when fetch is called with URL string and options arguments -> should be equal
ok chrome@108 (windows 10) -> when fetch is called with URL string and options arguments -> should be equal
ok chrome@108 (windows 10) -> when fetch is called with URL string and options arguments -> should be equal
ok chrome@108 (windows 10) -> when fetch is called with URL string and options arguments -> should be truthy
ok chrome@108 (windows 10) -> when fetch is called with URL string and options arguments -> should be truthy
ok chrome@108 (windows 10) -> when fetch is called with URL string and options arguments -> should be truthy
ok chrome@108 (windows 10) -> when fetch is called with URL string and options arguments -> traceparent header should be present
ok chrome@108 (windows 10) -> when fetch is called with URL string and options arguments -> tracestate header should be present
ok chrome@108 (windows 10) -> when fetch is called with URL string and options arguments -> parent header should have four parts
ok chrome@108 (windows 10) -> when fetch is called with URL string and options arguments -> first part should be format version set to 00
ok chrome@108 (windows 10) -> when fetch is called with URL string and options arguments -> trace ID is there
ok chrome@108 (windows 10) -> when fetch is called with URL string and options arguments -> span ID is there
ok chrome@108 (windows 10) -> when fetch is called with URL string and options arguments -> fourth part should be set to sampled flag
ok chrome@108 (windows 10) -> when fetch is called with URL string and options arguments -> key should be in the right format
ok chrome@108 (windows 10) -> when fetch is called with URL string and options arguments -> state header should have nine parts
ok chrome@108 (windows 10) -> when fetch is called with URL string and options arguments -> version is set to 0
ok chrome@108 (windows 10) -> when fetch is called with URL string and options arguments -> parent type is set to 1 for Browser
ok chrome@108 (windows 10) -> when fetch is called with URL string and options arguments -> third part is set to account ID
ok chrome@108 (windows 10) -> when fetch is called with URL string and options arguments -> fourth part is set to app/agent ID
ok chrome@108 (windows 10) -> when fetch is called with URL string and options arguments -> span ID is there
ok chrome@108 (windows 10) -> when fetch is called with URL string and options arguments -> fifth part is empty - no transaction in Browser
ok chrome@108 (windows 10) -> when fetch is called with URL string and options arguments -> fifth part is set to empty to defer sampling decision to next hop
ok chrome@108 (windows 10) -> when fetch is called with URL string and options arguments -> priority is not set
ok chrome@108 (windows 10) -> when fetch is called with URL string and options arguments -> timestamp is there
# chrome@108 (windows 10) -> when fetch is called with a Request argument
ok chrome@108 (windows 10) -> when fetch is called with a Request argument -> newrelic header should be present
ok chrome@108 (windows 10) -> when fetch is called with a Request argument -> should be equivalent
ok chrome@108 (windows 10) -> when fetch is called with a Request argument -> should be equal
ok chrome@108 (windows 10) -> when fetch is called with a Request argument -> should be equal
ok chrome@108 (windows 10) -> when fetch is called with a Request argument -> should be equal
ok chrome@108 (windows 10) -> when fetch is called with a Request argument -> should be equal
ok chrome@108 (windows 10) -> when fetch is called with a Request argument -> should be truthy
ok chrome@108 (windows 10) -> when fetch is called with a Request argument -> should be truthy
ok chrome@108 (windows 10) -> when fetch is called with a Request argument -> should be truthy
ok chrome@108 (windows 10) -> when fetch is called with a Request argument -> traceparent header should be present
ok chrome@108 (windows 10) -> when fetch is called with a Request argument -> tracestate header should be present
ok chrome@108 (windows 10) -> when fetch is called with a Request argument -> parent header should have four parts
ok chrome@108 (windows 10) -> when fetch is called with a Request argument -> first part should be format version set to 00
ok chrome@108 (windows 10) -> when fetch is called with a Request argument -> trace ID is there
ok chrome@108 (windows 10) -> when fetch is called with a Request argument -> span ID is there
ok chrome@108 (windows 10) -> when fetch is called with a Request argument -> fourth part should be set to sampled flag
ok chrome@108 (windows 10) -> when fetch is called with a Request argument -> key should be in the right format
ok chrome@108 (windows 10) -> when fetch is called with a Request argument -> state header should have nine parts
ok chrome@108 (windows 10) -> when fetch is called with a Request argument -> version is set to 0
ok chrome@108 (windows 10) -> when fetch is called with a Request argument -> parent type is set to 1 for Browser
ok chrome@108 (windows 10) -> when fetch is called with a Request argument -> third part is set to account ID
ok chrome@108 (windows 10) -> when fetch is called with a Request argument -> fourth part is set to app/agent ID
ok chrome@108 (windows 10) -> when fetch is called with a Request argument -> span ID is there
ok chrome@108 (windows 10) -> when fetch is called with a Request argument -> fifth part is empty - no transaction in Browser
ok chrome@108 (windows 10) -> when fetch is called with a Request argument -> fifth part is set to empty to defer sampling decision to next hop
ok chrome@108 (windows 10) -> when fetch is called with a Request argument -> priority is not set
ok chrome@108 (windows 10) -> when fetch is called with a Request argument -> timestamp is there
# chrome@108 (windows 10) -> when fetch is called with a URL object argument
ok chrome@108 (windows 10) -> when fetch is called with a URL object argument -> newrelic header should be present
ok chrome@108 (windows 10) -> when fetch is called with a URL object argument -> should be equivalent
ok chrome@108 (windows 10) -> when fetch is called with a URL object argument -> should be equal
ok chrome@108 (windows 10) -> when fetch is called with a URL object argument -> should be equal
ok chrome@108 (windows 10) -> when fetch is called with a URL object argument -> should be equal
ok chrome@108 (windows 10) -> when fetch is called with a URL object argument -> should be equal
ok chrome@108 (windows 10) -> when fetch is called with a URL object argument -> should be truthy
ok chrome@108 (windows 10) -> when fetch is called with a URL object argument -> should be truthy
ok chrome@108 (windows 10) -> when fetch is called with a URL object argument -> should be truthy
ok chrome@108 (windows 10) -> when fetch is called with a URL object argument -> traceparent header should be present
ok chrome@108 (windows 10) -> when fetch is called with a URL object argument -> tracestate header should be present
ok chrome@108 (windows 10) -> when fetch is called with a URL object argument -> parent header should have four parts
ok chrome@108 (windows 10) -> when fetch is called with a URL object argument -> first part should be format version set to 00
ok chrome@108 (windows 10) -> when fetch is called with a URL object argument -> trace ID is there
ok chrome@108 (windows 10) -> when fetch is called with a URL object argument -> span ID is there
ok chrome@108 (windows 10) -> when fetch is called with a URL object argument -> fourth part should be set to sampled flag
ok chrome@108 (windows 10) -> when fetch is called with a URL object argument -> key should be in the right format
ok chrome@108 (windows 10) -> when fetch is called with a URL object argument -> state header should have nine parts
ok chrome@108 (windows 10) -> when fetch is called with a URL object argument -> version is set to 0
ok chrome@108 (windows 10) -> when fetch is called with a URL object argument -> parent type is set to 1 for Browser
ok chrome@108 (windows 10) -> when fetch is called with a URL object argument -> third part is set to account ID
ok chrome@108 (windows 10) -> when fetch is called with a URL object argument -> fourth part is set to app/agent ID
ok chrome@108 (windows 10) -> when fetch is called with a URL object argument -> span ID is there
ok chrome@108 (windows 10) -> when fetch is called with a URL object argument -> fifth part is empty - no transaction in Browser
ok chrome@108 (windows 10) -> when fetch is called with a URL object argument -> fifth part is set to empty to defer sampling decision to next hop
ok chrome@108 (windows 10) -> when fetch is called with a URL object argument -> priority is not set
ok chrome@108 (windows 10) -> when fetch is called with a URL object argument -> timestamp is there
# chrome@108 (windows 10) -> tests 211
# chrome@108 (windows 10) -> pass  211
# chrome@108 (windows 10) -> ok
# closed chrome@108 (windows 10)
ok chrome@108 (windows 10) -> Distributed Tracing info is added to Fetch ajax events -> should be a non-zero timestamp
# chrome@108 (windows 10) -> XHR request on different origin has no DT headers
ok chrome@108 (windows 10) -> XHR request on different origin has no DT headers -> newrelic header should not be present
ok chrome@108 (windows 10) -> XHR request on different origin has no DT headers -> traceparent header should not be present
ok chrome@108 (windows 10) -> XHR request on different origin has no DT headers -> tracestate header should not be present
# chrome@108 (windows 10) -> tests 83
# chrome@108 (windows 10) -> pass  83
# chrome@108 (windows 10) -> ok
ok chrome@108 (windows 10) -> module - xhr.abort() called in load callback -> has time >= 0
# chrome@108 (windows 10) -> default headers on XHR request to allowed cross-origin call
ok chrome@108 (windows 10) -> default headers on XHR request to allowed cross-origin call -> newrelic header should be present
ok chrome@108 (windows 10) -> default headers on XHR request to allowed cross-origin call -> traceparent header should not be present
ok chrome@108 (windows 10) -> default headers on XHR request to allowed cross-origin call -> tracestate header should not be present
# chrome@108 (windows 10) -> tests 66
# chrome@108 (windows 10) -> pass  66
# chrome@108 (windows 10) -> ok
ok chrome@108 (windows 10) -> xhr instrumentation works with EventTarget.prototype.addEventListener patched -> got XHR data
# chrome@108 (windows 10) -> no headers added when feature is not enabled
# chrome@108 (windows 10) -> when fetch is called with one string argument
ok chrome@108 (windows 10) -> when fetch is called with one string argument -> newrelic header should not be present
ok chrome@108 (windows 10) -> when fetch is called with one string argument -> traceparent header should not be present
ok chrome@108 (windows 10) -> when fetch is called with one string argument -> tracestate header should not be present
# chrome@108 (windows 10) -> when fetch is called with URL string and options arguments
ok chrome@108 (windows 10) -> when fetch is called with URL string and options arguments -> newrelic header should not be present
ok chrome@108 (windows 10) -> when fetch is called with URL string and options arguments -> traceparent header should not be present
ok chrome@108 (windows 10) -> when fetch is called with URL string and options arguments -> tracestate header should not be present
# chrome@108 (windows 10) -> when fetch is called with a Request argument
ok chrome@108 (windows 10) -> when fetch is called with a Request argument -> newrelic header should not be present
ok chrome@108 (windows 10) -> when fetch is called with a Request argument -> traceparent header should not be present
ok chrome@108 (windows 10) -> when fetch is called with a Request argument -> tracestate header should not be present
# chrome@108 (windows 10) -> when fetch is called with a URL object argument
ok chrome@108 (windows 10) -> when fetch is called with a URL object argument -> newrelic header should not be present
ok chrome@108 (windows 10) -> when fetch is called with a URL object argument -> traceparent header should not be present
ok chrome@108 (windows 10) -> when fetch is called with a URL object argument -> tracestate header should not be present
# chrome@108 (windows 10) -> tests 93
# chrome@108 (windows 10) -> pass  93
# chrome@108 (windows 10) -> ok
# closed chrome@108 (windows 10)
# closed chrome@108 (windows 10)
# closed chrome@108 (windows 10)
ok chrome@108 (windows 10) -> classic - PageActions are retried when collector returns 429 -> got two ins harvest requests
# chrome@108 (windows 10) -> module - ajax events harvests are retried when collector returns 429
# chrome@108 (windows 10) -> headers configuration for cross-origin calls is respected
ok chrome@108 (windows 10) -> headers configuration for cross-origin calls is respected -> newrelic header should not be present
ok chrome@108 (windows 10) -> headers configuration for cross-origin calls is respected -> traceparent header should be present
ok chrome@108 (windows 10) -> headers configuration for cross-origin calls is respected -> tracestate header should be present
# chrome@108 (windows 10) -> tests 86
# chrome@108 (windows 10) -> pass  86
# chrome@108 (windows 10) -> ok
# closed chrome@108 (windows 10)
ok chrome@108 (windows 10) -> module - xhr instrumentation works with EventTarget.prototype.addEventListener patched -> got XHR data
# chrome@108 (windows 10) -> DT headers are NOT added when the feature is not enabled (default)
# chrome@108 (windows 10) -> DT headers are NOT added when the feature is not enabled (default) (retry 1)
ok chrome@108 (windows 10) -> DT headers are NOT added when the feature is not enabled (default) (retry 1) -> newrelic header should not be present
ok chrome@108 (windows 10) -> DT headers are NOT added when the feature is not enabled (default) (retry 1) -> traceparent header should not be present
ok chrome@108 (windows 10) -> DT headers are NOT added when the feature is not enabled (default) (retry 1) -> tracestate header should not be present
# chrome@108 (windows 10) -> tests 62
# chrome@108 (windows 10) -> pass  62
# chrome@108 (windows 10) -> ok
# closed chrome@108 (windows 10)
ok chrome@108 (windows 10) -> module - an error in xhr callback is noticed and harvested -> Should have a stack trace
# chrome@108 (windows 10) -> newrelic header is not added on same origin when specifically disabled in configuration
# chrome@108 (windows 10) -> when fetch is called with one string argument
ok chrome@108 (windows 10) -> when fetch is called with one string argument -> newrelic header should not be present
ok chrome@108 (windows 10) -> when fetch is called with one string argument -> traceparent header should be present
ok chrome@108 (windows 10) -> when fetch is called with one string argument -> tracestate header should be present
ok chrome@108 (windows 10) -> when fetch is called with one string argument -> parent header should have four parts
ok chrome@108 (windows 10) -> when fetch is called with one string argument -> first part should be format version set to 00
ok chrome@108 (windows 10) -> when fetch is called with one string argument -> trace ID is there
ok chrome@108 (windows 10) -> when fetch is called with one string argument -> span ID is there
ok chrome@108 (windows 10) -> when fetch is called with one string argument -> fourth part should be set to sampled flag
ok chrome@108 (windows 10) -> when fetch is called with one string argument -> key should be in the right format
ok chrome@108 (windows 10) -> when fetch is called with one string argument -> state header should have nine parts
ok chrome@108 (windows 10) -> when fetch is called with one string argument -> version is set to 0
ok chrome@108 (windows 10) -> when fetch is called with one string argument -> parent type is set to 1 for Browser
ok chrome@108 (windows 10) -> when fetch is called with one string argument -> third part is set to account ID
ok chrome@108 (windows 10) -> when fetch is called with one string argument -> fourth part is set to app/agent ID
ok chrome@108 (windows 10) -> when fetch is called with one string argument -> span ID is there
ok chrome@108 (windows 10) -> when fetch is called with one string argument -> fifth part is empty - no transaction in Browser
ok chrome@108 (windows 10) -> when fetch is called with one string argument -> fifth part is set to empty to defer sampling decision to next hop
ok chrome@108 (windows 10) -> when fetch is called with one string argument -> priority is not set
ok chrome@108 (windows 10) -> when fetch is called with one string argument -> timestamp is there
# chrome@108 (windows 10) -> when fetch is called with URL string and options arguments
ok chrome@108 (windows 10) -> when fetch is called with URL string and options arguments -> newrelic header should not be present
ok chrome@108 (windows 10) -> when fetch is called with URL string and options arguments -> traceparent header should be present
ok chrome@108 (windows 10) -> when fetch is called with URL string and options arguments -> tracestate header should be present
ok chrome@108 (windows 10) -> when fetch is called with URL string and options arguments -> parent header should have four parts
ok chrome@108 (windows 10) -> when fetch is called with URL string and options arguments -> first part should be format version set to 00
ok chrome@108 (windows 10) -> when fetch is called with URL string and options arguments -> trace ID is there
ok chrome@108 (windows 10) -> when fetch is called with URL string and options arguments -> span ID is there
ok chrome@108 (windows 10) -> when fetch is called with URL string and options arguments -> fourth part should be set to sampled flag
ok chrome@108 (windows 10) -> when fetch is called with URL string and options arguments -> key should be in the right format
ok chrome@108 (windows 10) -> when fetch is called with URL string and options arguments -> state header should have nine parts
ok chrome@108 (windows 10) -> when fetch is called with URL string and options arguments -> version is set to 0
ok chrome@108 (windows 10) -> when fetch is called with URL string and options arguments -> parent type is set to 1 for Browser
ok chrome@108 (windows 10) -> when fetch is called with URL string and options arguments -> third part is set to account ID
ok chrome@108 (windows 10) -> when fetch is called with URL string and options arguments -> fourth part is set to app/agent ID
ok chrome@108 (windows 10) -> when fetch is called with URL string and options arguments -> span ID is there
ok chrome@108 (windows 10) -> when fetch is called with URL string and options arguments -> fifth part is empty - no transaction in Browser
ok chrome@108 (windows 10) -> when fetch is called with URL string and options arguments -> fifth part is set to empty to defer sampling decision to next hop
ok chrome@108 (windows 10) -> when fetch is called with URL string and options arguments -> priority is not set
ok chrome@108 (windows 10) -> when fetch is called with URL string and options arguments -> timestamp is there
# chrome@108 (windows 10) -> when fetch is called with a Request argument
ok chrome@108 (windows 10) -> when fetch is called with a Request argument -> newrelic header should not be present
ok chrome@108 (windows 10) -> when fetch is called with a Request argument -> traceparent header should be present
ok chrome@108 (windows 10) -> when fetch is called with a Request argument -> tracestate header should be present
ok chrome@108 (windows 10) -> when fetch is called with a Request argument -> parent header should have four parts
ok chrome@108 (windows 10) -> when fetch is called with a Request argument -> first part should be format version set to 00
ok chrome@108 (windows 10) -> when fetch is called with a Request argument -> trace ID is there
ok chrome@108 (windows 10) -> when fetch is called with a Request argument -> span ID is there
ok chrome@108 (windows 10) -> when fetch is called with a Request argument -> fourth part should be set to sampled flag
ok chrome@108 (windows 10) -> when fetch is called with a Request argument -> key should be in the right format
ok chrome@108 (windows 10) -> when fetch is called with a Request argument -> state header should have nine parts
ok chrome@108 (windows 10) -> when fetch is called with a Request argument -> version is set to 0
ok chrome@108 (windows 10) -> when fetch is called with a Request argument -> parent type is set to 1 for Browser
ok chrome@108 (windows 10) -> when fetch is called with a Request argument -> third part is set to account ID
ok chrome@108 (windows 10) -> when fetch is called with a Request argument -> fourth part is set to app/agent ID
ok chrome@108 (windows 10) -> when fetch is called with a Request argument -> span ID is there
ok chrome@108 (windows 10) -> when fetch is called with a Request argument -> fifth part is empty - no transaction in Browser
ok chrome@108 (windows 10) -> when fetch is called with a Request argument -> fifth part is set to empty to defer sampling decision to next hop
ok chrome@108 (windows 10) -> when fetch is called with a Request argument -> priority is not set
ok chrome@108 (windows 10) -> when fetch is called with a Request argument -> timestamp is there
# chrome@108 (windows 10) -> when fetch is called with a URL object argument
ok chrome@108 (windows 10) -> when fetch is called with a URL object argument -> newrelic header should not be present
ok chrome@108 (windows 10) -> when fetch is called with a URL object argument -> traceparent header should be present
ok chrome@108 (windows 10) -> when fetch is called with a URL object argument -> tracestate header should be present
ok chrome@108 (windows 10) -> when fetch is called with a URL object argument -> parent header should have four parts
ok chrome@108 (windows 10) -> when fetch is called with a URL object argument -> first part should be format version set to 00
ok chrome@108 (windows 10) -> when fetch is called with a URL object argument -> trace ID is there
ok chrome@108 (windows 10) -> when fetch is called with a URL object argument -> span ID is there
ok chrome@108 (windows 10) -> when fetch is called with a URL object argument -> fourth part should be set to sampled flag
ok chrome@108 (windows 10) -> when fetch is called with a URL object argument -> key should be in the right format
ok chrome@108 (windows 10) -> when fetch is called with a URL object argument -> state header should have nine parts
ok chrome@108 (windows 10) -> when fetch is called with a URL object argument -> version is set to 0
ok chrome@108 (windows 10) -> when fetch is called with a URL object argument -> parent type is set to 1 for Browser
ok chrome@108 (windows 10) -> when fetch is called with a URL object argument -> third part is set to account ID
ok chrome@108 (windows 10) -> when fetch is called with a URL object argument -> fourth part is set to app/agent ID
ok chrome@108 (windows 10) -> when fetch is called with a URL object argument -> span ID is there
ok chrome@108 (windows 10) -> when fetch is called with a URL object argument -> fifth part is empty - no transaction in Browser
ok chrome@108 (windows 10) -> when fetch is called with a URL object argument -> fifth part is set to empty to defer sampling decision to next hop
ok chrome@108 (windows 10) -> when fetch is called with a URL object argument -> priority is not set
ok chrome@108 (windows 10) -> when fetch is called with a URL object argument -> timestamp is there
# chrome@108 (windows 10) -> tests 222
# chrome@108 (windows 10) -> pass  222
# chrome@108 (windows 10) -> ok
# closed chrome@108 (windows 10)
ok chrome@108 (windows 10) -> classic - xhr instrumentation works with EventTarget.prototype.addEventListener patched -> got XHR data
# chrome@108 (windows 10) -> no abort call in xhr request
# chrome@108 (windows 10) -> no abort call in xhr request (retry 1)
ok chrome@108 (windows 10) -> no abort call in xhr request (retry 1) -> got XHR data
ok chrome@108 (windows 10) -> no abort call in xhr request (retry 1) -> has at least one XHR record
ok chrome@108 (windows 10) -> no abort call in xhr request (retry 1) -> has xhr with /json endpoint
ok chrome@108 (windows 10) -> no abort call in xhr request (retry 1) -> has GET method
ok chrome@108 (windows 10) -> no abort call in xhr request (retry 1) -> has a hostname
ok chrome@108 (windows 10) -> no abort call in xhr request (retry 1) -> has status of 200
ok chrome@108 (windows 10) -> no abort call in xhr request (retry 1) -> has metrics
ok chrome@108 (windows 10) -> no abort call in xhr request (retry 1) -> has one metric count
ok chrome@108 (windows 10) -> no abort call in xhr request (retry 1) -> has duration >= 0
ok chrome@108 (windows 10) -> no abort call in xhr request (retry 1) -> has rxSize of 14
ok chrome@108 (windows 10) -> no abort call in xhr request (retry 1) -> has cbTime >= 0
ok chrome@108 (windows 10) -> no abort call in xhr request (retry 1) -> has time >= 0
# chrome@108 (windows 10) -> tests 152
# chrome@108 (windows 10) -> pass  152
# chrome@108 (windows 10) -> ok
ok chrome@108 (windows 10) -> classic - ajax events harvests are retried when collector returns 429 (retry 1) -> got two events harvest requests
# chrome@108 (windows 10) -> newrelic header is not added on different origin when explicitly disabled in configuration
# chrome@108 (windows 10) -> when fetch is called with one string argument
ok chrome@108 (windows 10) -> when fetch is called with one string argument -> newrelic header should not be present
ok chrome@108 (windows 10) -> when fetch is called with one string argument -> traceparent header should not be present
ok chrome@108 (windows 10) -> when fetch is called with one string argument -> tracestate header should not be present
# chrome@108 (windows 10) -> when fetch is called with URL string and options arguments
ok chrome@108 (windows 10) -> when fetch is called with URL string and options arguments -> newrelic header should not be present
ok chrome@108 (windows 10) -> when fetch is called with URL string and options arguments -> traceparent header should not be present
ok chrome@108 (windows 10) -> when fetch is called with URL string and options arguments -> tracestate header should not be present
# chrome@108 (windows 10) -> when fetch is called with a Request argument
ok chrome@108 (windows 10) -> when fetch is called with a Request argument -> newrelic header should not be present
ok chrome@108 (windows 10) -> when fetch is called with a Request argument -> traceparent header should not be present
ok chrome@108 (windows 10) -> when fetch is called with a Request argument -> tracestate header should not be present
# chrome@108 (windows 10) -> when fetch is called with a URL object argument
ok chrome@108 (windows 10) -> when fetch is called with a URL object argument -> newrelic header should not be present
ok chrome@108 (windows 10) -> when fetch is called with a URL object argument -> traceparent header should not be present
ok chrome@108 (windows 10) -> when fetch is called with a URL object argument -> tracestate header should not be present
# chrome@108 (windows 10) -> tests 106
# chrome@108 (windows 10) -> pass  106
# chrome@108 (windows 10) -> ok
ok chrome@108 (windows 10) -> capturing XHR ajax events -> XMLHttpRequest ajax event was harvested
# chrome@108 (windows 10) -> default headers on different origin when the origin is allowed
# chrome@108 (windows 10) -> when fetch is called with one string argument
ok chrome@108 (windows 10) -> when fetch is called with one string argument -> newrelic header should be present
ok chrome@108 (windows 10) -> when fetch is called with one string argument -> should be equivalent
ok chrome@108 (windows 10) -> when fetch is called with one string argument -> should be equal
ok chrome@108 (windows 10) -> when fetch is called with one string argument -> should be equal
ok chrome@108 (windows 10) -> when fetch is called with one string argument -> should be equal
ok chrome@108 (windows 10) -> when fetch is called with one string argument -> should be equal
ok chrome@108 (windows 10) -> when fetch is called with one string argument -> should be truthy
ok chrome@108 (windows 10) -> when fetch is called with one string argument -> should be truthy
ok chrome@108 (windows 10) -> when fetch is called with one string argument -> should be truthy
ok chrome@108 (windows 10) -> when fetch is called with one string argument -> traceparent header should not be present
ok chrome@108 (windows 10) -> when fetch is called with one string argument -> tracestate header should not be present
# chrome@108 (windows 10) -> when fetch is called with URL string and options arguments
ok chrome@108 (windows 10) -> when fetch is called with URL string and options arguments -> newrelic header should be present
ok chrome@108 (windows 10) -> when fetch is called with URL string and options arguments -> should be equivalent
ok chrome@108 (windows 10) -> when fetch is called with URL string and options arguments -> should be equal
ok chrome@108 (windows 10) -> when fetch is called with URL string and options arguments -> should be equal
ok chrome@108 (windows 10) -> when fetch is called with URL string and options arguments -> should be equal
ok chrome@108 (windows 10) -> when fetch is called with URL string and options arguments -> should be equal
ok chrome@108 (windows 10) -> when fetch is called with URL string and options arguments -> should be truthy
ok chrome@108 (windows 10) -> when fetch is called with URL string and options arguments -> should be truthy
ok chrome@108 (windows 10) -> when fetch is called with URL string and options arguments -> should be truthy
ok chrome@108 (windows 10) -> when fetch is called with URL string and options arguments -> traceparent header should not be present
ok chrome@108 (windows 10) -> when fetch is called with URL string and options arguments -> tracestate header should not be present
# chrome@108 (windows 10) -> when fetch is called with a Request argument
ok chrome@108 (windows 10) -> when fetch is called with a Request argument -> newrelic header should be present
ok chrome@108 (windows 10) -> when fetch is called with a Request argument -> should be equivalent
ok chrome@108 (windows 10) -> when fetch is called with a Request argument -> should be equal
ok chrome@108 (windows 10) -> when fetch is called with a Request argument -> should be equal
ok chrome@108 (windows 10) -> when fetch is called with a Request argument -> should be equal
ok chrome@108 (windows 10) -> when fetch is called with a Request argument -> should be equal
ok chrome@108 (windows 10) -> when fetch is called with a Request argument -> should be truthy
ok chrome@108 (windows 10) -> when fetch is called with a Request argument -> should be truthy
ok chrome@108 (windows 10) -> when fetch is called with a Request argument -> should be truthy
ok chrome@108 (windows 10) -> when fetch is called with a Request argument -> traceparent header should not be present
ok chrome@108 (windows 10) -> when fetch is called with a Request argument -> tracestate header should not be present
# chrome@108 (windows 10) -> when fetch is called with a URL object argument
ok chrome@108 (windows 10) -> when fetch is called with a URL object argument -> newrelic header should be present
ok chrome@108 (windows 10) -> when fetch is called with a URL object argument -> should be equivalent
ok chrome@108 (windows 10) -> when fetch is called with a URL object argument -> should be equal
ok chrome@108 (windows 10) -> when fetch is called with a URL object argument -> should be equal
ok chrome@108 (windows 10) -> when fetch is called with a URL object argument -> should be equal
ok chrome@108 (windows 10) -> when fetch is called with a URL object argument -> should be equal
ok chrome@108 (windows 10) -> when fetch is called with a URL object argument -> should be truthy
ok chrome@108 (windows 10) -> when fetch is called with a URL object argument -> should be truthy
ok chrome@108 (windows 10) -> when fetch is called with a URL object argument -> should be truthy
ok chrome@108 (windows 10) -> when fetch is called with a URL object argument -> traceparent header should not be present
ok chrome@108 (windows 10) -> when fetch is called with a URL object argument -> tracestate header should not be present
# chrome@108 (windows 10) -> tests 130
# chrome@108 (windows 10) -> pass  130
# chrome@108 (windows 10) -> ok
# closed chrome@108 (windows 10)
ok chrome@108 (windows 10) -> module - capturing fetch metrics -> XHR record has correct keys
# chrome@108 (windows 10) -> no headers are added on different origin when the origin is not allowed
# chrome@108 (windows 10) -> when fetch is called with one string argument
ok chrome@108 (windows 10) -> when fetch is called with one string argument -> newrelic header should not be present
ok chrome@108 (windows 10) -> when fetch is called with one string argument -> traceparent header should not be present
ok chrome@108 (windows 10) -> when fetch is called with one string argument -> tracestate header should not be present
# chrome@108 (windows 10) -> when fetch is called with URL string and options arguments
ok chrome@108 (windows 10) -> when fetch is called with URL string and options arguments -> newrelic header should not be present
ok chrome@108 (windows 10) -> when fetch is called with URL string and options arguments -> traceparent header should not be present
ok chrome@108 (windows 10) -> when fetch is called with URL string and options arguments -> tracestate header should not be present
# chrome@108 (windows 10) -> when fetch is called with a Request argument
ok chrome@108 (windows 10) -> when fetch is called with a Request argument -> newrelic header should not be present
ok chrome@108 (windows 10) -> when fetch is called with a Request argument -> traceparent header should not be present
ok chrome@108 (windows 10) -> when fetch is called with a Request argument -> tracestate header should not be present
# chrome@108 (windows 10) -> when fetch is called with a URL object argument
ok chrome@108 (windows 10) -> when fetch is called with a URL object argument -> newrelic header should not be present
ok chrome@108 (windows 10) -> when fetch is called with a URL object argument -> traceparent header should not be present
ok chrome@108 (windows 10) -> when fetch is called with a URL object argument -> tracestate header should not be present
# chrome@108 (windows 10) -> tests 74
# chrome@108 (windows 10) -> pass  74
# chrome@108 (windows 10) -> ok
ok chrome@108 (windows 10) -> xhr instrumentation works with bad XHR constructor monkey-patch -> got XHR data
# chrome@108 (windows 10) -> trace context headers are added on different origin when explicitly enabled in configuration
# chrome@108 (windows 10) -> when fetch is called with one string argument
ok chrome@108 (windows 10) -> when fetch is called with one string argument -> newrelic header should be present
ok chrome@108 (windows 10) -> when fetch is called with one string argument -> should be equivalent
ok chrome@108 (windows 10) -> when fetch is called with one string argument -> should be equal
ok chrome@108 (windows 10) -> when fetch is called with one string argument -> should be equal
ok chrome@108 (windows 10) -> when fetch is called with one string argument -> should be equal
ok chrome@108 (windows 10) -> when fetch is called with one string argument -> should be equal
ok chrome@108 (windows 10) -> when fetch is called with one string argument -> should be truthy
ok chrome@108 (windows 10) -> when fetch is called with one string argument -> should be truthy
ok chrome@108 (windows 10) -> when fetch is called with one string argument -> should be truthy
ok chrome@108 (windows 10) -> when fetch is called with one string argument -> traceparent header should be present
ok chrome@108 (windows 10) -> when fetch is called with one string argument -> tracestate header should be present
ok chrome@108 (windows 10) -> when fetch is called with one string argument -> parent header should have four parts
ok chrome@108 (windows 10) -> when fetch is called with one string argument -> first part should be format version set to 00
ok chrome@108 (windows 10) -> when fetch is called with one string argument -> trace ID is there
ok chrome@108 (windows 10) -> when fetch is called with one string argument -> span ID is there
ok chrome@108 (windows 10) -> when fetch is called with one string argument -> fourth part should be set to sampled flag
ok chrome@108 (windows 10) -> when fetch is called with one string argument -> key should be in the right format
ok chrome@108 (windows 10) -> when fetch is called with one string argument -> state header should have nine parts
ok chrome@108 (windows 10) -> when fetch is called with one string argument -> version is set to 0
ok chrome@108 (windows 10) -> when fetch is called with one string argument -> parent type is set to 1 for Browser
ok chrome@108 (windows 10) -> when fetch is called with one string argument -> third part is set to account ID
ok chrome@108 (windows 10) -> when fetch is called with one string argument -> fourth part is set to app/agent ID
ok chrome@108 (windows 10) -> when fetch is called with one string argument -> span ID is there
ok chrome@108 (windows 10) -> when fetch is called with one string argument -> fifth part is empty - no transaction in Browser
ok chrome@108 (windows 10) -> when fetch is called with one string argument -> fifth part is set to empty to defer sampling decision to next hop
ok chrome@108 (windows 10) -> when fetch is called with one string argument -> priority is not set
ok chrome@108 (windows 10) -> when fetch is called with one string argument -> timestamp is there
# chrome@108 (windows 10) -> when fetch is called with URL string and options arguments
ok chrome@108 (windows 10) -> when fetch is called with URL string and options arguments -> newrelic header should be present
ok chrome@108 (windows 10) -> when fetch is called with URL string and options arguments -> should be equivalent
ok chrome@108 (windows 10) -> when fetch is called with URL string and options arguments -> should be equal
ok chrome@108 (windows 10) -> when fetch is called with URL string and options arguments -> should be equal
ok chrome@108 (windows 10) -> when fetch is called with URL string and options arguments -> should be equal
ok chrome@108 (windows 10) -> when fetch is called with URL string and options arguments -> should be equal
ok chrome@108 (windows 10) -> when fetch is called with URL string and options arguments -> should be truthy
ok chrome@108 (windows 10) -> when fetch is called with URL string and options arguments -> should be truthy
ok chrome@108 (windows 10) -> when fetch is called with URL string and options arguments -> should be truthy
ok chrome@108 (windows 10) -> when fetch is called with URL string and options arguments -> traceparent header should be present
ok chrome@108 (windows 10) -> when fetch is called with URL string and options arguments -> tracestate header should be present
ok chrome@108 (windows 10) -> when fetch is called with URL string and options arguments -> parent header should have four parts
ok chrome@108 (windows 10) -> when fetch is called with URL string and options arguments -> first part should be format version set to 00
ok chrome@108 (windows 10) -> when fetch is called with URL string and options arguments -> trace ID is there
ok chrome@108 (windows 10) -> when fetch is called with URL string and options arguments -> span ID is there
ok chrome@108 (windows 10) -> when fetch is called with URL string and options arguments -> fourth part should be set to sampled flag
ok chrome@108 (windows 10) -> when fetch is called with URL string and options arguments -> key should be in the right format
ok chrome@108 (windows 10) -> when fetch is called with URL string and options arguments -> state header should have nine parts
ok chrome@108 (windows 10) -> when fetch is called with URL string and options arguments -> version is set to 0
ok chrome@108 (windows 10) -> when fetch is called with URL string and options arguments -> parent type is set to 1 for Browser
ok chrome@108 (windows 10) -> when fetch is called with URL string and options arguments -> third part is set to account ID
ok chrome@108 (windows 10) -> when fetch is called with URL string and options arguments -> fourth part is set to app/agent ID
ok chrome@108 (windows 10) -> when fetch is called with URL string and options arguments -> span ID is there
ok chrome@108 (windows 10) -> when fetch is called with URL string and options arguments -> fifth part is empty - no transaction in Browser
ok chrome@108 (windows 10) -> when fetch is called with URL string and options arguments -> fifth part is set to empty to defer sampling decision to next hop
ok chrome@108 (windows 10) -> when fetch is called with URL string and options arguments -> priority is not set
ok chrome@108 (windows 10) -> when fetch is called with URL string and options arguments -> timestamp is there
# chrome@108 (windows 10) -> when fetch is called with a Request argument
ok chrome@108 (windows 10) -> when fetch is called with a Request argument -> newrelic header should be present
ok chrome@108 (windows 10) -> when fetch is called with a Request argument -> should be equivalent
ok chrome@108 (windows 10) -> when fetch is called with a Request argument -> should be equal
ok chrome@108 (windows 10) -> when fetch is called with a Request argument -> should be equal
ok chrome@108 (windows 10) -> when fetch is called with a Request argument -> should be equal
ok chrome@108 (windows 10) -> when fetch is called with a Request argument -> should be equal
ok chrome@108 (windows 10) -> when fetch is called with a Request argument -> should be truthy
ok chrome@108 (windows 10) -> when fetch is called with a Request argument -> should be truthy
ok chrome@108 (windows 10) -> when fetch is called with a Request argument -> should be truthy
ok chrome@108 (windows 10) -> when fetch is called with a Request argument -> traceparent header should be present
ok chrome@108 (windows 10) -> when fetch is called with a Request argument -> tracestate header should be present
ok chrome@108 (windows 10) -> when fetch is called with a Request argument -> parent header should have four parts
ok chrome@108 (windows 10) -> when fetch is called with a Request argument -> first part should be format version set to 00
ok chrome@108 (windows 10) -> when fetch is called with a Request argument -> trace ID is there
ok chrome@108 (windows 10) -> when fetch is called with a Request argument -> span ID is there
ok chrome@108 (windows 10) -> when fetch is called with a Request argument -> fourth part should be set to sampled flag
ok chrome@108 (windows 10) -> when fetch is called with a Request argument -> key should be in the right format
ok chrome@108 (windows 10) -> when fetch is called with a Request argument -> state header should have nine parts
ok chrome@108 (windows 10) -> when fetch is called with a Request argument -> version is set to 0
ok chrome@108 (windows 10) -> when fetch is called with a Request argument -> parent type is set to 1 for Browser
ok chrome@108 (windows 10) -> when fetch is called with a Request argument -> third part is set to account ID
ok chrome@108 (windows 10) -> when fetch is called with a Request argument -> fourth part is set to app/agent ID
ok chrome@108 (windows 10) -> when fetch is called with a Request argument -> span ID is there
ok chrome@108 (windows 10) -> when fetch is called with a Request argument -> fifth part is empty - no transaction in Browser
ok chrome@108 (windows 10) -> when fetch is called with a Request argument -> fifth part is set to empty to defer sampling decision to next hop
ok chrome@108 (windows 10) -> when fetch is called with a Request argument -> priority is not set
ok chrome@108 (windows 10) -> when fetch is called with a Request argument -> timestamp is there
# chrome@108 (windows 10) -> when fetch is called with a URL object argument
ok chrome@108 (windows 10) -> when fetch is called with a URL object argument -> newrelic header should be present
ok chrome@108 (windows 10) -> when fetch is called with a URL object argument -> should be equivalent
ok chrome@108 (windows 10) -> when fetch is called with a URL object argument -> should be equal
ok chrome@108 (windows 10) -> when fetch is called with a URL object argument -> should be equal
ok chrome@108 (windows 10) -> when fetch is called with a URL object argument -> should be equal
ok chrome@108 (windows 10) -> when fetch is called with a URL object argument -> should be equal
ok chrome@108 (windows 10) -> when fetch is called with a URL object argument -> should be truthy
ok chrome@108 (windows 10) -> when fetch is called with a URL object argument -> should be truthy
ok chrome@108 (windows 10) -> when fetch is called with a URL object argument -> should be truthy
ok chrome@108 (windows 10) -> when fetch is called with a URL object argument -> traceparent header should be present
ok chrome@108 (windows 10) -> when fetch is called with a URL object argument -> tracestate header should be present
ok chrome@108 (windows 10) -> when fetch is called with a URL object argument -> parent header should have four parts
ok chrome@108 (windows 10) -> when fetch is called with a URL object argument -> first part should be format version set to 00
ok chrome@108 (windows 10) -> when fetch is called with a URL object argument -> trace ID is there
ok chrome@108 (windows 10) -> when fetch is called with a URL object argument -> span ID is there
ok chrome@108 (windows 10) -> when fetch is called with a URL object argument -> fourth part should be set to sampled flag
ok chrome@108 (windows 10) -> when fetch is called with a URL object argument -> key should be in the right format
ok chrome@108 (windows 10) -> when fetch is called with a URL object argument -> state header should have nine parts
ok chrome@108 (windows 10) -> when fetch is called with a URL object argument -> version is set to 0
ok chrome@108 (windows 10) -> when fetch is called with a URL object argument -> parent type is set to 1 for Browser
ok chrome@108 (windows 10) -> when fetch is called with a URL object argument -> third part is set to account ID
ok chrome@108 (windows 10) -> when fetch is called with a URL object argument -> fourth part is set to app/agent ID
ok chrome@108 (windows 10) -> when fetch is called with a URL object argument -> span ID is there
ok chrome@108 (windows 10) -> when fetch is called with a URL object argument -> fifth part is empty - no transaction in Browser
ok chrome@108 (windows 10) -> when fetch is called with a URL object argument -> fifth part is set to empty to defer sampling decision to next hop
ok chrome@108 (windows 10) -> when fetch is called with a URL object argument -> priority is not set
ok chrome@108 (windows 10) -> when fetch is called with a URL object argument -> timestamp is there
# chrome@108 (windows 10) -> tests 183
# chrome@108 (windows 10) -> pass  183
# chrome@108 (windows 10) -> ok
ok chrome@108 (windows 10) -> module - capturing XHR metrics -> XHR record has correct keys
# chrome@108 (windows 10) -> no headers are added on different origin by default
# chrome@108 (windows 10) -> when fetch is called with one string argument
ok chrome@108 (windows 10) -> when fetch is called with one string argument -> newrelic header should not be present
ok chrome@108 (windows 10) -> when fetch is called with one string argument -> traceparent header should not be present
ok chrome@108 (windows 10) -> when fetch is called with one string argument -> tracestate header should not be present
# chrome@108 (windows 10) -> when fetch is called with URL string and options arguments
ok chrome@108 (windows 10) -> when fetch is called with URL string and options arguments -> newrelic header should not be present
ok chrome@108 (windows 10) -> when fetch is called with URL string and options arguments -> traceparent header should not be present
ok chrome@108 (windows 10) -> when fetch is called with URL string and options arguments -> tracestate header should not be present
# chrome@108 (windows 10) -> when fetch is called with a Request argument
ok chrome@108 (windows 10) -> when fetch is called with a Request argument -> newrelic header should not be present
ok chrome@108 (windows 10) -> when fetch is called with a Request argument -> traceparent header should not be present
ok chrome@108 (windows 10) -> when fetch is called with a Request argument -> tracestate header should not be present
# chrome@108 (windows 10) -> when fetch is called with a URL object argument
ok chrome@108 (windows 10) -> when fetch is called with a URL object argument -> newrelic header should not be present
ok chrome@108 (windows 10) -> when fetch is called with a URL object argument -> traceparent header should not be present
ok chrome@108 (windows 10) -> when fetch is called with a URL object argument -> tracestate header should not be present
# chrome@108 (windows 10) -> tests 81
# chrome@108 (windows 10) -> pass  81
# chrome@108 (windows 10) -> ok
ok chrome@108 (windows 10) -> classic - xhr instrumentation works with bad XHR constructor monkey-patch -> got XHR data
# chrome@108 (windows 10) -> xhr.abort() called in load callback
# chrome@108 (windows 10) -> xhr.abort() called in load callback (retry 1)
ok chrome@108 (windows 10) -> xhr.abort() called in load callback (retry 1) -> got XHR data
ok chrome@108 (windows 10) -> xhr.abort() called in load callback (retry 1) -> has at least one XHR record
ok chrome@108 (windows 10) -> xhr.abort() called in load callback (retry 1) -> has xhr with /xhr_with_cat/1 endpoint
ok chrome@108 (windows 10) -> xhr.abort() called in load callback (retry 1) -> has GET method
ok chrome@108 (windows 10) -> xhr.abort() called in load callback (retry 1) -> has a hostname
ok chrome@108 (windows 10) -> xhr.abort() called in load callback (retry 1) -> has status of 200
ok chrome@108 (windows 10) -> xhr.abort() called in load callback (retry 1) -> has CAT data for /xhr_with_cat
ok chrome@108 (windows 10) -> xhr.abort() called in load callback (retry 1) -> has metrics
ok chrome@108 (windows 10) -> xhr.abort() called in load callback (retry 1) -> has one metric count
ok chrome@108 (windows 10) -> xhr.abort() called in load callback (retry 1) -> has duration >= 0
ok chrome@108 (windows 10) -> xhr.abort() called in load callback (retry 1) -> has rxSize of 409
ok chrome@108 (windows 10) -> xhr.abort() called in load callback (retry 1) -> has cbTime >= 0
ok chrome@108 (windows 10) -> xhr.abort() called in load callback (retry 1) -> has time >= 0
# chrome@108 (windows 10) -> tests 86
# chrome@108 (windows 10) -> pass  86
# chrome@108 (windows 10) -> ok
# closed chrome@108 (windows 10)
# closed chrome@108 (windows 10)
ok chrome@108 (windows 10) -> capturing Fetch ajax events -> Fetch ajax event was harvested
# chrome@108 (windows 10) -> ajax events harvests are retried when collector returns 429
# chrome@108 (windows 10) -> ajax events harvests are retried when collector returns 429 (retry 1)
ok chrome@108 (windows 10) -> ajax events harvests are retried when collector returns 429 (retry 1) -> server responded with 429
ok chrome@108 (windows 10) -> ajax events harvests are retried when collector returns 429 (retry 1) -> server responded with 200
ok chrome@108 (windows 10) -> ajax events harvests are retried when collector returns 429 (retry 1) -> second body should include the contents of the first retried harvest
ok chrome@108 (windows 10) -> ajax events harvests are retried when collector returns 429 (retry 1) -> got two events harvest requests
# chrome@108 (windows 10) -> tests 146
# chrome@108 (windows 10) -> pass  146
# chrome@108 (windows 10) -> ok
# closed chrome@108 (windows 10)
# closed chrome@108 (windows 10)
# closed chrome@108 (windows 10)
# closed chrome@108 (windows 10)
# closed chrome@108 (windows 10)
ok chrome@108 (windows 10) -> module - an error in setInterval is noticed and harvested -> Should have a stack trace
# chrome@108 (windows 10) -> capturing large payload of XHR ajax events
# chrome@108 (windows 10) -> capturing large payload of XHR ajax events (retry 2)
ok chrome@108 (windows 10) -> capturing large payload of XHR ajax events (retry 2) -> should be truthy
# chrome@108 (windows 10) -> tests 46
# chrome@108 (windows 10) -> pass  46
# chrome@108 (windows 10) -> ok
ok chrome@108 (windows 10) -> module - xhr instrumentation works with bad XHR constructor monkey-patch -> got XHR data
# chrome@108 (windows 10) -> Ignoring data url XHR events.
# chrome@108 (windows 10) -> Ignoring data url XHR events. (retry 1)
ok chrome@108 (windows 10) -> Ignoring data url XHR events. (retry 1) -> Did not receive an XHR event for data URL.
ok chrome@108 (windows 10) -> Ignoring data url XHR events. (retry 1) -> Received events harvest.
# chrome@108 (windows 10) -> tests 164
# chrome@108 (windows 10) -> pass  164
# chrome@108 (windows 10) -> ok
# closed chrome@108 (windows 10)
# closed chrome@108 (windows 10)
ok chrome@108 (windows 10) -> Distributed Tracing info is added to XHR ajax events -> should be a non-zero timestamp
# chrome@108 (windows 10) -> slow XHR submission should not delay next page load
# chrome@108 (windows 10) -> slow XHR submission should not delay next page load (retry 1)
ok chrome@108 (windows 10) -> slow XHR submission should not delay next page load (retry 1) -> next page should have loaded before router responded
ok chrome@108 (windows 10) -> slow XHR submission should not delay next page load (retry 1) -> router finished sending response
# chrome@108 (windows 10) -> tests 69
# chrome@108 (windows 10) -> pass  69
# chrome@108 (windows 10) -> ok
# closed chrome@108 (windows 10)
ok chrome@108 (windows 10) -> XHR request on same origin has DT headers -> timestamp is there
# chrome@108 (windows 10) -> capturing XHR metrics
ok chrome@108 (windows 10) -> capturing XHR metrics -> XHR data submitted via POST request from sendBeacon
ok chrome@108 (windows 10) -> capturing XHR metrics -> request body should not be empty
ok chrome@108 (windows 10) -> capturing XHR metrics -> has xhr data
ok chrome@108 (windows 10) -> capturing XHR metrics -> has at least one XHR record
ok chrome@108 (windows 10) -> capturing XHR metrics -> XHR record has correct keys
# chrome@108 (windows 10) -> tests 98
# chrome@108 (windows 10) -> pass  98
# chrome@108 (windows 10) -> ok
ok chrome@108 (windows 10) -> XHR request on same origin has no newrelic header when disabled in configuration -> tracestate header should be present
# chrome@108 (windows 10) -> capturing fetch metrics
ok chrome@108 (windows 10) -> capturing fetch metrics -> XHR data submitted via POST request from sendBeacon
ok chrome@108 (windows 10) -> capturing fetch metrics -> request body should not be empty
ok chrome@108 (windows 10) -> capturing fetch metrics -> has xhr data
ok chrome@108 (windows 10) -> capturing fetch metrics -> XHR record has correct keys
# chrome@108 (windows 10) -> tests 116
# chrome@108 (windows 10) -> pass  116
# chrome@108 (windows 10) -> ok
# closed chrome@108 (windows 10)
# closed chrome@108 (windows 10)
# retrying 2 tests for chrome@108 (windows 10)
# starting tests for chrome@108 (windows 10)
# chrome@108 (windows 10) -> module - capturing large payload of XHR ajax events
ok chrome@108 (windows 10) -> module - capturing large payload of XHR ajax events -> should be truthy
# chrome@108 (windows 10) -> module - ajax events harvests are retried when collector returns 429
ok chrome@108 (windows 10) -> module - ajax events harvests are retried when collector returns 429 -> server responded with 429
ok chrome@108 (windows 10) -> module - ajax events harvests are retried when collector returns 429 -> server responded with 200
ok chrome@108 (windows 10) -> module - ajax events harvests are retried when collector returns 429 -> second body should include the contents of the first retried harvest
# tearing down chrome@108 (windows 10)
ok chrome@108 (windows 10) -> module - ajax events harvests are retried when collector returns 429 -> got two events harvest requests
# chrome@108 (windows 10) -> tests 5
# chrome@108 (windows 10) -> pass  5
# chrome@108 (windows 10) -> ok
# closed chrome@108 (windows 10)
# closed a browser, 0 remaining
# stopping asset server
1..2279
# tests 2279
# pass 2279
# ok
